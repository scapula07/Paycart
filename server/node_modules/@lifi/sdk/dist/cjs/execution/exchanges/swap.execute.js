"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapExecutionManager = void 0;
const ApiService_1 = __importDefault(require("../../services/ApiService"));
const ChainsService_1 = __importDefault(require("../../services/ChainsService"));
const errors_1 = require("../../utils/errors");
const getProvider_1 = require("../../utils/getProvider");
const parseError_1 = require("../../utils/parseError");
const utils_1 = require("../../utils/utils");
const allowance_execute_1 = require("../allowance.execute");
const balanceCheck_execute_1 = require("../balanceCheck.execute");
const stepComparison_1 = require("../stepComparison");
const switchChain_1 = require("../switchChain");
const utils_2 = require("../utils");
class SwapExecutionManager {
    constructor() {
        this.allowUserInteraction = true;
        this.allowInteraction = (value) => {
            this.allowUserInteraction = value;
        };
        this.execute = ({ signer, step, statusManager, settings, }) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            step.execution = statusManager.initExecutionObject(step);
            const chainsService = ChainsService_1.default.getInstance();
            const fromChain = yield chainsService.getChainById(step.action.fromChainId);
            // STEP 1: Check allowance
            if (!(0, utils_1.isZeroAddress)(step.action.fromToken.address)) {
                yield (0, allowance_execute_1.checkAllowance)(signer, step, statusManager, settings, fromChain, this.allowUserInteraction);
            }
            // STEP 2: Get transaction
            let swapProcess = statusManager.findOrCreateProcess(step, 'SWAP');
            let transaction;
            try {
                if (swapProcess.txHash) {
                    // Make sure that the chain is still correct
                    const updatedSigner = yield (0, switchChain_1.switchChain)(signer, statusManager, step, settings.switchChainHook, this.allowUserInteraction);
                    if (!updatedSigner) {
                        // Chain switch was not successful, stop execution here
                        return step.execution;
                    }
                    signer = updatedSigner;
                    // Load exiting transaction
                    transaction = yield (0, getProvider_1.getProvider)(signer).getTransaction(swapProcess.txHash);
                }
                else {
                    swapProcess = statusManager.updateProcess(step, swapProcess.type, 'STARTED');
                    // Check balance
                    yield (0, balanceCheck_execute_1.balanceCheck)(signer, step);
                    // Create new transaction
                    if (!step.transactionRequest) {
                        const personalizedStep = yield (0, utils_1.personalizeStep)(signer, step);
                        const updatedStep = yield ApiService_1.default.getStepTransaction(personalizedStep);
                        step = Object.assign(Object.assign({}, (yield (0, stepComparison_1.stepComparison)(statusManager, personalizedStep, updatedStep, settings.acceptSlippageUpdateHook, this.allowUserInteraction))), { execution: step.execution });
                    }
                    const { transactionRequest } = step;
                    if (!transactionRequest) {
                        throw new errors_1.TransactionError(errors_1.LifiErrorCode.TransactionUnprepared, 'Unable to prepare transaction.');
                    }
                    // STEP 3: Send the transaction
                    // Make sure that the chain is still correct
                    const updatedSigner = yield (0, switchChain_1.switchChain)(signer, statusManager, step, settings.switchChainHook, this.allowUserInteraction);
                    if (!updatedSigner) {
                        // Chain switch was not successful, stop execution here
                        return step.execution;
                    }
                    signer = updatedSigner;
                    swapProcess = statusManager.updateProcess(step, swapProcess.type, 'ACTION_REQUIRED');
                    if (!this.allowUserInteraction) {
                        return step.execution;
                    }
                    // Submit the transaction
                    transaction = yield signer.sendTransaction(transactionRequest);
                }
                // STEP 4: Wait for the transaction
                swapProcess = statusManager.updateProcess(step, swapProcess.type, 'PENDING', {
                    txLink: fromChain.metamask.blockExplorerUrls[0] + 'tx/' + transaction.hash,
                    txHash: transaction.hash,
                });
                yield transaction.wait();
            }
            catch (e) {
                if (e.code === 'TRANSACTION_REPLACED' && e.replacement) {
                    swapProcess = statusManager.updateProcess(step, swapProcess.type, 'PENDING', {
                        txHash: e.replacement.hash,
                        txLink: fromChain.metamask.blockExplorerUrls[0] +
                            'tx/' +
                            e.replacement.hash,
                    });
                }
                else {
                    const error = yield (0, parseError_1.parseError)(e);
                    swapProcess = statusManager.updateProcess(step, swapProcess.type, 'FAILED', {
                        error: {
                            message: error.message,
                            htmlMessage: error.htmlMessage,
                            code: error.code,
                        },
                    });
                    statusManager.updateExecution(step, 'FAILED');
                    throw error;
                }
            }
            // STEP 5: Wait for the receiving chain
            let statusResponse;
            try {
                if (!swapProcess.txHash) {
                    throw new Error('Transaction hash is undefined.');
                }
                statusResponse = yield (0, utils_2.waitForReceivingTransaction)(swapProcess.txHash, statusManager, swapProcess.type, step);
            }
            catch (e) {
                swapProcess = statusManager.updateProcess(step, swapProcess.type, 'FAILED', {
                    error: {
                        code: errors_1.LifiErrorCode.TransactionFailed,
                        message: 'Failed while waiting for receiving chain.',
                        htmlMessage: (0, parseError_1.getTransactionFailedMessage)(step, swapProcess.txLink),
                    },
                });
                statusManager.updateExecution(step, 'FAILED');
                throw e;
            }
            swapProcess = statusManager.updateProcess(step, swapProcess.type, 'DONE', {
                txHash: (_a = statusResponse.receiving) === null || _a === void 0 ? void 0 : _a.txHash,
                txLink: fromChain.metamask.blockExplorerUrls[0] +
                    'tx/' +
                    ((_b = statusResponse.receiving) === null || _b === void 0 ? void 0 : _b.txHash),
            });
            statusManager.updateExecution(step, 'DONE', {
                fromAmount: statusResponse.sending.amount,
                toAmount: (_c = statusResponse.receiving) === null || _c === void 0 ? void 0 : _c.amount,
                toToken: (_d = statusResponse.receiving) === null || _d === void 0 ? void 0 : _d.token,
                gasUsed: statusResponse.sending.gasUsed,
                gasPrice: statusResponse.sending.gasPrice,
            });
            // DONE
            return step.execution;
        });
    }
}
exports.SwapExecutionManager = SwapExecutionManager;
