import { BigNumber } from 'ethers';
import { Service, TransactionRequest, UniqueSubject } from '../common';
import { GetP2PPaymentChannelsAdminDto } from '../dto';
import { P2PPaymentChannel, P2PPaymentChannelPayments, P2PPaymentChannels, P2PPaymentDeposit, P2PPaymentDeposits } from './classes';
export declare class P2PPaymentService extends Service {
    readonly p2pPaymentDepositAddress$: UniqueSubject<string>;
    get p2pPaymentDepositAddress(): string;
    syncP2PPaymentDeposit(owner: string, token: string): Promise<P2PPaymentDeposit>;
    syncP2PPaymentDeposits(owner: string, tokens: string[]): Promise<P2PPaymentDeposits>;
    getP2PPaymentChannel(hash: string): Promise<P2PPaymentChannel>;
    getP2PPaymentChannels(senderOrRecipient: string, filters: {
        uncommittedOnly: boolean;
    }, page?: number): Promise<P2PPaymentChannels>;
    getP2PPaymentChannelsAdmin(dto: GetP2PPaymentChannelsAdminDto): Promise<P2PPaymentChannels>;
    getP2PPaymentChannelPayments(channel: string, page?: number): Promise<P2PPaymentChannelPayments>;
    decreaseP2PPaymentDeposit(token: string, amount: BigNumber): Promise<P2PPaymentDeposit>;
    updateP2PPaymentDeposit(token: string, totalAmount: BigNumber): Promise<P2PPaymentDeposit>;
    increaseP2PPaymentChannelAmount(recipient: string, token: string, value: BigNumber, uidSalt?: string): Promise<P2PPaymentChannel>;
    updateP2PPaymentChannel(recipient: string, token: string, totalAmount: BigNumber, uidSalt?: string): Promise<P2PPaymentChannel>;
    signP2PPaymentChannel(hash: string): Promise<P2PPaymentChannel>;
    buildP2PPaymentDepositWithdrawalTransactionRequest(deposit: P2PPaymentDeposit): TransactionRequest;
    protected onInit(): void;
}
