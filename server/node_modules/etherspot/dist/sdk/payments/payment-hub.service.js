"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentHubService = void 0;
const ethers_1 = require("ethers");
const core_1 = require("@apollo/client/core");
const common_1 = require("../common");
const classes_1 = require("./classes");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
class PaymentHubService extends common_1.Service {
    async getPaymentHub(hub, token = null) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $hub: String!, $token: String) {
          result: paymentHub(chainId: $chainId, hub: $hub, token: $token) {
            address
            createdAt
            liquidity
            token
            updatedAt
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHub,
            },
            variables: {
                hub,
                token,
            },
        });
        return result;
    }
    async getPaymentHubs(hub = null, token, page = null) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $hub: String, $token: String, $page: Int) {
          result: paymentHubs(chainId: $chainId, hub: $hub, token: $token, page: $page) {
            items {
              address
              createdAt
              liquidity
              token
              updatedAt
            }
            currentPage
            nextPage
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubs,
            },
            variables: {
                hub,
                token,
                page: page || 1,
            },
        });
        return result;
    }
    async getPaymentHubBridge(hub, token, acceptedChainId, acceptedToken) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $hub: String!, $token: String, $acceptedChainId: Int!, $acceptedToken: String) {
          result: paymentHubBridge(
            chainId: $chainId
            hub: $hub
            token: $token
            acceptedChainId: $acceptedChainId
            acceptedToken: $acceptedToken
          ) {
            hub {
              address
              token
              liquidity
            }
            acceptedChainId
            acceptedToken
            state
            createdAt
            updatedAt
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubBridge,
            },
            variables: {
                hub,
                token,
                acceptedChainId,
                acceptedToken,
            },
        });
        return result;
    }
    async getPaymentHubBridges(hub, token = null, acceptedChainId = null, page = null) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $hub: String!, $token: String, $acceptedChainId: Int, $page: Int) {
          result: paymentHubBridges(
            chainId: $chainId
            hub: $hub
            token: $token
            acceptedChainId: $acceptedChainId
            page: $page
          ) {
            items {
              hub {
                address
                token
                liquidity
              }
              acceptedChainId
              acceptedToken
              state
              createdAt
              updatedAt
            }
            currentPage
            nextPage
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubBridges,
            },
            variables: {
                hub,
                token,
                acceptedChainId,
                page: page || 1,
            },
        });
        return result;
    }
    async getPaymentHubDeposit(hub, token = null, owner) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $hub: String!, $owner: String!, $token: String) {
          result: paymentHubDeposit(chainId: $chainId, hub: $hub, owner: $owner, token: $token) {
            hub {
              address
              token
              liquidity
            }
            owner
            totalAmount
            createdAt
            updatedAt
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubDeposit,
            },
            variables: {
                hub,
                owner,
                token,
            },
        });
        return result;
    }
    async getPaymentHubDeposits(hub, tokens = [], owner, page = null) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $hub: String!, $owner: String!, $tokens: [String!], $page: Int) {
          result: paymentHubDeposits(chainId: $chainId, hub: $hub, owner: $owner, tokens: $tokens, page: $page) {
            items {
              hub {
                address
                token
                liquidity
              }
              owner
              totalAmount
              createdAt
              updatedAt
            }
            currentPage
            nextPage
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubDeposits,
            },
            variables: {
                hub,
                owner,
                tokens,
                page: page || 1,
            },
        });
        return result;
    }
    async getPaymentHubPayment(hash) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($hash: String!) {
          result: paymentHubPayment(hash: $hash) {
            hub {
              address
              token
              liquidity
            }
            hash
            sender
            recipient
            value
            createdAt
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubPayment,
            },
            variables: {
                hash,
            },
        });
        return result;
    }
    async getPaymentHubPayments(hub, token = null, senderOrRecipient, page = null) {
        const { apiService, accountService } = this.services;
        const owner = accountService.accountAddress;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $hub: String!, $owner: String!, $senderOrRecipient: String, $token: String, $page: Int) {
          result: paymentHubPayments(
            chainId: $chainId
            hub: $hub
            owner: $owner
            senderOrRecipient: $senderOrRecipient
            token: $token
            page: $page
          ) {
            items {
              hub {
                address
                token
                liquidity
              }
              hash
              sender
              recipient
              value
              createdAt
            }
            currentPage
            nextPage
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubPayments,
            },
            variables: {
                hub,
                owner,
                senderOrRecipient,
                token,
                page: page || 1,
            },
        });
        return result;
    }
    async createPaymentHubPayment(hub, token, recipient, value) {
        const { apiService, accountService } = this.services;
        const { accountAddress } = accountService;
        const { result } = await apiService.mutate(core_1.gql `
        mutation(
          $chainId: Int
          $hub: String!
          $sender: String!
          $recipient: String!
          $value: BigNumber!
          $token: String
        ) {
          result: createPaymentHubPayment(
            chainId: $chainId
            hub: $hub
            sender: $sender
            recipient: $recipient
            value: $value
            token: $token
          ) {
            hub {
              address
              token
              liquidity
            }
            hash
            sender
            recipient
            value
            createdAt
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubPayment,
            },
            variables: {
                hub,
                sender: accountAddress,
                recipient,
                value,
                token,
            },
        });
        return result;
    }
    async updatePaymentHub(liquidity, token = null) {
        const { apiService, accountService } = this.services;
        const { accountAddress } = accountService;
        const { result } = await apiService.mutate(core_1.gql `
        mutation($chainId: Int, $hub: String!, $token: String, $liquidity: BigNumber!) {
          result: updatePaymentHub(chainId: $chainId, hub: $hub, token: $token, liquidity: $liquidity) {
            address
            token
            liquidity
            createdAt
            updatedAt
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHub,
            },
            variables: {
                hub: accountAddress,
                token,
                liquidity,
            },
        });
        return result;
    }
    async updatePaymentHubDeposit(hub, totalAmount, token = null) {
        if (!totalAmount) {
            totalAmount = ethers_1.BigNumber.from(0);
        }
        const { paymentRegistryContract } = this.internalContracts;
        const { apiService, accountService, blockService, walletService } = this.services;
        const sender = accountService.accountAddress;
        const blockNumber = await blockService.getCurrentBlockNumber();
        const paymentHubDeposit = await this.getPaymentHubDeposit(hub, token, sender);
        const currentAmount = paymentHubDeposit ? paymentHubDeposit.totalAmount : ethers_1.BigNumber.from(0);
        let senderSignature = null;
        if (currentAmount.lt(totalAmount)) {
            const diff = totalAmount.sub(currentAmount);
            const { p2pPaymentsService } = this.services;
            const hash = utils_1.computePaymentChannelHash(sender, hub, token, constants_1.PAYMENT_HUB_P2P_CHANNEL_UID);
            const paymentChannel = await p2pPaymentsService.getP2PPaymentChannel(hash);
            const amount = paymentChannel ? paymentChannel.totalAmount.add(diff) : diff;
            const messageHash = paymentRegistryContract.hashPaymentChannelCommit(sender, hub, common_1.prepareAddress(token, true), constants_1.PAYMENT_HUB_P2P_CHANNEL_UID, blockNumber, amount);
            senderSignature = await walletService.signMessage(messageHash);
        }
        const { result } = await apiService.mutate(core_1.gql `
        mutation(
          $chainId: Int
          $blockNumber: Int!
          $hub: String!
          $token: String
          $totalAmount: BigNumber
          $sender: String!
          $senderSignature: String
        ) {
          result: updatePaymentHubDeposit(
            blockNumber: $blockNumber
            chainId: $chainId
            hub: $hub
            token: $token
            totalAmount: $totalAmount
            sender: $sender
            senderSignature: $senderSignature
          ) {
            hub {
              address
              token
              liquidity
            }
            owner
            totalAmount
            createdAt
            updatedAt
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubDeposit,
            },
            variables: {
                blockNumber,
                hub,
                token,
                totalAmount,
                sender,
                senderSignature,
            },
        });
        return result;
    }
    async transferPaymentHubDeposit(hub, token, value, targetChainId, targetHub = null, targetToken = null) {
        if (!value) {
            value = ethers_1.BigNumber.from(0);
        }
        const { apiService, accountService } = this.services;
        const sender = accountService.accountAddress;
        const { result } = await apiService.mutate(core_1.gql `
        mutation(
          $chainId: Int
          $hub: String!
          $token: String
          $sender: String!
          $value: BigNumber!
          $targetChainId: Int!
          $targetHub: String
          $targetToken: String
        ) {
          result: transferPaymentHubDeposit(
            chainId: $chainId
            hub: $hub
            token: $token
            sender: $sender
            value: $value
            targetChainId: $targetChainId
            targetHub: $targetHub
            targetToken: $targetToken
          ) {
            hub {
              address
              token
              liquidity
            }
            owner
            totalAmount
            createdAt
            updatedAt
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubDeposit,
            },
            variables: {
                hub,
                token,
                sender,
                value,
                targetChainId,
                targetHub,
                targetToken,
            },
        });
        return result;
    }
    async activatePaymentHubBridge(token, acceptedChainId, acceptedToken = null) {
        const { apiService, accountService: { accountAddress: hub }, } = this.services;
        const { result } = await apiService.mutate(core_1.gql `
        mutation($chainId: Int, $hub: String!, $token: String, $acceptedChainId: Int!, $acceptedToken: String) {
          result: activatePaymentHubBridge(
            chainId: $chainId
            hub: $hub
            token: $token
            acceptedChainId: $acceptedChainId
            acceptedToken: $acceptedToken
          ) {
            hub {
              address
              token
              liquidity
            }
            acceptedChainId
            acceptedToken
            state
            createdAt
            updatedAt
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubBridge,
            },
            variables: {
                hub,
                token,
                acceptedChainId,
                acceptedToken,
            },
        });
        return result;
    }
    async deactivatePaymentHubBridge(token, acceptedChainId, acceptedToken = null) {
        const { apiService, accountService: { accountAddress: hub }, } = this.services;
        const { result } = await apiService.mutate(core_1.gql `
        mutation($chainId: Int, $hub: String!, $token: String, $acceptedChainId: Int!, $acceptedToken: String) {
          result: deactivatePaymentHubBridge(
            chainId: $chainId
            hub: $hub
            token: $token
            acceptedChainId: $acceptedChainId
            acceptedToken: $acceptedToken
          ) {
            hub {
              address
              token
              liquidity
            }
            acceptedChainId
            acceptedToken
            state
            createdAt
            updatedAt
          }
        }
      `, {
            models: {
                result: classes_1.PaymentHubBridge,
            },
            variables: {
                hub,
                token,
                acceptedChainId,
                acceptedToken,
            },
        });
        return result;
    }
}
exports.PaymentHubService = PaymentHubService;
