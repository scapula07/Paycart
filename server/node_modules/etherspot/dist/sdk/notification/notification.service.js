"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationService = void 0;
const rxjs_1 = require("rxjs");
const core_1 = require("@apollo/client/core");
const operators_1 = require("rxjs/operators");
const common_1 = require("../common");
const classes_1 = require("./classes");
class NotificationService extends common_1.Service {
    constructor() {
        super(...arguments);
        this.notification$ = new rxjs_1.Subject();
        this.subscribed = false;
        this.walletSubscription = null;
        this.accountSubscription = null;
        this.subscribedAccountAddress = null;
    }
    subscribeNotifications() {
        if (!this.subscribed) {
            this.subscribed = true;
            const { walletService, accountService, networkService } = this.services;
            this.addSubscriptions(rxjs_1.combineLatest([
                walletService.walletAddress$,
                networkService.chainId$,
            ])
                .pipe(operators_1.tap(([address, chainId]) => {
                if (address && chainId) {
                    if (this.walletSubscription) {
                        this.walletSubscription.unsubscribe();
                    }
                    this.walletSubscription = this.createGraphQLSubscription(address);
                }
            }))
                .subscribe(), rxjs_1.combineLatest([
                accountService.accountAddress$,
                networkService.chainId$,
            ])
                .pipe(operators_1.map(([address, chainId]) => (!chainId || address === walletService.walletAddress ? null : address)), operators_1.tap((address) => {
                if (address) {
                    if (this.accountSubscription && this.subscribedAccountAddress !== address) {
                        this.accountSubscription.unsubscribe();
                        this.accountSubscription = null;
                    }
                    if (!this.accountSubscription) {
                        this.subscribedAccountAddress = address;
                        this.accountSubscription = this.createGraphQLSubscription(address);
                    }
                }
                else if (this.accountSubscription) {
                    this.accountSubscription.unsubscribe();
                    this.accountSubscription = null;
                }
            }))
                .subscribe());
        }
        return this.notification$;
    }
    onDestroy() {
        if (this.walletSubscription) {
            this.walletSubscription.unsubscribe();
        }
        if (this.accountSubscription) {
            this.accountSubscription.unsubscribe();
        }
    }
    createGraphQLSubscription(address) {
        const { apiService } = this.services;
        const observable = apiService.subscribe(core_1.gql `
        subscription($chainId: Int, $address: String!) {
          notification: newNotification(chainId: $chainId, address: $address) {
            type
            recipient
            payload
          }
        }
      `, {
            variables: {
                address,
            },
            models: {
                notification: classes_1.AnyNotification,
            },
        });
        return observable
            .map(({ notification }) => notification)
            .subscribe((notification) => {
            this.notification$.next(notification);
        });
    }
}
exports.NotificationService = NotificationService;
