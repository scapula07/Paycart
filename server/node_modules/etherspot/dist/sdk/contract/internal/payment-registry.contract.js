"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentRegistryContract = void 0;
const contracts_1 = require("@etherspot/contracts");
const ethers_1 = require("ethers");
const internal_contract_1 = require("./internal.contract");
class PaymentRegistryContract extends internal_contract_1.InternalContract {
    constructor() {
        super(contracts_1.ContractNames.PaymentRegistry);
    }
    computePaymentDepositAccountAddress(saltOwner) {
        let result = null;
        if (saltOwner) {
            result = this.computeCreate2Address(contracts_1.ContractNames.PaymentDepositAccount, ethers_1.utils.solidityKeccak256(['address'], [saltOwner]));
        }
        return result;
    }
    hashDepositWithdrawal(owner, token, amount) {
        return this.hashMessagePayload('DepositWithdrawal', [
            { name: 'owner', type: 'address' },
            { name: 'token', type: 'address' },
            { name: 'amount', type: 'uint256' },
        ], {
            owner,
            token,
            amount,
        });
    }
    hashPaymentChannelCommit(sender, recipient, token, uid, blockNumber, amount) {
        return this.hashMessagePayload('PaymentChannelCommit', [
            { name: 'sender', type: 'address' },
            { name: 'recipient', type: 'address' },
            { name: 'token', type: 'address' },
            { name: 'uid', type: 'bytes32' },
            { name: 'blockNumber', type: 'uint256' },
            { name: 'amount', type: 'uint256' },
        ], {
            sender,
            recipient,
            token,
            uid,
            blockNumber,
            amount,
        });
    }
}
exports.PaymentRegistryContract = PaymentRegistryContract;
