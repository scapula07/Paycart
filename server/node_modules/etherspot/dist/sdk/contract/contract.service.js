"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractService = void 0;
const core_1 = require("@apollo/client/core");
const common_1 = require("../common");
const external_1 = require("./external");
class ContractService extends common_1.Service {
    constructor() {
        super(...arguments);
        this.registeredContracts = new Map();
    }
    registerContract(name, abi, addresses) {
        if (addresses) {
            this.services.networkService.setExternalContractAddresses(name, addresses);
        }
        if (!this.registeredContracts.has(name)) {
            const contract = new external_1.ExternalContract(name, abi);
            this.registeredContracts.set(name, contract);
            this.context.attach(contract);
        }
        return this.registeredContracts.get(name);
    }
    async callContract(to, data) {
        const { apiService } = this.services;
        const { result } = await apiService.mutate(core_1.gql `
        mutation($chainId: Int, $to: String!, $data: String!) {
          result: callContract(chainId: $chainId, to: $to, data: $data)
        }
      `, {
            variables: {
                data,
                to: common_1.prepareAddress(to),
            },
        });
        return result;
    }
    processContractsLogs(logs) {
        const result = [];
        if (logs && logs.length) {
            const contractsMap = this.buildContractsMap();
            for (const log of logs) {
                const { address } = log;
                if (address && contractsMap.has(address)) {
                    const event = contractsMap.get(address).parseLog(log);
                    if (event) {
                        result.push(event);
                    }
                }
            }
        }
        return result;
    }
    buildContractsMap() {
        const result = new Map();
        const contracts = [...this.registeredContracts.values(), ...Object.values(this.internalContracts)];
        for (const contract of contracts) {
            const { address } = contract;
            if (address) {
                result.set(address, contract);
            }
        }
        return result;
    }
}
exports.ContractService = ContractService;
