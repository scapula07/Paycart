"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GatewaySubmittedBatch = void 0;
const class_transformer_1 = require("class-transformer");
const ethers_1 = require("ethers");
const common_1 = require("../../common");
const gateway_transaction_1 = require("./gateway-transaction");
const gateway_submitted_batch_log_1 = require("./gateway-submitted-batch-log");
let GatewaySubmittedBatch = (() => {
    class GatewaySubmittedBatch {
    }
    __decorate([
        class_transformer_1.Type(() => gateway_transaction_1.GatewayTransaction),
        __metadata("design:type", Object)
    ], GatewaySubmittedBatch.prototype, "transaction", void 0);
    __decorate([
        class_transformer_1.Type(() => gateway_submitted_batch_log_1.GatewaySubmittedBatchLog),
        __metadata("design:type", Array)
    ], GatewaySubmittedBatch.prototype, "logs", void 0);
    __decorate([
        common_1.TransformBigNumber(),
        __metadata("design:type", ethers_1.BigNumber)
    ], GatewaySubmittedBatch.prototype, "estimatedGasPrice", void 0);
    __decorate([
        common_1.TransformBigNumber(),
        __metadata("design:type", ethers_1.BigNumber)
    ], GatewaySubmittedBatch.prototype, "feeAmount", void 0);
    __decorate([
        class_transformer_1.Type(() => Date),
        __metadata("design:type", Date)
    ], GatewaySubmittedBatch.prototype, "delayedUntil", void 0);
    __decorate([
        class_transformer_1.Type(() => Date),
        __metadata("design:type", Date)
    ], GatewaySubmittedBatch.prototype, "createdAt", void 0);
    __decorate([
        class_transformer_1.Type(() => Date),
        __metadata("design:type", Date)
    ], GatewaySubmittedBatch.prototype, "updatedAt", void 0);
    return GatewaySubmittedBatch;
})();
exports.GatewaySubmittedBatch = GatewaySubmittedBatch;
