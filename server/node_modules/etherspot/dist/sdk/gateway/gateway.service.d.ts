import { Service, TransactionRequest, UniqueSubject } from '../common';
import { GatewayEstimatedKnownOp, GatewayGasInfo, GatewaySubmittedBatch, GatewaySubmittedBatches, GatewaySupportedToken, GatewayTransaction } from './classes';
import { GatewayKnownOps } from './constants';
import { GatewayBatch } from './interfaces';
export declare class GatewayService extends Service {
    readonly gatewayBatch$: UniqueSubject<GatewayBatch>;
    private estimationOptions;
    get gatewayBatch(): GatewayBatch;
    batchGatewayTransactionRequest(transactionRequest: TransactionRequest): GatewayBatch;
    clearGatewayBatch(): void;
    getGatewaySupportedToken(token: string): Promise<GatewaySupportedToken>;
    getGatewaySupportedTokens(): Promise<GatewaySupportedToken[]>;
    getGatewaySubmittedBatch(hash: string): Promise<GatewaySubmittedBatch>;
    getGatewaySubmittedBatches(page?: number): Promise<GatewaySubmittedBatches>;
    getGatewaySubmittedPendingBatches(page?: number): Promise<GatewaySubmittedBatches>;
    getGatewayTransaction(hash: string): Promise<GatewayTransaction>;
    getGatewayGasInfo(): Promise<GatewayGasInfo>;
    estimateGatewayBatch(feeToken: string, statelessBatch?: GatewayBatch): Promise<GatewayBatch>;
    estimateGatewayKnownOp(op: GatewayKnownOps, feeToken?: string): Promise<GatewayEstimatedKnownOp>;
    submitGatewayBatch(statelessBatch?: GatewayBatch): Promise<GatewaySubmittedBatch>;
    cancelGatewayBatch(hash: string): Promise<GatewaySubmittedBatch>;
    forceGatewayBatch(hash: string): Promise<GatewaySubmittedBatch>;
    encodeGatewayBatch(delegate: boolean): Promise<TransactionRequest>;
    private extractToAndData;
    private guardedTransactionRequest;
}
