import { ContractNames } from '@etherspot/contracts';
import { Observable } from 'rxjs';
import { ObjectSubject, Service } from '../common';
import { ContractAddresses } from '../contract';
import { NetworkNames } from './constants';
import { Network, NetworkOptions } from './interfaces';
export declare class NetworkService extends Service {
    private options;
    readonly network$: ObjectSubject<Network, "chainId" | "name">;
    readonly chainId$: Observable<number>;
    readonly defaultNetwork: Network;
    readonly supportedNetworks: Network[];
    readonly externalContractAddresses: Map<string, {
        [key: number]: string;
    }>;
    constructor(options: NetworkOptions, defaultNetworkName?: NetworkNames);
    get network(): Network;
    get chainId(): number;
    useDefaultNetwork(): void;
    switchNetwork(networkName: NetworkNames): void;
    isNetworkNameSupported(networkName: string): boolean;
    setExternalContractAddresses(contractName: string, addresses: ContractAddresses): void;
    getExternalContractAddress(contractName: string): string;
    getInternalContractAddress(contractName: ContractNames): string;
}
