"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetsService = void 0;
const core_1 = require("@apollo/client/core");
const common_1 = require("../common");
const classes_1 = require("./classes");
const native_currencies_1 = require("./classes/native-currencies");
class AssetsService extends common_1.Service {
    async getTokenLists() {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int) {
          result: tokenLists(chainId: $chainId) {
            items {
              name
              endpoint
              isDefault
              createdAt
              updatedAt
            }
          }
        }
      `, {
            models: {
                result: classes_1.TokenLists,
            },
        });
        return result.items;
    }
    async getTokenListTokens(name = null) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $name: String) {
          result: tokenList(chainId: $chainId, name: $name) {
            tokens {
              address
              name
              symbol
              decimals
              logoURI
              chainId
            }
          }
        }
      `, {
            variables: {
                name,
            },
            models: {
                result: classes_1.TokenList,
            },
            fetchPolicy: 'cache-first',
        });
        return result ? result.tokens : null;
    }
    async getNativeCurrencies() {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query {
          result: nativeCurrencies {
            items {
              name
              symbol
              decimals
              logoURI
              chainId
            }
          }
        }
      `, {
            models: {
                result: native_currencies_1.NativeCurrencies,
            },
        });
        return result.items;
    }
    async getAccountTokenListTokens(name = null) {
        const { apiService, accountService } = this.services;
        const account = accountService.accountAddress;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $account: String!, $name: String) {
          result: accountTokenList(chainId: $chainId, account: $account, name: $name) {
            tokens {
              address
              name
              symbol
              decimals
              logoURI
              chainId
            }
          }
        }
      `, {
            variables: {
                account,
                name,
            },
            models: {
                result: classes_1.TokenList,
            },
        });
        return result ? result.tokens : null;
    }
    async isTokenOnTokenList(token, name = null) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $token: String!, $name: String) {
          result: isTokenOnTokenList(chainId: $chainId, token: $token, name: $name)
        }
      `, {
            variables: {
                token,
                name,
            },
        });
        return result;
    }
    async getTokenDetails(tokenAddress, ChainId, provider) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
      query($ChainId: Int, $tokenAddress: String!, $provider: String) {
        result: tokenDetails(chainId: $ChainId, tokenAddress: $tokenAddress, provider: $provider) {
          tokenAddress
          usdPrice
          liquidityUSD
          tradingVolume
        }
      }
    `, {
            variables: {
                ChainId,
                tokenAddress,
                provider
            },
            models: {
                result: classes_1.TokenDetails,
            },
        });
        return result;
    }
    async getHistoricalTokenPrice(tokenAddress, ChainId, provider, timePeriod) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
      query($ChainId: Int, $tokenAddress: String!, $provider: String, $timePeriod: String) {
        result: historicalTokenPrice(chainId: $ChainId, tokenAddress: $tokenAddress, provider: $provider, timePeriod: $timePeriod) {
          items {
            tokenAddress
            usdPrice
            timestamp
          }
        }
      }
    `, {
            variables: {
                ChainId,
                tokenAddress,
                provider,
                timePeriod,
            },
            models: {
                result: classes_1.HistoricalTokenPrices,
            },
        });
        return result;
    }
    async getPoolsActivity(tokenAddress, ChainId, provider, page, type) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
    query($ChainId: Int, $tokenAddress: String!, $provider: String, $page: Int, $type: String) {
      result: poolsActivity(chainId: $ChainId, tokenAddress: $tokenAddress, provider: $provider, page: $page, type: $type) {
        items {
          amm
          transactionAddress
          timestamp
          amountUSD
          transactionType
          tokensIn {
            symbol
            amm
            network
            priceUSD
            priceETH
            amount
          }
          tokensOut {
            symbol
            amm
            network
            priceUSD
            priceETH
            amount
          }
        }
      }
    }
  `, {
            variables: {
                ChainId,
                tokenAddress,
                provider,
                page,
                type,
            },
            models: {
                result: classes_1.PoolsActivities,
            },
        });
        return result;
    }
    async getNumberOfTransactions(tokenAddress, ChainId, provider) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
    query($ChainId: Int, $tokenAddress: String!, $provider: String) {
      result: numberOfTransactions(chainId: $ChainId, tokenAddress: $tokenAddress, provider: $provider) {
        totalTransactions
      }
    }
  `, {
            variables: {
                ChainId,
                tokenAddress,
                provider,
            },
            models: {
                result: classes_1.NumberOfTransactions,
            },
        });
        return result;
    }
    async getTradingHistory(tokenAddress, ChainId, provider, page) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
      query($ChainId: Int, $tokenAddress: String!, $provider: String, $page: Int) {
        result: tradingHistory(chainId: $ChainId, tokenAddress: $tokenAddress, provider: $provider, page: $page) {
          items {
            amm
            transactionAddress
            direction
            timestamp
            amountUSD
            walletAddress
            tokensIn {
              symbol
              amm
              network
              priceUSD
              priceETH
              amount
            }
            tokensOut {
              symbol
              amm
              network
              priceUSD
              priceETH
              amount
            }
          }
      }
    }
    `, {
            variables: {
                ChainId,
                tokenAddress,
                provider,
                page,
            },
            models: {
                result: classes_1.TradingHistories,
            },
        });
        return result;
    }
    async getMarketDetails(tokenAddress, ChainId, provider) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
      query($ChainId: Int, $tokenAddress: String!, $provider: String) {
        result: marketDetails(chainId: $ChainId, tokenAddress: $tokenAddress, provider: $provider) {
          id
          symbol
          name
          image
          marketCap
          allTimeHigh
          allTimeLow
          fullyDilutedValuation
          priceChangePercentage1h
          priceChangePercentage24h
          priceChangePercentage7d
          priceChangePercentage1m
          priceChangePercentage1y
        }
      }
    `, {
            variables: {
                ChainId,
                tokenAddress,
                provider,
            },
            models: {
                result: classes_1.MarketDetails,
            },
        });
        return result;
    }
}
exports.AssetsService = AssetsService;
