"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectService = void 0;
const core_1 = require("@apollo/client/core");
const common_1 = require("../common");
const classes_1 = require("./classes");
class ProjectService extends common_1.Service {
    constructor(currentProject = null) {
        super();
        this.currentProject$ = new common_1.ObjectSubject(null);
        this.switchCurrentProject(currentProject);
    }
    get headers() {
        let result = {};
        if (this.currentProject) {
            const { key, metadata } = this.currentProject;
            result = {
                [common_1.HeaderNames.ProjectKey]: key,
            };
            if (metadata) {
                result = Object.assign(Object.assign({}, result), { [common_1.HeaderNames.ProjectMetadata]: metadata });
            }
        }
        return result;
    }
    get currentProject() {
        return this.currentProject$.value;
    }
    async isProjectValid() {
        const project = await this.getProject(this.currentProject.key);
        if (!project) {
            return false;
        }
        return true;
    }
    switchCurrentProject(currentProject) {
        if (currentProject && !currentProject.key) {
            currentProject = null;
        }
        this.currentProject$.next(currentProject);
        return this.currentProject;
    }
    async withCustomProjectMetadata(customMetadata, inner) {
        let result;
        if (this.currentProject && customMetadata) {
            const { key, metadata } = this.currentProject;
            this.currentProject$.next({
                key,
                metadata: customMetadata,
            });
            result = await inner();
            this.currentProject$.next({
                key,
                metadata,
            });
        }
        else {
            result = await inner();
        }
        return result;
    }
    async getProject(key) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $key: String!) {
          result: project(chainId: $chainId, key: $key) {
            key
            address
            state
            createdAt
            updatedAt
          }
        }
      `, {
            variables: {
                key,
            },
            models: {
                result: classes_1.Project,
            },
        });
        return result;
    }
    async getProjects(page) {
        const { apiService, accountService } = this.services;
        const owner = accountService.accountAddress;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $owner: String!, $page: Int) {
          result: projects(chainId: $chainId, owner: $owner, page: $page) {
            items {
              address
              createdAt
              key
              owner
              state
              updatedAt
            }
            currentPage
            nextPage
          }
        }
      `, {
            variables: {
                owner,
                page: page || 1,
            },
            models: {
                result: classes_1.Projects,
            },
        });
        return result;
    }
    async updateProject(key, privateKey, endpoint) {
        const { apiService, accountService } = this.services;
        const owner = accountService.accountAddress;
        const { result } = await apiService.mutate(core_1.gql `
        mutation($chainId: Int, $key: String!, $owner: String!, $endpoint: String!, $privateKey: String!) {
          result: updateProject(
            chainId: $chainId
            key: $key
            owner: $owner
            endpoint: $endpoint
            privateKey: $privateKey
          ) {
            address
            createdAt
            key
            owner
            state
            updatedAt
          }
        }
      `, {
            variables: {
                key,
                owner,
                endpoint,
                privateKey,
            },
            models: {
                result: classes_1.Project,
            },
        });
        return result;
    }
    async callCurrentProject(payload) {
        const { apiService, accountService } = this.services;
        const sender = accountService.accountAddress;
        const { result } = await apiService.mutate(core_1.gql `
        mutation($chainId: Int, $sender: String!, $payload: JSONObject) {
          result: callProject(chainId: $chainId, sender: $sender, payload: $payload) {
            data
          }
        }
      `, {
            variables: {
                sender,
                payload,
            },
        });
        return result.data;
    }
}
exports.ProjectService = ProjectService;
