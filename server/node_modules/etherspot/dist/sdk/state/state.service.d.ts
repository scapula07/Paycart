import { BehaviorSubject, Observable } from 'rxjs';
import { Service } from '../common';
import { Account, AccountMember } from '../account';
import { GatewayBatch } from '../gateway';
import { Network } from '../network';
import { Wallet } from '../wallet';
import { State } from './classes';
import { StateOptions, StateStorageState } from './interfaces';
export declare class StateService extends Service implements State {
    private options;
    readonly state$: BehaviorSubject<State>;
    constructor(options?: StateOptions);
    get state(): State;
    get wallet$(): BehaviorSubject<Wallet>;
    get wallet(): Wallet;
    get walletAddress$(): Observable<string>;
    get walletAddress(): string;
    get account$(): BehaviorSubject<Account>;
    get account(): Account;
    get accountAddress$(): Observable<string>;
    get accountAddress(): string;
    get accountMember$(): BehaviorSubject<AccountMember>;
    get accountMember(): AccountMember;
    get p2pPaymentDepositAddress$(): BehaviorSubject<string>;
    get p2pPaymentDepositAddress(): string;
    get gatewayBatch$(): BehaviorSubject<GatewayBatch>;
    get gatewayBatch(): GatewayBatch;
    get network(): Network;
    get network$(): BehaviorSubject<Network>;
    restore(state: StateStorageState): this;
    dump(): StateStorageState;
    protected onInit(): void;
}
