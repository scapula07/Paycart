import { Observable } from 'rxjs';
import { Service, SynchronizedSubject } from '../common';
import { Account, AccountBalances, AccountDashboard, AccountInvestments, AccountMember, AccountMembers, Accounts, AccountSettings, AccountTotalBalances, NetCurveBalances } from './classes';
import { Currencies } from './constants';
import { IsEligibleForAirdropDto, UpdateAccountSettingsDto } from '../dto';
export declare class AccountService extends Service {
    readonly account$: SynchronizedSubject<Account, "address" | "type" | "store" | "synchronizedAt" | "createdAt" | "updatedAt" | "state" | "ensNode" | "settings">;
    readonly accountMember$: SynchronizedSubject<AccountMember, "type" | "store" | "synchronizedAt" | "createdAt" | "updatedAt" | "account" | "state" | "member">;
    readonly accountAddress$: Observable<string>;
    constructor();
    get account(): Account;
    get accountAddress(): string;
    get accountMember(): AccountMember;
    get headers(): {
        [key: string]: any;
    };
    computeContractAccount(): void;
    joinContractAccount(address: string): void;
    syncAccount(): Promise<Account>;
    getConnectedAccounts(page: number): Promise<Accounts>;
    getAccount(account: string): Promise<Account>;
    getAccountBalances(account: string, tokens: string[], ChainId: number, provider?: string): Promise<AccountBalances>;
    getAccountInvestments(account: string, ChainId?: number, apps?: string[], provider?: string): Promise<AccountInvestments>;
    getAccount24HourNetCurve(account: string, chainIds?: number[]): Promise<NetCurveBalances>;
    getAccountDashboard(account: string, currency: string, days?: number): Promise<AccountDashboard>;
    getAccountTotalBalances(account: string, currency: Currencies): Promise<AccountTotalBalances>;
    getAccountMembers(account: string, page: number): Promise<AccountMembers>;
    getAccountSettings(): Promise<AccountSettings>;
    getDelayTransactionOptions(): Promise<number[]>;
    updateAccountSettings(dto: UpdateAccountSettingsDto): Promise<AccountSettings>;
    isEligibleForAirdrop(dto: IsEligibleForAirdropDto): Promise<boolean>;
    isContractAccount(): boolean;
    protected onInit(): void;
}
