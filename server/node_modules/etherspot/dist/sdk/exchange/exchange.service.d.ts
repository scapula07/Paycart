import { BigNumber } from 'ethers';
import { Route } from '@lifi/sdk';
import { Service } from '../common';
import { ExchangeOffer, CrossChainBridgeSupportedChain, CrossChainBridgeToken, CrossChainBridgeRoute, CrossChainBridgeBuildTXResponse, BridgingQuotes, ExchangeRouterAddress, StepTransactions, AdvanceRoutesLiFi, LiFiStatus } from './classes';
import { PaginatedTokens } from '../assets';
import { GetCrossChainBridgeTokenListDto, GetCrossChainBridgeRouteDto, GetCrossChainBridgeSupportedChainsDto } from '../dto';
import { CrossChainServiceProvider, LiFiBridge } from './constants';
export declare class ExchangeService extends Service {
    getExchangeSupportedAssets(page: number, limit: number, ChainId: number): Promise<PaginatedTokens>;
    getCrossChainQuotes(fromTokenAddress: string, toTokenAddress: string, fromChainId: number, toChainId: number, fromAmount: BigNumber, serviceProvider?: CrossChainServiceProvider, lifiBridges?: LiFiBridge[], toAddress?: string, fromAddress?: string, showZeroUsd?: boolean): Promise<BridgingQuotes>;
    getAdvanceRoutesLiFi(fromTokenAddress: string, toTokenAddress: string, fromChainId: number, toChainId: number, fromAmount: BigNumber, toAddress?: string, allowSwitchChain?: boolean, fromAddress?: string, showZeroUsd?: boolean): Promise<AdvanceRoutesLiFi>;
    getStepTransaction(selectedRoute: Route): Promise<StepTransactions>;
    getLiFiStatus(fromChainId: number, toChainId: number, txnHash: string, bridge?: string): Promise<LiFiStatus>;
    getExchangeOffers(fromTokenAddress: string, toTokenAddress: string, fromAmount: BigNumber, fromChainId: number, toAddress?: string, fromAddress?: string, showZeroUsd?: boolean): Promise<ExchangeOffer[]>;
    getCrossChainBridgeSupportedChains(dto?: GetCrossChainBridgeSupportedChainsDto): Promise<CrossChainBridgeSupportedChain[]>;
    getCrossChainBridgeTokenList(dto: GetCrossChainBridgeTokenListDto): Promise<CrossChainBridgeToken[]>;
    findCrossChainBridgeRoutes(dto: GetCrossChainBridgeRouteDto): Promise<CrossChainBridgeRoute[]>;
    buildCrossChainBridgeTransaction(dto: CrossChainBridgeRoute): Promise<CrossChainBridgeBuildTXResponse>;
    getExchangeRoutersAddress(dto: ExchangeRouterAddress): Promise<string[]>;
    getCrossChainBridgeTransaction<T = any, P = any>(payload: P): Promise<T>;
}
