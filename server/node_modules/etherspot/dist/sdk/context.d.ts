import { AccountService } from './account';
import { ApiService } from './api';
import { AssetsService } from './assets';
import { BlockService } from './block';
import { ENSService } from './ens';
import { ExchangeService } from './exchange';
import { FaucetService } from './faucet';
import { GatewayService } from './gateway';
import { NameResolutionService } from './name-resolution';
import { NetworkService } from './network';
import { NotificationService } from './notification';
import { P2PPaymentService, PaymentHubService } from './payments';
import { ProjectService } from './project';
import { ErrorSubject, Service } from './common';
import { SessionService } from './session';
import { TransactionsService } from './transactions';
import { StateService } from './state';
import { WalletService } from './wallet';
import { RatesService } from './rates/rates.service';
import { ContractService, ENSControllerContract, ENSReverseRegistrarContract, ERC20TokenContract, GatewayContract, GatewayV2Contract, PaymentRegistryContract, PersonalAccountRegistryContract } from './contract';
export declare class Context {
    readonly internalContracts: {
        ensControllerContract: ENSControllerContract;
        ensReverseRegistrarContract: ENSReverseRegistrarContract;
        erc20TokenContract: ERC20TokenContract;
        gatewayContract: GatewayContract;
        paymentRegistryContract: PaymentRegistryContract;
        personalAccountRegistryContract: PersonalAccountRegistryContract;
        gatewayV2Contract: GatewayV2Contract;
    };
    readonly services: {
        accountService: AccountService;
        apiService: ApiService;
        assetsService: AssetsService;
        blockService: BlockService;
        contractService: ContractService;
        ensService: ENSService;
        exchangeService: ExchangeService;
        faucetService: FaucetService;
        gatewayService: GatewayService;
        nameResolutionService: NameResolutionService;
        networkService: NetworkService;
        notificationService: NotificationService;
        p2pPaymentsService: P2PPaymentService;
        paymentHubService: PaymentHubService;
        projectService: ProjectService;
        ratesService: RatesService;
        sessionService: SessionService;
        transactionsService: TransactionsService;
        stateService: StateService;
        walletService: WalletService;
    };
    readonly error$: ErrorSubject;
    private readonly attached;
    constructor(internalContracts: {
        ensControllerContract: ENSControllerContract;
        ensReverseRegistrarContract: ENSReverseRegistrarContract;
        erc20TokenContract: ERC20TokenContract;
        gatewayContract: GatewayContract;
        paymentRegistryContract: PaymentRegistryContract;
        personalAccountRegistryContract: PersonalAccountRegistryContract;
        gatewayV2Contract: GatewayV2Contract;
    }, services: {
        accountService: AccountService;
        apiService: ApiService;
        assetsService: AssetsService;
        blockService: BlockService;
        contractService: ContractService;
        ensService: ENSService;
        exchangeService: ExchangeService;
        faucetService: FaucetService;
        gatewayService: GatewayService;
        nameResolutionService: NameResolutionService;
        networkService: NetworkService;
        notificationService: NotificationService;
        p2pPaymentsService: P2PPaymentService;
        paymentHubService: PaymentHubService;
        projectService: ProjectService;
        ratesService: RatesService;
        sessionService: SessionService;
        transactionsService: TransactionsService;
        stateService: StateService;
        walletService: WalletService;
    });
    attach<T extends Service>(service: T): void;
    destroy(): void;
}
