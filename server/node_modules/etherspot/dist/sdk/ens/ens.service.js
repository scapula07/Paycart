"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ENSService = void 0;
const core_1 = require("@apollo/client/core");
const common_1 = require("../common");
const classes_1 = require("./classes");
const constants_1 = require("./constants");
class ENSService extends common_1.Service {
    get ensAddrReversOwner() {
        return this.getENSNodeOwner(constants_1.ENS_ADDR_REVERSE_TLD);
    }
    async getENSNodeOwner(name) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $name: String!) {
          result: ensNodeOwner(chainId: $chainId, name: $name)
        }
      `, {
            variables: {
                name,
            },
        });
        return result;
    }
    async reserveENSNode(name) {
        const { apiService, accountService } = this.services;
        const address = accountService.accountAddress;
        const { result } = await apiService.mutate(core_1.gql `
        mutation($chainId: Int, $address: String!, $name: String!) {
          result: reserveENSNode(chainId: $chainId, address: $address, name: $name) {
            hash
            name
            address
            label
            state
            zone
            guardianSignature
            createdAt
            updatedAt
          }
        }
      `, {
            variables: {
                name,
                address,
            },
            models: {
                result: classes_1.ENSNode,
            },
        });
        return result;
    }
    async validateENSNode(name) {
        const { apiService, accountService } = this.services;
        const address = accountService.accountAddress;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $address: String!, $name: String!) {
          result: validateENSNode(chainId: $chainId, address: $address, name: $name)
        }
      `, {
            variables: {
                name,
                address,
            },
        });
        return result;
    }
    async getENSNode(nameOrHashOrAddress) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $nameOrHashOrAddress: String!) {
          result: ensNode(chainId: $chainId, nameOrHashOrAddress: $nameOrHashOrAddress) {
            hash
            name
            address
            label
            state
            zone
            guardianSignature
            createdAt
            updatedAt
          }
        }
      `, {
            variables: {
                nameOrHashOrAddress,
            },
            models: {
                result: classes_1.ENSNode,
            },
        });
        return result;
    }
    async getENSRootNode(name) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $nameOrHashOrAddress: String!) {
          result: ensRootNode(chainId: $chainId, name: $nameOrHashOrAddress) {
            hash
            name
            state
            createdAt
            updatedAt
          }
        }
      `, {
            variables: {
                name,
            },
            models: {
                result: classes_1.ENSRootNode,
            },
        });
        return result;
    }
    async ensAddressesLookup(names) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $names: [String!]) {
          result: ensAddressesLookup(chainId: $chainId, names: $names) {
            items
          }
        }
      `, {
            variables: {
                names,
            },
        });
        return result.items;
    }
    async ensNamesLookup(addresses) {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int, $addresses: [String!]) {
          result: ensNamesLookup(chainId: $chainId, addresses: $addresses) {
            items
          }
        }
      `, {
            variables: {
                addresses,
            },
        });
        return result.items;
    }
    async getENSTopLevelDomains() {
        const { apiService } = this.services;
        const { result } = await apiService.query(core_1.gql `
        query($chainId: Int) {
          result: ensRootNodes(chainId: $chainId) {
            items {
              name
            }
          }
        }
      `, {
            models: {
                result: classes_1.ENSRootNodes,
            },
        });
        return result.items.map(({ name }) => name);
    }
}
exports.ENSService = ENSService;
