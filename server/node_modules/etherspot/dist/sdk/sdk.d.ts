import { BehaviorSubject, Subject } from 'rxjs';
import { Account, AccountBalances, AccountInvestments, AccountMembers, Accounts, AccountSettings, AccountTotalBalances, NetCurveBalances } from './account';
import { ApiService } from './api';
import { HistoricalTokenPrices, MarketDetails, NativeCurrenciesItem, NumberOfTransactions, PaginatedTokens, PoolsActivities, TokenDetails, TokenList, TokenListToken, TradingHistories } from './assets';
import { ErrorSubject, TransactionRequest } from './common';
import { Context } from './context';
import { Contract, ContractAddresses } from './contract';
import { AddAccountOwnerDto, BatchGatewayTransactionRequestDto, CallCurrentProjectDto, CancelGatewayBatchDto, CancelGatewayBatchDto as ForceGatewayBatchDto, ClaimENSNodeDto, CommitP2PPaymentChannelDto, ComputeContractAccountDto, ComputeContractAccountByAddressDto, CreatePaymentHubPaymentDto, CreateSessionDto, CustomProjectMetadataDto, EncodeGatewayBatchDto, EstimateGatewayBatchDto, EstimateGatewayKnownOpDto, ExecuteAccountTransactionDto, GetAccountBalancesDto, GetAccountDto, GetAccountMembersDto, GetCrossChainBridgeRouteDto, GetENSNodeDto, GetENSRootNodeDto, GetExchangeCrossChainQuoteDto, GetExchangeOffersDto, GetGatewaySubmittedBatchDto, GetGatewaySubmittedBatchDto as GetGatewayTransactionDto, GetGatewaySupportedTokenDto, GetP2PPaymentChannelDto, GetP2PPaymentChannelsDto, GetP2PPaymentDepositsDto, GetPaymentHubBridgeDto, GetPaymentHubBridgesDto, GetPaymentHubDepositDto, GetPaymentHubDepositsDto, GetPaymentHubDto, GetPaymentHubPaymentDto, GetPaymentHubPaymentsDto, GetPaymentHubsDto, GetProjectDto, GetTokenListDto, IncreaseP2PPaymentChannelAmountDto, IsTokenOnTokenListDto, JoinContractAccountDto, PaginationDto, RemoveAccountOwnerDto, ReserveENSNameDto, SetENSRecordNameDto, SetENSRecordTextDto, SignMessageDto, SignP2PPaymentChannelDto, SwitchCurrentProjectDto, TransferPaymentHubDepositDto, UpdateAccountSettingsDto, UpdateP2PPaymentChannelDto, UpdatePaymentHubBridgeDto, UpdatePaymentHubDepositDto, UpdatePaymentHubDto, UpdateProjectDto, WithdrawP2PPaymentDepositDto, P2PPaymentDepositWithdrawalDto, ENSAddressesLookupDto, ENSNamesLookupDto, GetTransactionDto, GetTransactionsDto, GetAccountTotalBalancesDto, ReserveENSNameDto as ValidateENSNameDto, GetNftListDto, IsEligibleForAirdropDto, GetCrossChainBridgeTokenListDto, GetP2PPaymentChannelsAdminDto, CreateStreamTransactionPayloadDto, GetCrossChainBridgeSupportedChainsDto, DeleteStreamTransactionPayloadDto, GetStreamListDto, GetExchangeSupportedAssetsDto, FetchExchangeRatesDto, GetAdvanceRoutesLiFiDto, GetStepTransactionsLiFiDto, NameResolutionNodeDto, GetLiFiStatusDto, GetAccountInvestmentsDto, GetTokenDetailsDto, GetHistoricalTokenPriceDto, GetPoolsActivityDto, GetTradingHistoryDto, GetAccount24HourNetCurveDto } from './dto';
import { ENSNode, ENSRootNode } from './ens';
import { EnvNames } from './env';
import { CrossChainBridgeSupportedChain, CrossChainBridgeToken, CrossChainBridgeRoute, ExchangeOffer, CrossChainBridgeBuildTXResponse, BridgingQuotes, AdvanceRoutesLiFi, StepTransactions, LiFiStatus } from './exchange';
import { GatewayBatch, GatewayEstimatedKnownOp, GatewayGasInfo, GatewaySubmittedBatch, GatewaySubmittedBatches, GatewaySubmittedPendingBatches, GatewaySupportedToken, GatewayTransaction } from './gateway';
import { SdkOptions } from './interfaces';
import { NameResolutionsNodes } from './name-resolution';
import { Network } from './network';
import { Notification } from './notification';
import { P2PPaymentChannel, P2PPaymentChannels, P2PPaymentDeposits, PaymentHub, PaymentHubBridge, PaymentHubBridges, PaymentHubDeposit, PaymentHubDeposits, PaymentHubPayment, PaymentHubPayments, PaymentHubs } from './payments';
import { CurrentProject, Project, Projects } from './project';
import { RateData } from './rates';
import { Session } from './session';
import { Transactions, Transaction, NftList, StreamTransactionPayload, StreamList, KnownContract } from './transactions';
import { State, StateService } from './state';
import { WalletProviderLike } from './wallet';
export declare class Sdk {
    readonly internalContracts: Context['internalContracts'];
    readonly services: Context['services'];
    protected context: Context;
    constructor(walletProvider: WalletProviderLike, optionsLike?: EnvNames | SdkOptions);
    get api(): ApiService;
    get notifications$(): Subject<Notification>;
    get state(): StateService;
    get state$(): BehaviorSubject<State>;
    get error$(): ErrorSubject;
    get supportedNetworks(): Network[];
    destroy(): void;
    signMessage(dto: SignMessageDto): Promise<string>;
    createSession(dto?: CreateSessionDto): Promise<Session>;
    getGatewaySupportedToken(dto: GetGatewaySupportedTokenDto): Promise<GatewaySupportedToken>;
    getGatewaySupportedTokens(): Promise<GatewaySupportedToken[]>;
    getGatewaySubmittedBatch(dto: GetGatewaySubmittedBatchDto): Promise<GatewaySubmittedBatch>;
    getGatewaySubmittedBatches(dto?: PaginationDto): Promise<GatewaySubmittedBatches>;
    getGatewaySubmittedPendingBatches(dto?: PaginationDto): Promise<GatewaySubmittedPendingBatches>;
    getGatewayTransaction(dto: GetGatewayTransactionDto): Promise<GatewayTransaction>;
    getGatewayGasInfo(): Promise<GatewayGasInfo>;
    batchGatewayTransactionRequest(dto: BatchGatewayTransactionRequestDto): Promise<GatewayBatch>;
    estimateGatewayKnownOp(dto: EstimateGatewayKnownOpDto): Promise<GatewayEstimatedKnownOp>;
    estimateGatewayBatch(dto?: EstimateGatewayBatchDto): Promise<GatewayBatch>;
    estimateStatelessAccountTransactions(transactionsDto: ExecuteAccountTransactionDto[], estimationDto?: EstimateGatewayBatchDto): Promise<GatewayBatch>;
    submitGatewayBatch(dto?: CustomProjectMetadataDto): Promise<GatewaySubmittedBatch>;
    cancelGatewayBatch(dto: CancelGatewayBatchDto): Promise<GatewaySubmittedBatch>;
    forceGatewayBatch(dto: ForceGatewayBatchDto): Promise<GatewaySubmittedBatch>;
    encodeGatewayBatch(dto?: EncodeGatewayBatchDto): Promise<TransactionRequest>;
    clearGatewayBatch(): void;
    switchCurrentProject(dto?: SwitchCurrentProjectDto): Promise<CurrentProject>;
    callCurrentProject<T extends {} = any>(dto?: CallCurrentProjectDto): Promise<T>;
    getProject(dto: GetProjectDto): Promise<Project>;
    getProjects(dto: PaginationDto): Promise<Projects>;
    updateProject(dto: UpdateProjectDto): Promise<Project>;
    syncAccount(): Promise<Account>;
    computeContractAccount(dto?: ComputeContractAccountDto): Promise<Account>;
    computeContractAccountByAddress(dto: ComputeContractAccountByAddressDto): Promise<string>;
    joinContractAccount(dto: JoinContractAccountDto): Promise<Account>;
    getConnectedAccounts(dto?: PaginationDto): Promise<Accounts>;
    getAccount(dto?: GetAccountDto): Promise<Account>;
    getAccountBalances(dto?: GetAccountBalancesDto): Promise<AccountBalances>;
    getAccountInvestments(dto?: GetAccountInvestmentsDto): Promise<AccountInvestments>;
    getAccount24HourNetCurve(dto?: GetAccount24HourNetCurveDto): Promise<NetCurveBalances>;
    getAccountTotalBalances(dto: GetAccountTotalBalancesDto): Promise<AccountTotalBalances>;
    getAccountMembers(dto?: GetAccountMembersDto): Promise<AccountMembers>;
    getDelayTransactionOptions(): Promise<number[]>;
    getAccountSettings(): Promise<AccountSettings>;
    updateAccountSettings(dto: UpdateAccountSettingsDto): Promise<AccountSettings>;
    isEligibleForAirdrop(dto: IsEligibleForAirdropDto): Promise<boolean>;
    encodeDeployAccount(): Promise<TransactionRequest>;
    encodeAddAccountOwner(dto: AddAccountOwnerDto): Promise<TransactionRequest>;
    encodeRemoveAccountOwner(dto: RemoveAccountOwnerDto): Promise<TransactionRequest>;
    encodeExecuteAccountTransaction(dto: ExecuteAccountTransactionDto): Promise<TransactionRequest>;
    batchDeployAccount(): Promise<GatewayBatch>;
    batchAddAccountOwner(dto: AddAccountOwnerDto): Promise<GatewayBatch>;
    batchRemoveAccountOwner(dto: RemoveAccountOwnerDto): Promise<GatewayBatch>;
    batchExecuteAccountTransaction(dto: ExecuteAccountTransactionDto): Promise<GatewayBatch>;
    reserveENSName(dto: ReserveENSNameDto): Promise<ENSNode>;
    validateENSName(dto: ValidateENSNameDto): Promise<boolean>;
    getENSNode(dto?: GetENSNodeDto): Promise<ENSNode>;
    getENSRootNode(dto: GetENSRootNodeDto): Promise<ENSRootNode>;
    getENSTopLevelDomains(): Promise<string[]>;
    ensAddressesLookup(dto: ENSAddressesLookupDto): Promise<string[]>;
    ensNamesLookup(dto: ENSNamesLookupDto): Promise<string[]>;
    encodeClaimENSNode(dto?: ClaimENSNodeDto): Promise<TransactionRequest>;
    encodeSetENSRecordName(dto?: SetENSRecordNameDto): Promise<TransactionRequest>;
    encodeSetENSRecordText(dto: SetENSRecordTextDto): Promise<TransactionRequest>;
    encodeClaimENSReverseName(): Promise<TransactionRequest>;
    batchClaimENSNode(dto?: ClaimENSNodeDto): Promise<GatewayBatch>;
    batchSetENSRecordName(dto?: SetENSRecordNameDto): Promise<GatewayBatch>;
    batchSetENSRecordText(dto: SetENSRecordTextDto): Promise<GatewayBatch>;
    batchClaimENSReverseName(): Promise<GatewayBatch>;
    getExchangeSupportedAssets(dto?: GetExchangeSupportedAssetsDto): Promise<PaginatedTokens>;
    getExchangeOffers(dto: GetExchangeOffersDto): Promise<ExchangeOffer[]>;
    getCrossChainBridgeSupportedChains(dto?: GetCrossChainBridgeSupportedChainsDto): Promise<CrossChainBridgeSupportedChain[]>;
    getCrossChainBridgeTokenList(dto: GetCrossChainBridgeTokenListDto): Promise<CrossChainBridgeToken[]>;
    findCrossChainBridgeRoutes(dto: GetCrossChainBridgeRouteDto): Promise<CrossChainBridgeRoute[]>;
    buildCrossChainBridgeTransaction(dto: CrossChainBridgeRoute): Promise<CrossChainBridgeBuildTXResponse>;
    getCrossChainQuotes(dto: GetExchangeCrossChainQuoteDto): Promise<BridgingQuotes>;
    getAdvanceRoutesLiFi(dto: GetAdvanceRoutesLiFiDto): Promise<AdvanceRoutesLiFi>;
    getStepTransaction(dto: GetStepTransactionsLiFiDto): Promise<StepTransactions>;
    getLiFiStatus(dto: GetLiFiStatusDto): Promise<LiFiStatus>;
    getP2PPaymentDeposits(dto?: GetP2PPaymentDepositsDto): Promise<P2PPaymentDeposits>;
    getP2PPaymentChannel(dto: GetP2PPaymentChannelDto): Promise<P2PPaymentChannel>;
    getP2PPaymentChannels(dto?: GetP2PPaymentChannelsDto): Promise<P2PPaymentChannels>;
    getP2PPaymentChannelsAdmin(dto?: GetP2PPaymentChannelsAdminDto): Promise<P2PPaymentChannels>;
    increaseP2PPaymentChannelAmount(dto: IncreaseP2PPaymentChannelAmountDto): Promise<P2PPaymentChannel>;
    updateP2PPaymentChannel(dto: UpdateP2PPaymentChannelDto): Promise<P2PPaymentChannel>;
    signP2PPaymentChannel(dto: SignP2PPaymentChannelDto): Promise<P2PPaymentChannel>;
    encodeWithdrawP2PPaymentDeposit(dto: WithdrawP2PPaymentDepositDto): Promise<TransactionRequest>;
    encodeP2PPaymentDepositWithdrawal(dto: P2PPaymentDepositWithdrawalDto): Promise<TransactionRequest>;
    encodeCommitP2PPaymentChannel(dto: CommitP2PPaymentChannelDto): Promise<TransactionRequest>;
    batchWithdrawP2PPaymentDeposit(dto: WithdrawP2PPaymentDepositDto): Promise<GatewayBatch>;
    batchP2PPaymentDepositWithdrawal(dto: P2PPaymentDepositWithdrawalDto): Promise<GatewayBatch>;
    batchCommitP2PPaymentChannel(dto: CommitP2PPaymentChannelDto): Promise<GatewayBatch>;
    getPaymentHub(dto: GetPaymentHubDto): Promise<PaymentHub>;
    getPaymentHubs(dto?: GetPaymentHubsDto): Promise<PaymentHubs>;
    getPaymentHubBridge(dto?: GetPaymentHubBridgeDto): Promise<PaymentHubBridge>;
    getPaymentHubBridges(dto: GetPaymentHubBridgesDto): Promise<PaymentHubBridges>;
    getPaymentHubDeposit(dto: GetPaymentHubDepositDto): Promise<PaymentHubDeposit>;
    getPaymentHubDeposits(dto: GetPaymentHubDepositsDto): Promise<PaymentHubDeposits>;
    getPaymentHubPayment(dto: GetPaymentHubPaymentDto): Promise<PaymentHubPayment>;
    getPaymentHubPayments(dto: GetPaymentHubPaymentsDto): Promise<PaymentHubPayments>;
    createPaymentHubPayment(dto: CreatePaymentHubPaymentDto): Promise<PaymentHubPayment>;
    updatePaymentHub(dto?: UpdatePaymentHubDto): Promise<PaymentHub>;
    updatePaymentHubDeposit(dto: UpdatePaymentHubDepositDto): Promise<PaymentHubDeposit>;
    transferPaymentHubDeposit(dto: TransferPaymentHubDepositDto): Promise<PaymentHubDeposit>;
    activatePaymentHubBridge(dto: UpdatePaymentHubBridgeDto): Promise<PaymentHubBridge>;
    deactivatePaymentHubBridge(dto: UpdatePaymentHubBridgeDto): Promise<PaymentHubBridge>;
    getTokenLists(): Promise<TokenList[]>;
    getTokenListTokens(dto?: GetTokenListDto): Promise<TokenListToken[]>;
    getNativeCurrencies(): Promise<NativeCurrenciesItem[]>;
    getAccountTokenListTokens(dto?: GetTokenListDto): Promise<TokenListToken[]>;
    isTokenOnTokenList(dto: IsTokenOnTokenListDto): Promise<boolean>;
    getTokenDetails(dto?: GetTokenDetailsDto): Promise<TokenDetails>;
    getHistoricalTokenPrice(dto?: GetHistoricalTokenPriceDto): Promise<HistoricalTokenPrices>;
    getPoolsActivity(dto?: GetPoolsActivityDto): Promise<PoolsActivities>;
    getNumberOfTransactions(dto?: GetTokenDetailsDto): Promise<NumberOfTransactions>;
    getTradingHistory(dto?: GetTradingHistoryDto): Promise<TradingHistories>;
    getMarketDetails(dto?: GetTokenDetailsDto): Promise<MarketDetails>;
    getTransaction(dto: GetTransactionDto): Promise<Transaction>;
    getTransactions(dto: GetTransactionsDto): Promise<Transactions>;
    getNftList(dto: GetNftListDto): Promise<NftList>;
    createStreamTransactionPayload(dto: CreateStreamTransactionPayloadDto): Promise<StreamTransactionPayload>;
    deleteStreamTransactionPayload(dto: DeleteStreamTransactionPayloadDto): Promise<StreamTransactionPayload>;
    modifyStreamTransactionPayload(dto: CreateStreamTransactionPayloadDto): Promise<StreamTransactionPayload>;
    getStreamList(dto?: GetStreamListDto): Promise<StreamList>;
    createSuperERC20WrapperTransactionPayload(underlyingToken: string, underlyingDecimals?: number, name?: string, symbol?: string): Promise<StreamTransactionPayload>;
    findSuperERC20WrapperOnChain(underlyingToken: string, chainId?: number, underlyingDecimals?: number, name?: string, symbol?: string): Promise<string>;
    registerERC20WrapperToken(wrapperAddress: string, chainId?: number): Promise<KnownContract | null>;
    getRegisteredERC20WrapperTokens(): Promise<import("./transactions").KnownContracts>;
    topUpAccount(): Promise<string>;
    topUpPaymentDepositAccount(): Promise<string>;
    topUp(value: string): Promise<void>;
    topUpP2P(value: string): Promise<void>;
    topUpToken(value: string, contractAddress: string): Promise<void>;
    topUpTokenP2P(value: string, contractAddress: string): Promise<void>;
    private transferTokens;
    registerContract<T extends {} = {}>(name: string, abi: any, addresses?: ContractAddresses): Contract & Partial<T>;
    private require;
    private prepareAccountAddress;
    private getNetworkChainId;
    fetchExchangeRates(dto: FetchExchangeRatesDto): Promise<RateData>;
    private validateResolveName;
    resolveName(dto?: NameResolutionNodeDto): Promise<NameResolutionsNodes>;
}
