"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3eip1193WalletProvider = void 0;
const common_1 = require("../../common");
const network_1 = require("../../network");
const dynamic_wallet_provider_1 = require("./dynamic.wallet-provider");
class Web3eip1193WalletProvider extends dynamic_wallet_provider_1.DynamicWalletProvider {
    constructor(web3, type = 'Web3') {
        super(type);
        this.web3 = web3;
    }
    static async connect(provider, type = 'Web3') {
        const result = new Web3eip1193WalletProvider(provider, type);
        const connected = await result.refresh();
        return connected ? result : null;
    }
    get address() {
        return this.address$.value;
    }
    get networkName() {
        return this.networkName$.value;
    }
    async refresh() {
        let result = false;
        const chainId = await this.sendRequest('eth_chainId');
        const networkName = network_1.prepareNetworkName(chainId);
        if (networkName) {
            const accounts = await this.sendRequest('eth_accounts');
            if (Array.isArray(accounts) && accounts.length) {
                const address = common_1.prepareAddress(accounts[0]);
                if (address) {
                    this.setAddress(address);
                    this.setNetworkName(networkName);
                    result = true;
                }
            }
        }
        return result;
    }
    async signMessage(message) {
        return this.sendRequest('personal_sign', [common_1.toHex(message), this.address]);
    }
    async sendRequest(method, params = []) {
        try {
            const result = await this.web3.request({
                method,
                params,
            });
            return result || null;
        }
        catch (error) {
            return error;
        }
    }
}
exports.Web3eip1193WalletProvider = Web3eip1193WalletProvider;
