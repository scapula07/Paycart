"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubgraphQueryHandler = void 0;
const lodash_1 = __importDefault(require("lodash"));
const pagination_1 = require("../pagination");
const utils_1 = require("../utils");
const normalizeSubgraphFilter_1 = require("./normalizeSubgraphFilter");
/**
 * A base class to handle common Subgraph query logic.
 */
class SubgraphQueryHandler {
    constructor() {
        /**
         * For every primary address field key there are more fields generated which it should look for addresses.
         * NOTE: The implementation is a bit "magical" but it rids of a bunch of boilerplate and creates a single point for editing.
         */
        this.getRelevantAddressesFromFilterByAddressFieldKeys = (filter, addressFieldKeys) => addressFieldKeys
            .map((key) => [
            filter[key],
            filter[`${key}_in`],
            filter[`${key}_not`],
            filter[`${key}_not_in`],
        ]
            .filter((x) => typeof x !== "undefined")
            .flat()
            .filter((x) => !!x))
            .flat();
    }
    getRelevantAddressesFromFilter(filter) {
        if (!filter) {
            return {
                tokens: [],
                accounts: [],
            };
        }
        const addressFieldKeys = this.getAddressFieldKeysFromFilter();
        const tokenAddresses = this.getRelevantAddressesFromFilterByAddressFieldKeys(filter, addressFieldKeys.tokenKeys);
        const accountAddresses = this.getRelevantAddressesFromFilterByAddressFieldKeys(filter, addressFieldKeys.accountKeys);
        return {
            tokens: lodash_1.default.uniq(tokenAddresses),
            accounts: lodash_1.default.uniq(accountAddresses),
        };
    }
    getRelevantAddressesFromResult(result) {
        if (!result) {
            return {
                tokens: [],
                accounts: [],
            };
        }
        const intermediate = this.getRelevantAddressesFromResultCore(result);
        return {
            tokens: lodash_1.default.uniq(intermediate.tokens.flat().filter((x) => !!x)),
            accounts: lodash_1.default.uniq(intermediate.accounts.flat().filter((x) => !!x)),
        };
    }
    async get(subgraphClient, query) {
        var _a;
        if (!query.id) {
            return null;
        }
        const response = await this.querySubgraph(subgraphClient, {
            where: {
                id: query.id.toLowerCase(),
            },
            skip: 0,
            take: 1,
        });
        return (_a = this.mapFromSubgraphResponse(response)[0]) !== null && _a !== void 0 ? _a : null;
    }
    async list(subgraphClient, query) {
        var _a, _b, _c, _d;
        const pagination = (_a = query.pagination) !== null && _a !== void 0 ? _a : (0, pagination_1.createSkipPaging)();
        const subgraphFilter = (0, utils_1.typeGuard)((0, normalizeSubgraphFilter_1.normalizeSubgraphFilter)({
            ...((_b = query.filter) !== null && _b !== void 0 ? _b : {}),
            id_gt: pagination.lastId,
        }));
        const subgraphQueryVariables = (0, utils_1.typeGuard)({
            where: (0, normalizeSubgraphFilter_1.normalizeSubgraphFilter)(subgraphFilter),
            orderBy: (_c = query.order) === null || _c === void 0 ? void 0 : _c.orderBy,
            orderDirection: (_d = query.order) === null || _d === void 0 ? void 0 : _d.orderDirection,
            first: (0, pagination_1.takePlusOne)(pagination),
            skip: pagination.skip,
        });
        const subgraphResponse = await this.querySubgraph(subgraphClient, subgraphQueryVariables);
        const mappedResult = this.mapFromSubgraphResponse(subgraphResponse);
        return (0, pagination_1.createPagedResult)(mappedResult, pagination);
    }
    async querySubgraph(subgraphClient, variables) {
        return await subgraphClient.request(this.requestDocument, variables);
    }
}
exports.SubgraphQueryHandler = SubgraphQueryHandler;
//# sourceMappingURL=subgraphQueryHandler.js.map