import { ethers, Overrides } from "ethers";
export interface IAccountTokenSnapshotFilter {
    readonly account?: string;
    readonly token?: string;
}
export interface IAccountEventsFilter {
    readonly account: string;
    readonly timestamp_gte: number;
}
export interface IIndexRequestFilter {
    readonly indexId?: string;
    readonly publisher?: string;
    readonly token?: string;
}
export interface IStreamRequestFilter {
    readonly sender?: string;
    readonly receiver?: string;
    readonly token?: string;
}
export interface IIndexSubscriptionRequestFilter {
    readonly subscriber?: string;
    readonly approved?: boolean;
}
export interface ISuperTokenRequestFilter {
    readonly isListed?: boolean;
}
export interface ISuperTokenModifyFlowParams {
    readonly flowRate?: string;
    readonly receiver: string;
    readonly sender?: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface ISuperTokenCreateFlowParams extends ISuperTokenModifyFlowParams {
    readonly flowRate: string;
    readonly sender: string;
}
export declare type ISuperTokenUpdateFlowParams = ISuperTokenCreateFlowParams;
export interface ISuperTokenDeleteFlowParams extends ISuperTokenModifyFlowParams {
    readonly sender: string;
}
export interface ISuperTokenBaseIDAParams {
    readonly indexId: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface ISuperTokenGetSubscriptionParams {
    readonly indexId: string;
    readonly publisher: string;
    readonly subscriber: string;
    readonly providerOrSigner: ethers.providers.Provider | ethers.Signer;
}
export interface ISuperTokenGetIndexParams {
    readonly indexId: string;
    readonly publisher: string;
    readonly providerOrSigner: ethers.providers.Provider | ethers.Signer;
}
export interface ISuperTokenPublisherParams extends ISuperTokenBaseIDAParams {
    readonly publisher: string;
    readonly providerOrSigner: ethers.providers.Provider | ethers.Signer;
}
export interface ISuperTokenPubSubParams {
    readonly indexId: string;
    readonly publisher: string;
    readonly subscriber: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface ISuperTokenPublisherOperationParams {
    readonly indexId: string;
    readonly publisher: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface ISuperTokenDistributeParams {
    readonly indexId: string;
    readonly amount: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface ISuperTokenUpdateIndexValueParams {
    readonly indexId: string;
    readonly indexValue: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface ISuperTokenUpdateSubscriptionUnitsParams {
    readonly indexId: string;
    readonly subscriber: string;
    readonly units: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface IModifyFlowParams {
    readonly receiver: string;
    readonly superToken: string;
    readonly flowRate?: string;
    readonly sender?: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface ICreateFlowParams extends IModifyFlowParams {
    readonly flowRate: string;
}
export declare type IUpdateFlowParams = ICreateFlowParams;
export interface IDeleteFlowParams extends IModifyFlowParams {
    readonly sender: string;
}
export interface IRealtimeBalanceOfParams {
    readonly providerOrSigner: ethers.providers.Provider | ethers.Signer;
    readonly account: string;
    readonly timestamp?: number;
}
export interface IBaseSuperTokenParams {
    readonly receiver: string;
    readonly amount: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface ITransferFromParams {
    readonly sender: string;
    readonly receiver: string;
    readonly amount: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface ISuperTokenGetFlowParams {
    readonly sender: string;
    readonly receiver: string;
    readonly providerOrSigner: ethers.providers.Provider | ethers.Signer;
}
export interface ISuperTokenGetFlowInfoParams {
    readonly account: string;
    readonly providerOrSigner: ethers.providers.Provider | ethers.Signer;
}
export interface IGetFlowParams {
    readonly superToken: string;
    readonly sender: string;
    readonly receiver: string;
    readonly providerOrSigner: ethers.providers.Provider | ethers.Signer;
}
export interface IGetAccountFlowInfoParams {
    readonly superToken: string;
    readonly account: string;
    readonly providerOrSigner: ethers.providers.Provider | ethers.Signer;
}
export interface IBaseIDAParams {
    readonly indexId: string;
    readonly superToken: string;
    readonly userData?: string;
    readonly publisher?: string;
}
export interface ICreateIndexParams {
    readonly indexId: string;
    readonly superToken: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface IBaseSubscriptionParams extends IBaseIDAParams {
    readonly subscriber: string;
}
export interface IGetSubscriptionParams extends IBaseIDAParams {
    readonly publisher: string;
    readonly subscriber: string;
    readonly providerOrSigner: ethers.providers.Provider | ethers.Signer;
}
export interface IGetIndexParams extends IBaseIDAParams {
    readonly publisher: string;
    readonly providerOrSigner: ethers.providers.Provider | ethers.Signer;
}
export interface IDistributeParams {
    readonly indexId: string;
    readonly superToken: string;
    readonly amount: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface IUpdateIndexValueParams {
    readonly indexId: string;
    readonly superToken: string;
    readonly indexValue: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface IUpdateSubscriptionUnitsParams {
    readonly indexId: string;
    readonly superToken: string;
    readonly subscriber: string;
    readonly units: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface IApproveSubscriptionParams {
    readonly indexId: string;
    readonly superToken: string;
    readonly publisher: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface IRevokeSubscriptionParams {
    readonly indexId: string;
    readonly superToken: string;
    readonly publisher: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface IDeleteSubscriptionParams {
    readonly indexId: string;
    readonly superToken: string;
    readonly publisher: string;
    readonly subscriber: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface IClaimParams {
    readonly indexId: string;
    readonly superToken: string;
    readonly publisher: string;
    readonly subscriber: string;
    readonly userData?: string;
    readonly overrides?: Overrides & {
        from?: string | Promise<string>;
    };
}
export interface ILightEntity {
    readonly id: string;
}
export interface IEventEntityBase extends ILightEntity {
    readonly blockNumber: number;
    readonly timestamp: number;
    readonly transactionHash: string;
}
export interface IFlowUpdatedEvent extends IEventEntityBase {
    readonly token: string;
    readonly sender: string;
    readonly receiver: string;
    readonly flowRate: string;
    readonly totalSenderFlowRate: string;
    readonly totalReceiverFlowRate: string;
    readonly userData: string;
    readonly oldFlowRate: string;
    readonly type: number;
    readonly totalAmountStreamedUntilTimestamp: string;
}
export interface IHOLEntityBase extends ILightEntity {
    readonly createdAtTimestamp: number;
    readonly createdAtBlockNumber: number;
}
export interface IHOLUpdateable extends IHOLEntityBase {
    readonly updatedAtTimestamp: number;
    readonly updatedAtBlockNumber: number;
}
export interface IIndex extends IHOLUpdateable {
    readonly indexId: string;
    readonly indexValue: string;
    readonly totalSubscriptionsWithUnits: number;
    readonly totalUnitsPending: string;
    readonly totalUnitsApproved: string;
    readonly totalUnits: string;
    readonly totalAmountDistributedUntilUpdatedAt: string;
    readonly token: ISuperToken;
    readonly publisher: string;
}
export interface IIndexSubscription extends IHOLUpdateable {
    readonly subscriber: string;
    readonly approved: boolean;
    readonly units: string;
    readonly totalAmountReceivedUntilUpdatedAt: string;
    readonly indexValueUntilUpdatedAt: string;
    readonly index: IIndexSubscriptionIndex;
}
export interface IIndexSubscriptionIndex {
    readonly id: string;
    readonly indexId: string;
    readonly indexValue: string;
    readonly token: ISuperToken;
}
export interface IStream extends IHOLUpdateable {
    readonly currentFlowRate: string;
    readonly streamedUntilUpdatedAt: string;
    readonly token: ISuperToken;
    readonly sender: string;
    readonly receiver: string;
    readonly flowUpdatedEvents: IStreamFlowUpdatedEvent[];
}
export declare type IStreamFlowUpdatedEvent = IFlowUpdatedEvent;
export interface ISuperToken extends IHOLEntityBase {
    readonly name: string;
    readonly symbol: string;
    readonly isListed: boolean;
    readonly underlyingAddress: string;
}
export interface IAggregateEntityBase {
    readonly id: string;
    readonly updatedAtTimestamp: number;
    readonly updatedAtBlockNumber: number;
}
export interface ILightAccountTokenSnapshot extends IAggregateEntityBase {
    readonly totalNumberOfActiveStreams: number;
    readonly totalNumberOfClosedStreams: number;
    readonly totalSubscriptionsWithUnits: number;
    readonly totalApprovedSubscriptions: number;
    readonly balanceUntilUpdatedAt: string;
    readonly totalNetFlowRate: string;
    readonly totalInflowRate: string;
    readonly totalOutflowRate: string;
    readonly totalAmountStreamedUntilUpdatedAt: string;
    readonly totalAmountTransferredUntilUpdatedAt: string;
    readonly account: string;
    readonly token: ISuperToken;
}
export interface IResolverData {
    readonly subgraphAPIEndpoint: string;
    readonly networkName: string;
    readonly resolverAddress: string;
}
export interface ISignerConstructorOptions {
    readonly web3Provider?: ethers.providers.Web3Provider;
    readonly provider?: ethers.providers.Provider;
    readonly privateKey?: string;
    readonly signer?: ethers.Signer;
}
export interface IConfig {
    readonly resolverAddress: string;
    readonly hostAddress: string;
    readonly cfaV1Address: string;
    readonly idaV1Address: string;
}
export interface IAgreementV1Options {
    readonly config: IConfig;
}
export interface IWeb3RealTimeBalanceOf {
    readonly availableBalance: string;
    readonly deposit: string;
    readonly owedDeposit: string;
    readonly timestamp: Date;
}
export interface IWeb3Subscription {
    readonly exist: boolean;
    readonly approved: boolean;
    readonly units: string;
    readonly pendingDistribution: string;
}
export interface IWeb3Index {
    readonly exist: boolean;
    readonly indexValue: string;
    readonly totalUnitsApproved: string;
    readonly totalUnitsPending: string;
}
export interface IWeb3FlowInfoParams {
    readonly timestamp: ethers.BigNumber;
    readonly flowRate: ethers.BigNumber;
    readonly deposit: ethers.BigNumber;
    readonly owedDeposit: ethers.BigNumber;
}
export interface IWeb3FlowInfo {
    readonly timestamp: Date;
    readonly flowRate: string;
    readonly deposit: string;
    readonly owedDeposit: string;
}
//# sourceMappingURL=interfaces.d.ts.map