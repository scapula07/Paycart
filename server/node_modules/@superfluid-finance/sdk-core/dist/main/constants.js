"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.networkNameToChainIdMap = exports.chainIdToResolverDataMap = exports.networkNames = exports.chainIds = exports.ARBITRUM_ONE = exports.OPTIMISM_MAINNET = exports.MATIC = exports.GNOSIS = exports.AVALANCHE_FUJI = exports.ARBITRUM_RINKEBY = exports.OPTIMISM_KOVAN = exports.MUMBAI = exports.KOVAN = exports.GOERLI = exports.RINKEBY = exports.ROPSTEN = exports.BASE_18 = exports.YEAR_IN_SECONDS = exports.MONTH_IN_SECONDS = exports.WEEK_IN_SECONDS = exports.DAY_IN_SECONDS = exports.HOUR_IN_SECONDS = exports.MINUTE_IN_SECONDS = exports.MINUTES_PER_HOUR = exports.HOURS_PER_DAY = exports.DAYS_PER_WEEK = exports.DAYS_PER_MONTH = exports.MONTHS_PER_YEAR = void 0;
exports.MONTHS_PER_YEAR = 12;
exports.DAYS_PER_MONTH = 30;
exports.DAYS_PER_WEEK = 7;
exports.HOURS_PER_DAY = 24;
exports.MINUTES_PER_HOUR = 60;
exports.MINUTE_IN_SECONDS = 60;
exports.HOUR_IN_SECONDS = exports.MINUTE_IN_SECONDS * exports.MINUTES_PER_HOUR;
exports.DAY_IN_SECONDS = exports.HOUR_IN_SECONDS * exports.HOURS_PER_DAY;
exports.WEEK_IN_SECONDS = exports.DAY_IN_SECONDS * exports.DAYS_PER_WEEK;
exports.MONTH_IN_SECONDS = exports.DAY_IN_SECONDS * exports.DAYS_PER_MONTH;
exports.YEAR_IN_SECONDS = exports.MONTH_IN_SECONDS * exports.MONTHS_PER_YEAR; // NOTE: Is 360 days (misses 5-6 days)
exports.BASE_18 = 1e18;
exports.ROPSTEN = "ropsten";
exports.RINKEBY = "rinkeby";
exports.GOERLI = "goerli";
exports.KOVAN = "kovan";
exports.MUMBAI = "mumbai";
exports.OPTIMISM_KOVAN = "optimism-kovan";
exports.ARBITRUM_RINKEBY = "arbitrum-rinkeby";
exports.AVALANCHE_FUJI = "avalanche-fuji";
exports.GNOSIS = "gnosis";
exports.MATIC = "matic";
exports.OPTIMISM_MAINNET = "optimism-mainnet";
exports.ARBITRUM_ONE = "arbitrum-one";
exports.chainIds = [
    3,
    4,
    5,
    10,
    42,
    69,
    100,
    137,
    42161,
    43113,
    80001,
    421611, // ARBITRUM RINKEBY
];
exports.networkNames = [
    exports.ROPSTEN,
    exports.RINKEBY,
    exports.GOERLI,
    exports.KOVAN,
    exports.MUMBAI,
    exports.OPTIMISM_KOVAN,
    exports.ARBITRUM_RINKEBY,
    exports.AVALANCHE_FUJI,
    exports.GNOSIS,
    exports.MATIC,
    exports.OPTIMISM_MAINNET,
    exports.ARBITRUM_ONE,
];
exports.chainIdToResolverDataMap = new Map([
    [
        3,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-ropsten",
            networkName: exports.ROPSTEN,
            resolverAddress: "0x3b44e06D96BcA9412CBc23F80F41B9e30933571a",
        },
    ],
    [
        4,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-rinkeby",
            networkName: exports.RINKEBY,
            resolverAddress: "0x659635Fab0A0cef1293f7eb3c7934542B6A6B31A",
        },
    ],
    [
        5,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-goerli",
            networkName: exports.GOERLI,
            resolverAddress: "0x3710AB3fDE2B61736B8BB0CE845D6c61F667a78E",
        },
    ],
    [
        10,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-optimism-mainnet",
            networkName: exports.OPTIMISM_MAINNET,
            resolverAddress: "0x743B5f46BC86caF41bE4956d9275721E0531B186",
        },
    ],
    [
        42,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-kovan",
            networkName: exports.KOVAN,
            resolverAddress: "0x851d3dd9dc97c1df1DA73467449B3893fc76D85B",
        },
    ],
    [
        69,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-optimism-kovan",
            networkName: exports.OPTIMISM_KOVAN,
            resolverAddress: "0x218B65780615Ff134f9Ad810CB98839534D3C0D6",
        },
    ],
    [
        100,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-xdai",
            networkName: exports.GNOSIS,
            resolverAddress: "0xD2009765189164b495c110D61e4D301729079911",
        },
    ],
    [
        137,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-matic",
            networkName: exports.MATIC,
            resolverAddress: "0xE0cc76334405EE8b39213E620587d815967af39C",
        },
    ],
    [
        42161,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-arbitrum-one",
            networkName: exports.ARBITRUM_ONE,
            resolverAddress: "0x609b9d9d6Ee9C3200745A79B9d3398DBd63d509F",
        },
    ],
    [
        43113,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-avalanche-fuji",
            networkName: exports.AVALANCHE_FUJI,
            resolverAddress: "0x141920741bC45b962B59c833cd849bA617F7ef38",
        },
    ],
    [
        80001,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-mumbai",
            networkName: exports.MUMBAI,
            resolverAddress: "0x8C54C83FbDe3C59e59dd6E324531FB93d4F504d3",
        },
    ],
    [
        421611,
        {
            subgraphAPIEndpoint: "https://api.thegraph.com/subgraphs/name/superfluid-finance/protocol-v1-arbitrum-rinkeby",
            networkName: exports.ARBITRUM_RINKEBY,
            resolverAddress: "0xa2C0C70A1E922f5f060ec20EE3aF002C163b4567",
        },
    ],
]);
exports.networkNameToChainIdMap = new Map([
    [exports.ROPSTEN, 3],
    [exports.RINKEBY, 4],
    [exports.GOERLI, 5],
    [exports.KOVAN, 42],
    [exports.OPTIMISM_KOVAN, 69],
    [exports.AVALANCHE_FUJI, 43113],
    [exports.MUMBAI, 80001],
    [exports.ARBITRUM_RINKEBY, 421611],
    [exports.GNOSIS, 100],
    [exports.MATIC, 137],
    [exports.OPTIMISM_MAINNET, 10],
    [exports.ARBITRUM_ONE, 42161],
]);
//# sourceMappingURL=constants.js.map