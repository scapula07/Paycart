import * as Types from '../../schema.generated';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export declare type StreamsQueryVariables = Types.Exact<{
    first?: Types.InputMaybe<Types.Scalars['Int']>;
    orderBy?: Types.InputMaybe<Types.Stream_OrderBy>;
    orderDirection?: Types.InputMaybe<Types.OrderDirection>;
    skip?: Types.InputMaybe<Types.Scalars['Int']>;
    where?: Types.InputMaybe<Types.Stream_Filter>;
}>;
export declare type StreamsQuery = {
    streams: Array<{
        createdAtBlockNumber: string;
        createdAtTimestamp: string;
        currentFlowRate: string;
        id: string;
        streamedUntilUpdatedAt: string;
        updatedAtBlockNumber: string;
        updatedAtTimestamp: string;
        receiver: {
            id: string;
        };
        sender: {
            id: string;
        };
        token: {
            id: string;
        };
    }>;
};
export declare const StreamsDocument: DocumentNode<StreamsQuery, Types.Exact<{
    first?: Types.InputMaybe<Types.Scalars['Int']>;
    orderBy?: Types.InputMaybe<Types.Stream_OrderBy>;
    orderDirection?: Types.InputMaybe<Types.OrderDirection>;
    skip?: Types.InputMaybe<Types.Scalars['Int']>;
    where?: Types.InputMaybe<Types.Stream_Filter>;
}>>;
//# sourceMappingURL=streams.generated.d.ts.map