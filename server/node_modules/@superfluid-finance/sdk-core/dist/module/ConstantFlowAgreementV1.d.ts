import Host from "./Host";
import Operation from "./Operation";
import { IAgreementV1Options, ICreateFlowParams, IDeleteFlowParams, IGetAccountFlowInfoParams, IGetFlowParams, IUpdateFlowParams, IWeb3FlowInfo, IWeb3FlowInfoParams } from "./interfaces";
/**
 * @dev Constant Flow Agreement V1 Helper Class
 * @description A helper class to interact with the CFAV1 contract.
 */
export default class ConstantFlowAgreementV1 {
    readonly options: IAgreementV1Options;
    readonly host: Host;
    constructor(options: IAgreementV1Options);
    private get cfaContract();
    /**
     * @dev Get the details of a flow.
     * @param superToken the superToken of the agreement
     * @param sender the sender of the flow
     * @param receiver the receiver of the flow
     * @param providerOrSigner a provider or signer object
     * @returns {Promise<IWeb3FlowInfo>} Web3 Flow info object
     */
    getFlow: ({ superToken, sender, receiver, providerOrSigner, }: IGetFlowParams) => Promise<IWeb3FlowInfo>;
    /**
     * @dev Get the flow info of an account (net flow).
     * @param superToken the superToken of the agreement
     * @param account the account we're querying
     * @param providerOrSigner a provider or signer object
     * @returns {Promise<IWeb3FlowInfo>} Web3 Flow info object
     */
    getAccountFlowInfo: ({ superToken, account, providerOrSigner, }: IGetAccountFlowInfoParams) => Promise<IWeb3FlowInfo>;
    /**
     * @dev Get the net flow of an account.
     * @param superToken the superToken of the agreement
     * @param account the account we're querying
     * @param providerOrSigner a provider or signer object
     * @returns {Promise<string>} Web3 Flow info object
     */
    getNetFlow: ({ superToken, account, providerOrSigner, }: IGetAccountFlowInfoParams) => Promise<string>;
    /**
     * @dev Create a flow.
     * @param flowRate The specified flow rate.
     * @param receiver The receiver of the flow.
     * @param superToken The token to be flowed.
     * @param userData Extra user data provided.
     * @param overrides ethers overrides object for more control over the transaction sent.
     * @returns {Operation} An instance of Operation which can be executed or batched.
     */
    createFlow: ({ flowRate, receiver, superToken, userData, overrides, }: ICreateFlowParams) => Operation;
    /**
     * @dev Update a flow.
     * @param flowRate The specified flow rate.
     * @param receiver The receiver of the flow.
     * @param superToken The token to be flowed.
     * @param userData Extra user data provided.
     * @param overrides ethers overrides object for more control over the transaction sent.
     * @returns {Operation} An instance of Operation which can be executed or batched.
     */
    updateFlow: ({ flowRate, receiver, superToken, userData, overrides, }: IUpdateFlowParams) => Operation;
    /**
     * @dev Delete a flow.
     * @param superToken The token to be flowed.
     * @param sender The sender of the flow.
     * @param receiver The receiver of the flow.
     * @param userData Extra user data provided.
     * @param overrides ethers overrides object for more control over the transaction sent.
     * @returns {Operation} An instance of Operation which can be executed or batched.
     */
    deleteFlow: ({ superToken, sender, receiver, userData, overrides, }: IDeleteFlowParams) => Operation;
    /**
     * @dev Sanitizes flow info, converting BigNumber to string.
     * @param timestamp last updated timestamp of flow
     * @param flowRate the current flow rate
     * @param deposit the deposit amount
     * @param owedDeposit any owed depsit
     * @returns {IWeb3FlowInfo} sanitized web3 flow info
     */
    _sanitizeflowInfo: ({ timestamp, flowRate, deposit, owedDeposit, }: IWeb3FlowInfoParams) => IWeb3FlowInfo;
}
//# sourceMappingURL=ConstantFlowAgreementV1.d.ts.map