"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Keyv = require("keyv");
/**
 * Class used to store the block's reason indexed by location of blocks
 */
class ReasonsByIgnoredLocationIndex {
    /**
     * reasonByLocationTransactionIndex constructor
     * @param store a Keyv store to persist the index to
     */
    constructor(store) {
        this.reasonsByIgnoredLocation = new Keyv({
            namespace: 'reasonsByIgnoredLocation',
            store,
        });
        this.listIgnoredLocation = new Keyv({
            namespace: 'listIgnoredLocation',
            store,
        });
    }
    /**
     * Function to push reason indexed by location
     *
     * @param dataId dataId of the block
     * @param reason reason to be ignored
     */
    pushReasonByLocation(dataId, reason) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!(yield this.reasonsByIgnoredLocation.get(dataId))) {
                yield this.reasonsByIgnoredLocation.set(dataId, reason);
                yield this.updateDataId(dataId);
            }
        });
    }
    /**
     * Function to update reason indexed by location
     *
     * @param dataId dataId of the block
     * @param reason reason to be ignored
     */
    removeReasonByLocation(dataId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.reasonsByIgnoredLocation.delete(dataId);
        });
    }
    /**
     * Function to get reason from location
     *
     * @param dataId location to get the reason from
     * @returns reason of the location, null if not found
     */
    getReasonFromLocation(dataId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const reason = yield this.reasonsByIgnoredLocation.get(dataId);
            return reason ? reason : null;
        });
    }
    /**
     * Get the list of data ids stored
     *
     * @returns the list of data ids stored
     */
    getIgnoredLocations() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const listDataId = yield this.listIgnoredLocation.get('list');
            if (!listDataId) {
                return {};
            }
            const result = {};
            for (const dataId of Array.from(listDataId)) {
                result[dataId] = yield this.reasonsByIgnoredLocation.get(dataId);
            }
            return result;
        });
    }
    /**
     * Update the list of data ids stored
     *
     * @param dataId data id to add to the list
     * @returns
     */
    updateDataId(dataId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let listDataIds = yield this.listIgnoredLocation.get('list');
            if (!listDataIds) {
                listDataIds = [];
            }
            listDataIds.push(dataId);
            yield this.listIgnoredLocation.set('list', listDataIds);
        });
    }
}
exports.default = ReasonsByIgnoredLocationIndex;
//# sourceMappingURL=ignored-location.js.map