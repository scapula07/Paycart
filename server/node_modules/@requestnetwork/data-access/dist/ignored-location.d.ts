import * as Keyv from 'keyv';
/**
 * Interface for reason from location
 */
export interface IReasonByIgnoredLocation {
    [location: string]: string;
}
/**
 * Class used to store the block's reason indexed by location of blocks
 */
export default class ReasonsByIgnoredLocationIndex {
    /**
     * reason by location
     * maps dataId => reason
     */
    private reasonsByIgnoredLocation;
    private listIgnoredLocation;
    /**
     * reasonByLocationTransactionIndex constructor
     * @param store a Keyv store to persist the index to
     */
    constructor(store?: Keyv.Store<any>);
    /**
     * Function to push reason indexed by location
     *
     * @param dataId dataId of the block
     * @param reason reason to be ignored
     */
    pushReasonByLocation(dataId: string, reason: string): Promise<void>;
    /**
     * Function to update reason indexed by location
     *
     * @param dataId dataId of the block
     * @param reason reason to be ignored
     */
    removeReasonByLocation(dataId: string): Promise<void>;
    /**
     * Function to get reason from location
     *
     * @param dataId location to get the reason from
     * @returns reason of the location, null if not found
     */
    getReasonFromLocation(dataId: string): Promise<string | null>;
    /**
     * Get the list of data ids stored
     *
     * @returns the list of data ids stored
     */
    getIgnoredLocations(): Promise<IReasonByIgnoredLocation>;
    /**
     * Update the list of data ids stored
     *
     * @param dataId data id to add to the list
     * @returns
     */
    private updateDataId;
}
//# sourceMappingURL=ignored-location.d.ts.map