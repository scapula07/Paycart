import { LogTypes } from '@requestnetwork/types';
/**
 * Module to start and stop a periodical function
 */
export default class IntervalTimer {
    intervalFunctionSuccessiveFailureCount: number;
    private readonly intervalFunction;
    private readonly intervalTime;
    private readonly logger;
    private readonly successiveFailureThreshold;
    private timeoutObject;
    private lastRecursion;
    /**
     * Constructor IntervalTimer
     *
     * @param intervalFunction function to call periodically when timer is started
     * @param intervalTime Interval time between interval function call
     * @param logger Logger instance
     * @param successiveFailureThreshold Required number of successive failure from interval function before logging an error
     */
    constructor(intervalFunction: () => Promise<void>, intervalTime: number, logger: LogTypes.ILogger, successiveFailureThreshold?: number);
    /**
     * Start the interval timer
     */
    start(): void;
    /**
     * Stop the interval timer
     */
    stop(): Promise<void>;
    get isStarted(): boolean;
    /**
     * Gets current configuration
     *
     * @return the current configuration attributes
     */
    getConfig(): {
        intervalTime: number;
        successiveFailureThreshold: number;
    };
}
//# sourceMappingURL=interval-timer.d.ts.map