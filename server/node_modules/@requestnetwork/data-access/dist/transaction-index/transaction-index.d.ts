import { DataAccessTypes } from '@requestnetwork/types';
import * as Keyv from 'keyv';
/**
 * An in-memory implementation of the transaction index.
 */
export default class TransactionIndex implements DataAccessTypes.ITransactionIndex {
    private locationByTopic?;
    private timestampByLocation;
    private indexedLocation;
    /**
     * Constructor of TransactionIndex
     * @param store a Keyv store to persist the index
     */
    constructor(store?: Keyv.Store<string[]>);
    initialize(): Promise<void>;
    /**
     * Get the last indexed timestamp
     */
    getLastTransactionTimestamp(): Promise<number | null>;
    /**
     * Adds a transaction to the index, for indexing by channel, topic and timestamp
     *
     * @param dataId the dataId to index
     * @param header the headers of the block (containing channels and topics)
     * @param timestamp the timestamp of the transaction
     */
    addTransaction(dataId: string, header: DataAccessTypes.IBlockHeader, timestamp: number): Promise<void>;
    /**
     * Removes a transaction from the index
     *
     * @param dataId the dataId to remove
     */
    removeTransaction(dataId: string): Promise<void>;
    /**
     * Update timestamp for a dataId
     *
     * @param dataId the dataId to index
     * @param timestamp the timestamp of the transaction
     */
    updateTimestamp(dataId: string, timestamp: number): Promise<void>;
    /**
     * Get a list of transactions indexed by channel id
     * @param channelId channel id to retrieve the transaction from
     * @param timestampBoundaries timestamp boundaries of the transactions search
     * @returns list of location of a channel
     */
    getStorageLocationList(channelId: string, timestampBoundaries?: DataAccessTypes.ITimestampBoundaries): Promise<string[]>;
    /**
     * Get a list of channels indexed by topic
     * @param topic topic to retrieve the channelIds from
     * @param timestampBoundaries timestamp boundaries of the transactions search
     * @returns list of location of the channels indexed by the topic
     */
    getChannelIdsForTopic(topic: string, timestampBoundaries?: DataAccessTypes.ITimestampBoundaries | undefined): Promise<string[]>;
    /**
     * Get a list of channels indexed by topics
     * @param topics topics to retrieve the channelIds from
     * @param timestampBoundaries timestamp boundaries of the transactions search
     * @returns list of location of the channels indexed by the topics
     */
    getChannelIdsForMultipleTopics(topics: string[], timestampBoundaries?: DataAccessTypes.ITimestampBoundaries | undefined): Promise<string[]>;
    /**
     * the list of indexed locations
     */
    getIndexedLocations(): Promise<string[]>;
    /**
     * Update the list of data ids stored
     *
     * @param dataId data id to add to the list
     * @returns
     */
    private updateIndexedLocation;
}
//# sourceMappingURL=transaction-index.d.ts.map