import { DataAccessTypes } from '@requestnetwork/types';
import * as Keyv from 'keyv';
/**
 * Class used to store the block's timestamp indexed by location
 */
export default class TimestampByLocationTransactionIndex {
    /**
     * timestamp by location
     * maps dataId => timestamp
     */
    private timestampByLocation;
    /**
     * TimestampByLocationTransactionIndex constructor
     * @param store a Keyv store to persist the index to
     */
    constructor(store?: Keyv.Store<any>);
    /**
     * Function to push timestamp indexed by location
     *
     * @param dataId dataId of the block
     * @param timestamp timestamp of the block
     */
    pushTimestampByLocation(dataId: string, timestamp: number): Promise<void>;
    /**
     * Removes timestamp indexed by location
     *
     * @param dataId dataId of the block
     */
    removeIndexedDataId(dataId: string): Promise<void>;
    /**
     * Function to update timestamp indexed by location
     *
     * @param dataId dataId of the block
     * @param timestamp timestamp of the block
     */
    updateTimestampByLocation(dataId: string, timestamp: number): Promise<void>;
    /**
     * Function to get timestamp from location
     *
     * @param dataId location to get the timestamp from
     * @returns timestamp of the location, null if not found
     */
    getTimestampFromLocation(dataId: string): Promise<number | null>;
    /**
     * Function to get timestamp from location
     *
     * @param dataId location to get the timestamp from
     * @returns timestamp of the location, null if not found
     */
    isDataInBoundaries(dataId: string, boundaries?: DataAccessTypes.ITimestampBoundaries): Promise<boolean>;
    /**
     * the timestamp of the latest transaction
     */
    getLastTransactionTimestamp(): Promise<number | null>;
    /**
     * the timestamp of the latest transaction
     */
    private setLastTransactionTimestamp;
}
//# sourceMappingURL=timestamp-by-location.d.ts.map