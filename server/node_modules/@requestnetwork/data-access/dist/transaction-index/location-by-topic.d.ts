import { DataAccessTypes } from '@requestnetwork/types';
import * as Keyv from 'keyv';
/**
 * Helps store and retrieve channelIds by topic, and transaction location per channelId
 */
export default class LocationByTopicTransactionIndex {
    /**
     * Storage location by channel id
     * maps channelId => [storageLocation]
     * This attribute is public for mocking purpose
     */
    storageLocationByChannelId: Keyv<Set<string>>;
    /**
     * Channel Ids by topic
     * maps topic => [channelId]
     * This attribute is public for mocking purpose
     */
    channelIdByTopics: Keyv<Set<string>>;
    /**
     * Constructor for LocationByTopicIndex
     * @param store a Keyv store to persist the index to.
     */
    constructor(store?: Keyv.Store<any>);
    /**
     * Function to push location indexed with block topics
     *
     * @param storageLocation storage location to index
     * @param blockHeader header of the block
     */
    pushStorageLocationIndexedWithBlockTopics(storageLocation: string, blockHeader: DataAccessTypes.IBlockHeader): Promise<void>;
    /**
     * Function to get the channel ids from a topic
     *
     * @param topic topic to retrieve the dataId
     * @returns list of the channel ids connected to the topic
     */
    getChannelIdsFromTopic(topic: string): Promise<string[]>;
    /**
     * Function to get the channel ids from multiple topics
     *
     * @param topics topics to retrieve the dataIds
     * @returns list of the channel ids linked to the topics
     */
    getChannelIdsFromMultipleTopics(topics: string[]): Promise<string[]>;
    /**
     * Function to get storage locations from a channel id
     *
     * @param channelId channel id to retrieve the storage location
     * @returns list of the location connected to the channel id
     */
    getStorageLocationsFromChannelId(channelId: string): Promise<string[]>;
}
//# sourceMappingURL=location-by-topic.d.ts.map