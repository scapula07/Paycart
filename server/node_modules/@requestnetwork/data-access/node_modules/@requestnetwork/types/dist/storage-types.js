"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentState = exports.GasPriceType = exports.StorageSystemType = exports.IpfsGatewayProtocol = exports.EthereumNetwork = exports.ErrorEntries = void 0;
/** Enum of state possible for data */
var ErrorEntries;
(function (ErrorEntries) {
    ErrorEntries[ErrorEntries["IPFS_CONNECTION_ERROR"] = 0] = "IPFS_CONNECTION_ERROR";
    ErrorEntries[ErrorEntries["INCORRECT_FILE"] = 1] = "INCORRECT_FILE";
    ErrorEntries[ErrorEntries["WRONG_FEES"] = 2] = "WRONG_FEES";
})(ErrorEntries = exports.ErrorEntries || (exports.ErrorEntries = {}));
/** Ethereum network id */
var EthereumNetwork;
(function (EthereumNetwork) {
    EthereumNetwork[EthereumNetwork["PRIVATE"] = 0] = "PRIVATE";
    EthereumNetwork[EthereumNetwork["MAINNET"] = 1] = "MAINNET";
    EthereumNetwork[EthereumNetwork["RINKEBY"] = 4] = "RINKEBY";
    EthereumNetwork[EthereumNetwork["GOERLI"] = 5] = "GOERLI";
    EthereumNetwork[EthereumNetwork["XDAI"] = 100] = "XDAI";
})(EthereumNetwork = exports.EthereumNetwork || (exports.EthereumNetwork = {}));
/** Protocol to connect to ipfs */
var IpfsGatewayProtocol;
(function (IpfsGatewayProtocol) {
    IpfsGatewayProtocol["HTTP"] = "http";
    IpfsGatewayProtocol["HTTPS"] = "https";
})(IpfsGatewayProtocol = exports.IpfsGatewayProtocol || (exports.IpfsGatewayProtocol = {}));
/** Storage type for now only ethereum + ipfs available */
var StorageSystemType;
(function (StorageSystemType) {
    /** Ethereum and IPFS */
    StorageSystemType["ETHEREUM_IPFS"] = "ethereumIpfs";
    /** Storage in local, only used for node caching for the moment */
    StorageSystemType["LOCAL"] = "local";
    /** Mock storage, in memory. Used for local development. Should not be used in production */
    StorageSystemType["IN_MEMORY_MOCK"] = "inMemoryMock";
})(StorageSystemType = exports.StorageSystemType || (exports.StorageSystemType = {}));
/** Gas price type */
var GasPriceType;
(function (GasPriceType) {
    GasPriceType["FAST"] = "fast";
    GasPriceType["STANDARD"] = "standard";
    GasPriceType["SAFELOW"] = "safeLow";
})(GasPriceType = exports.GasPriceType || (exports.GasPriceType = {}));
/** Enum of state possible for data */
var ContentState;
(function (ContentState) {
    ContentState["PENDING"] = "pending";
    ContentState["CONFIRMED"] = "confirmed";
})(ContentState = exports.ContentState || (exports.ContentState = {}));
//# sourceMappingURL=storage-types.js.map