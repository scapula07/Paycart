import { AdvancedLogicTypes, ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { ICurrencyManager } from '@requestnetwork/currency';
import { PaymentNetworkOptions } from './types';
/** Factory to create the payment network according to the currency and payment network type */
export declare class PaymentNetworkFactory {
    private readonly advancedLogic;
    private readonly currencyManager;
    private readonly options;
    /**
     *
     * @param advancedLogic the advanced-logic layer in charge of the extensions
     * @param currencyManager the currency manager handling supported currencies
     * @param options the payment network options
     */
    constructor(advancedLogic: AdvancedLogicTypes.IAdvancedLogic, currencyManager: ICurrencyManager, options?: Partial<PaymentNetworkOptions>);
    private buildOptions;
    /**
     * Creates a payment network according to payment network creation parameters
     * It throws if the payment network given is not supported by this library
     *
     * @param paymentNetworkId the ID of the payment network to instantiate
     * @param currencyType the currency type of the request
     * @param paymentChain Different from request.currency.network for on-chain conversion payment networks (any-to-something)
     * @returns the module to handle the payment network
     */
    createPaymentNetwork(paymentNetworkId: ExtensionTypes.PAYMENT_NETWORK_ID, currencyType: RequestLogicTypes.CURRENCY, paymentChain?: string, paymentNetworkVersion?: string): PaymentTypes.IPaymentNetwork;
    /**
     * Gets the module to the payment network of a request
     * It throws if the payment network found is not supported by this library
     *
     * @param request the request
     * @returns the module to handle the payment network or null if no payment network found
     */
    getPaymentNetworkFromRequest(request: RequestLogicTypes.IRequest): PaymentTypes.IPaymentNetwork | null;
}
//# sourceMappingURL=payment-network-factory.d.ts.map