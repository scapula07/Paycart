"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBalanceErrorObject = exports.ExtensionMissingRequiredValue = exports.VersionNotSupported = exports.NetworkNotSupported = exports.BalanceError = void 0;
const types_1 = require("@requestnetwork/types");
class BalanceError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
    }
}
exports.BalanceError = BalanceError;
/* eslint-disable max-classes-per-file */
/** Exception when network not supported */
class NetworkNotSupported extends BalanceError {
    constructor(msg) {
        super(msg, types_1.PaymentTypes.BALANCE_ERROR_CODE.NETWORK_NOT_SUPPORTED);
    }
}
exports.NetworkNotSupported = NetworkNotSupported;
/** Exception when version not supported */
class VersionNotSupported extends BalanceError {
    constructor(msg) {
        super(msg, types_1.PaymentTypes.BALANCE_ERROR_CODE.VERSION_NOT_SUPPORTED);
    }
}
exports.VersionNotSupported = VersionNotSupported;
class ExtensionMissingRequiredValue extends BalanceError {
    constructor(extension, name) {
        super(`${extension} misses required value ${name}`, types_1.PaymentTypes.BALANCE_ERROR_CODE.UNKNOWN);
    }
}
exports.ExtensionMissingRequiredValue = ExtensionMissingRequiredValue;
/**
 * Creates the object IBalanceWithEvents from the error code and error message
 *
 * @param message error message
 * @param code error code
 * @returns The object IBalanceWithEvents to return
 */
function getBalanceErrorObject(error) {
    const code = error && error instanceof BalanceError ? error.code : undefined;
    return {
        balance: null,
        error: {
            code: code || types_1.PaymentTypes.BALANCE_ERROR_CODE.UNKNOWN,
            message: error === null || error === void 0 ? void 0 : error.message,
        },
        events: [],
    };
}
exports.getBalanceErrorObject = getBalanceErrorObject;
//# sourceMappingURL=balance-error.js.map