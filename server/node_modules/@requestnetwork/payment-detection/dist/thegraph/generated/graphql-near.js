"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetNearPayments = exports.GetNearConversionPayments = exports.getSdk = exports.GetNearPaymentsDocument = exports.GetNearConversionPaymentsDocument = exports._SubgraphErrorPolicy_ = exports.Payment_OrderBy = exports.OrderDirection = exports.EventName = exports.Escrow_OrderBy = exports.EscrowState = exports.EscrowEvent_OrderBy = void 0;
const graphql_tag_1 = require("graphql-tag");
var EscrowEvent_OrderBy;
(function (EscrowEvent_OrderBy) {
    EscrowEvent_OrderBy["Id"] = "id";
    EscrowEvent_OrderBy["ContractAddress"] = "contractAddress";
    EscrowEvent_OrderBy["Reference"] = "reference";
    EscrowEvent_OrderBy["Escrow"] = "escrow";
    EscrowEvent_OrderBy["Block"] = "block";
    EscrowEvent_OrderBy["Timestamp"] = "timestamp";
    EscrowEvent_OrderBy["TxHash"] = "txHash";
    EscrowEvent_OrderBy["EventName"] = "eventName";
    EscrowEvent_OrderBy["From"] = "from";
    EscrowEvent_OrderBy["GasUsed"] = "gasUsed";
    EscrowEvent_OrderBy["GasPrice"] = "gasPrice";
})(EscrowEvent_OrderBy = exports.EscrowEvent_OrderBy || (exports.EscrowEvent_OrderBy = {}));
var EscrowState;
(function (EscrowState) {
    EscrowState["PaidEscrow"] = "paidEscrow";
    EscrowState["PaidIssuer"] = "paidIssuer";
    EscrowState["Emergency"] = "emergency";
    EscrowState["Frozen"] = "frozen";
})(EscrowState = exports.EscrowState || (exports.EscrowState = {}));
var Escrow_OrderBy;
(function (Escrow_OrderBy) {
    Escrow_OrderBy["Id"] = "id";
    Escrow_OrderBy["ContractAddress"] = "contractAddress";
    Escrow_OrderBy["PaymentProxyAddress"] = "paymentProxyAddress";
    Escrow_OrderBy["Reference"] = "reference";
    Escrow_OrderBy["CreationBlock"] = "creationBlock";
    Escrow_OrderBy["CreationTimestamp"] = "creationTimestamp";
    Escrow_OrderBy["EscrowState"] = "escrowState";
    Escrow_OrderBy["TokenAddress"] = "tokenAddress";
    Escrow_OrderBy["Amount"] = "amount";
    Escrow_OrderBy["FeeAmount"] = "feeAmount";
    Escrow_OrderBy["FeeAddress"] = "feeAddress";
    Escrow_OrderBy["From"] = "from";
    Escrow_OrderBy["To"] = "to";
    Escrow_OrderBy["Events"] = "events";
})(Escrow_OrderBy = exports.Escrow_OrderBy || (exports.Escrow_OrderBy = {}));
var EventName;
(function (EventName) {
    EventName["PaidEscrow"] = "paidEscrow";
    EventName["PaidIssuer"] = "paidIssuer";
    EventName["InitiateEmergencyClaim"] = "initiateEmergencyClaim";
    EventName["RevertEmergencyClaim"] = "revertEmergencyClaim";
    EventName["FreezeEscrow"] = "freezeEscrow";
})(EventName = exports.EventName || (exports.EventName = {}));
/** Defines the order direction, either ascending or descending */
var OrderDirection;
(function (OrderDirection) {
    OrderDirection["Asc"] = "asc";
    OrderDirection["Desc"] = "desc";
})(OrderDirection = exports.OrderDirection || (exports.OrderDirection = {}));
var Payment_OrderBy;
(function (Payment_OrderBy) {
    Payment_OrderBy["Id"] = "id";
    Payment_OrderBy["ContractAddress"] = "contractAddress";
    Payment_OrderBy["TokenAddress"] = "tokenAddress";
    Payment_OrderBy["To"] = "to";
    Payment_OrderBy["From"] = "from";
    Payment_OrderBy["Reference"] = "reference";
    Payment_OrderBy["Block"] = "block";
    Payment_OrderBy["Timestamp"] = "timestamp";
    Payment_OrderBy["TxHash"] = "txHash";
    Payment_OrderBy["ReceiptId"] = "receiptId";
    Payment_OrderBy["GasUsed"] = "gasUsed";
    Payment_OrderBy["GasPrice"] = "gasPrice";
    Payment_OrderBy["Amount"] = "amount";
    Payment_OrderBy["FeeAmount"] = "feeAmount";
    Payment_OrderBy["FeeAddress"] = "feeAddress";
    Payment_OrderBy["Currency"] = "currency";
    Payment_OrderBy["AmountInCrypto"] = "amountInCrypto";
    Payment_OrderBy["FeeAmountInCrypto"] = "feeAmountInCrypto";
    Payment_OrderBy["MaxRateTimespan"] = "maxRateTimespan";
})(Payment_OrderBy = exports.Payment_OrderBy || (exports.Payment_OrderBy = {}));
var _SubgraphErrorPolicy_;
(function (_SubgraphErrorPolicy_) {
    /** Data will be returned even if the subgraph has indexing errors */
    _SubgraphErrorPolicy_["Allow"] = "allow";
    /** If the subgraph has indexing errors, data will be omitted. The default. */
    _SubgraphErrorPolicy_["Deny"] = "deny";
})(_SubgraphErrorPolicy_ = exports._SubgraphErrorPolicy_ || (exports._SubgraphErrorPolicy_ = {}));
exports.GetNearConversionPaymentsDocument = (0, graphql_tag_1.default) `
    query GetNearConversionPayments($reference: String!, $to: String!, $currency: String!, $maxRateTimespan: Int!, $contractAddress: String!) {
  payments(
    where: {reference: $reference, to: $to, currency: $currency, maxRateTimespan_gte: $maxRateTimespan, contractAddress: $contractAddress}
    orderBy: timestamp
    orderDirection: asc
  ) {
    amount
    block
    receiptId
    feeAmount
    feeAddress
    from
    timestamp
    currency
    maxRateTimespan
    amountInCrypto
    feeAmountInCrypto
  }
}
    `;
exports.GetNearPaymentsDocument = (0, graphql_tag_1.default) `
    query GetNearPayments($reference: String!, $to: String!, $contractAddress: String!) {
  payments(
    where: {reference: $reference, to: $to, contractAddress: $contractAddress}
    orderBy: timestamp
    orderDirection: asc
  ) {
    amount
    block
    receiptId
    feeAmount
    feeAddress
    from
    timestamp
  }
}
    `;
const defaultWrapper = (action, _operationName) => action();
function getSdk(client, withWrapper = defaultWrapper) {
    return {
        GetNearConversionPayments(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetNearConversionPaymentsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetNearConversionPayments');
        },
        GetNearPayments(variables, requestHeaders) {
            return withWrapper((wrappedRequestHeaders) => client.request(exports.GetNearPaymentsDocument, variables, Object.assign(Object.assign({}, requestHeaders), wrappedRequestHeaders)), 'GetNearPayments');
        }
    };
}
exports.getSdk = getSdk;
exports.GetNearConversionPayments = (0, graphql_tag_1.default) `
    query GetNearConversionPayments($reference: String!, $to: String!, $currency: String!, $maxRateTimespan: Int!, $contractAddress: String!) {
  payments(
    where: {reference: $reference, to: $to, currency: $currency, maxRateTimespan_gte: $maxRateTimespan, contractAddress: $contractAddress}
    orderBy: timestamp
    orderDirection: asc
  ) {
    amount
    block
    receiptId
    feeAmount
    feeAddress
    from
    timestamp
    currency
    maxRateTimespan
    amountInCrypto
    feeAmountInCrypto
  }
}
    `;
exports.GetNearPayments = (0, graphql_tag_1.default) `
    query GetNearPayments($reference: String!, $to: String!, $contractAddress: String!) {
  payments(
    where: {reference: $reference, to: $to, contractAddress: $contractAddress}
    orderBy: timestamp
    orderDirection: asc
  ) {
    amount
    block
    receiptId
    feeAmount
    feeAddress
    from
    timestamp
  }
}
    `;
//# sourceMappingURL=graphql-near.js.map