"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTheGraphSuperfluidClient = void 0;
const graphql_request_1 = require("graphql-request");
const graphql_superfluid_1 = require("./generated/graphql-superfluid");
const BASE_URL = `https://api.thegraph.com`;
const getTheGraphSuperfluidClient = (network, options) => {
    const baseUrl = (options === null || options === void 0 ? void 0 : options.baseUrl) || network === 'private' ? 'http://localhost:8000' : BASE_URL;
    // Note: it is also possible to use the IPFS hash of the subgraph
    //  eg. /subgraphs/id/QmcCaSkefrmhe4xQj6Y6BBbHiFkbrn6UGDEBUWER7nt399
    //  which is a better security but would require an update of the
    //  library each time the subgraph is updated, which isn't ideal
    //  for early testing.
    const url = `${baseUrl}/subgraphs/name/superfluid-finance/protocol-v1-${network}`;
    return (0, graphql_superfluid_1.getSdk)(new graphql_request_1.GraphQLClient(url, options));
};
exports.getTheGraphSuperfluidClient = getTheGraphSuperfluidClient;
//# sourceMappingURL=superfluid.js.map