import { providers } from 'ethers';
declare type ProviderFactory = (network: string | undefined) => providers.Provider | string;
/**
 * @param network the network to connect to
 * @param defaultFactory the defaultFactory to use as fallback if needed
 */
declare type CurrentProviderFactory = (network: string | undefined, defaultFactory: ProviderFactory) => providers.Provider | string;
/**
 * @param defaultProviderOptions Default Provider Options as specified in https://docs.ethers.io/v5/api/providers/#providers-getDefaultProvider  */
export declare const initPaymentDetectionApiKeys: (defaultProviderOptions?: Record<string, string | (() => string)> | undefined) => void;
/**
 * Override the default providerFactory, which relies mainly on Infura.
 * @param providerFactory if not specify, will reset to the default factory
 */
export declare const setProviderFactory: (providerFactory?: CurrentProviderFactory | undefined) => void;
/**
 * Returns a Web3 Provider for the given `network`.
 *
 * Configuration options:
 * - Specify `RN_WEB3_RPC_URL_[NETWORK]` environment variable to override the default behaviour
 * - Specify `RN_INFURA_KEY` to override the default Infura API KEY (recommended)
 * - Use `initPaymentDetectionApiKeys` to override Infura API KEY when `RN_INFURA_KEY` is not usable
 * - Use `setProviderFactory` for more complex configurations with multiple networks
 *
 * @param network the blockchain network. See https://chainid.network/chains.json `network` field for reference
 */
export declare const getDefaultProvider: (network?: string | undefined) => providers.Provider;
export {};
//# sourceMappingURL=provider.d.ts.map