"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NearConversionInfoRetriever = void 0;
const tslib_1 = require("tslib");
const near_info_retriever_1 = require("./near-info-retriever");
/**
 * Gets a list of transfer events for a set of Near payment details
 */
class NearConversionInfoRetriever extends near_info_retriever_1.NearInfoRetriever {
    /**
     * @param paymentReference The reference to identify the payment
     * @param toAddress Address to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param network The id of network we want to check
     */
    constructor(requestCurrency, paymentReference, toAddress, proxyContractName, eventName, network, maxRateTimespan = 0) {
        super(paymentReference, toAddress, proxyContractName, eventName, network);
        this.requestCurrency = requestCurrency;
        this.paymentReference = paymentReference;
        this.toAddress = toAddress;
        this.proxyContractName = proxyContractName;
        this.eventName = eventName;
        this.network = network;
        this.maxRateTimespan = maxRateTimespan;
    }
    getTransferEvents() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const payments = yield this.client.GetNearConversionPayments({
                reference: this.paymentReference,
                to: this.toAddress,
                currency: this.requestCurrency.symbol,
                maxRateTimespan: this.maxRateTimespan,
                contractAddress: this.proxyContractName,
            });
            return payments.payments.map((p) => {
                var _a;
                return ({
                    amount: p.amount,
                    name: this.eventName,
                    parameters: {
                        block: p.block,
                        feeAddress: p.feeAddress || undefined,
                        feeAmount: p.feeAmount,
                        feeAmountInCrypto: p.feeAmountInCrypto || undefined,
                        amountInCrypto: p.amountInCrypto,
                        to: this.toAddress,
                        maxRateTimespan: (_a = p.maxRateTimespan) === null || _a === void 0 ? void 0 : _a.toString(),
                        from: p.from,
                        gasUsed: p.gasUsed,
                        gasPrice: p.gasPrice,
                        receiptId: p.receiptId,
                        currency: p.currency,
                    },
                    timestamp: Number(p.timestamp),
                });
            });
        });
    }
}
exports.NearConversionInfoRetriever = NearConversionInfoRetriever;
//# sourceMappingURL=near-conversion-info-retriever.js.map