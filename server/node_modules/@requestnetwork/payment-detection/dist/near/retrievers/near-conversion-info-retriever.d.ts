import { PaymentTypes } from '@requestnetwork/types';
import { CurrencyDefinition } from '@requestnetwork/currency';
import { NearInfoRetriever } from './near-info-retriever';
interface NearSubGraphPaymentEvent extends PaymentTypes.IETHPaymentEventParameters {
    receiptId: string;
}
/**
 * Gets a list of transfer events for a set of Near payment details
 */
export declare class NearConversionInfoRetriever extends NearInfoRetriever {
    protected requestCurrency: CurrencyDefinition;
    protected paymentReference: string;
    protected toAddress: string;
    protected proxyContractName: string;
    protected eventName: PaymentTypes.EVENTS_NAMES;
    protected network: string;
    protected maxRateTimespan: number;
    /**
     * @param paymentReference The reference to identify the payment
     * @param toAddress Address to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param network The id of network we want to check
     */
    constructor(requestCurrency: CurrencyDefinition, paymentReference: string, toAddress: string, proxyContractName: string, eventName: PaymentTypes.EVENTS_NAMES, network: string, maxRateTimespan?: number);
    getTransferEvents(): Promise<PaymentTypes.IPaymentNetworkEvent<NearSubGraphPaymentEvent>[]>;
}
export {};
//# sourceMappingURL=near-conversion-info-retriever.d.ts.map