import { CurrencyDefinition } from '@requestnetwork/currency';
import { ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { BigNumber, BigNumberish, Contract } from 'ethers';
import { LogDescription } from 'ethers/lib/utils';
import { ContractArtifact, DeploymentInformation } from '@requestnetwork/smart-contracts';
/**
 * Converts the Log's args from array to an object with keys being the name of the arguments
 */
export declare const parseLogArgs: <T>({ args, eventFragment }: LogDescription) => T;
/**
 * Pads an amount to match Chainlink's own currency decimals (eg. for fiat amounts).
 */
export declare const padAmountForChainlink: (amount: BigNumberish, currency: Pick<CurrencyDefinition, 'decimals' | 'type'>) => BigNumber;
export declare const unpadAmountFromChainlink: (amount: BigNumberish, currency: Pick<CurrencyDefinition, 'decimals' | 'type'>) => BigNumber;
export declare type DeploymentInformationWithVersion = DeploymentInformation & {
    contractVersion: string;
};
export declare type GetDeploymentInformation<TAllowUndefined extends boolean> = (network: string, paymentNetworkVersion: string) => TAllowUndefined extends false ? DeploymentInformationWithVersion : DeploymentInformationWithVersion | null;
export declare const makeGetDeploymentInformation: <TVersion extends string = string, TAllowUndefined extends boolean = false>(artifact: ContractArtifact<Contract>, map: Record<string, TVersion>, allowUndefined?: TAllowUndefined | undefined) => GetDeploymentInformation<TAllowUndefined>;
export declare const hashReference: (paymentReference: string) => string;
/**
 * Returns escrow status based on array of escrow events
 * @param escrowEvents Balance of the request being updated
 * @returns
 */
export declare const calculateEscrowState: (escrowEvents: PaymentTypes.EscrowNetworkEvent[]) => PaymentTypes.ESCROW_STATE | null;
/**
 * Return the payment network extension of a Request.
 */
export declare function getPaymentNetworkExtension<T = any>(request: Pick<RequestLogicTypes.IRequest, 'extensions'>): ExtensionTypes.IPaymentNetworkState<T> | undefined;
/** Gets a payment (or refund) reference for any type of Request */
export declare function getPaymentReference(request: Pick<RequestLogicTypes.IRequest, 'extensions' | 'requestId'>, event?: PaymentTypes.EVENTS_NAMES): string | undefined;
/** Alias to ethers.utils.getAddress that adds the key to error message, and supports nullish values */
export declare const formatAddress: {
    (address: string | null | undefined, key?: string, allowsUndefined?: false): string;
    (address: string | null | undefined, key?: string, allowsUndefined?: true): string | undefined;
};
//# sourceMappingURL=utils.d.ts.map