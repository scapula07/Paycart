import { ExtensionTypes } from '@requestnetwork/types';
import { FeeReferenceBasedDetector } from './fee-reference-based-detector';
import { ICurrencyManager } from '@requestnetwork/currency';
/**
 * Abstract class to extend to get the payment balance of conversion requests
 */
export declare abstract class AnyToAnyDetector<TExtension extends ExtensionTypes.PnFeeReferenceBased.IFeeReferenceBased, TPaymentEventParameters extends Partial<ExtensionTypes.PnFeeReferenceBased.IAddFeeParameters>> extends FeeReferenceBasedDetector<TExtension, TPaymentEventParameters> {
    /**
     * @param extension The advanced logic payment network extension, with conversion
     */
    protected constructor(paymentNetworkId: ExtensionTypes.PAYMENT_NETWORK_ID, extension: TExtension, currencyManager: ICurrencyManager);
    /**
     * Creates the extensions data for the creation of this extension.
     * Will set a salt if none is already given
     *
     * @param paymentNetworkCreationParameters Parameters to create the extension
     * @returns The extensionData object
     */
    createExtensionsDataForCreation(paymentNetworkCreationParameters: ExtensionTypes.PnAnyToAnyConversion.ICreationParameters): Promise<ExtensionTypes.IAction>;
}
//# sourceMappingURL=any-to-any-detector.d.ts.map