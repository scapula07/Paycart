"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultProvider = exports.setProviderFactory = exports.initPaymentDetectionApiKeys = void 0;
const ethers_1 = require("ethers");
let warned = false;
/**
 * Default API_KEYS configuration, can be overriden using initPaymentDetectionApiKeys
 */
let providersApiKeys = {
    // fallback to Ethers v4 default projectId
    infura: () => process.env.RN_INFURA_KEY || '7d0d81d0919f4f05b9ab6634be01ee73',
};
/**
 * @param defaultProviderOptions Default Provider Options as specified in https://docs.ethers.io/v5/api/providers/#providers-getDefaultProvider  */
const initPaymentDetectionApiKeys = (defaultProviderOptions) => {
    providersApiKeys = Object.assign(Object.assign({}, providersApiKeys), defaultProviderOptions);
};
exports.initPaymentDetectionApiKeys = initPaymentDetectionApiKeys;
/**
 * Define default URLs for networks supported by Request payment detection but not by ethers' Infura Provider
 */
const networkRpcs = {
    private: ethers_1.providers.JsonRpcProvider.defaultUrl(),
    matic: 'https://polygon-rpc.com/',
    fantom: 'https://rpc.ftm.tools',
    fuse: 'https://rpc.fuse.io',
    bsctest: 'https://data-seed-prebsc-1-s1.binance.org:8545',
    bsc: 'https://bsc-dataseed1.binance.org/',
    xdai: 'https://rpc.xdaichain.com/',
    'arbitrum-rinkeby': 'https://rinkeby.arbitrum.io/rpc',
    'arbitrum-one': 'https://arb1.arbitrum.io/rpc',
    avalanche: 'https://api.avax.network/ext/bc/C/rpc',
};
/**
 * @see getDefaultProvider
 */
const defaultProviderFactory = (network) => {
    if (!network) {
        network = 'homestead';
    }
    // Returns environment variable override
    const envVar = (process === null || process === void 0 ? void 0 : process.env) ? process.env[`RN_WEB3_RPC_URL_${network.toUpperCase()}`] : null;
    if (envVar) {
        return envVar;
    }
    // check default RPCs
    if (networkRpcs[network]) {
        return networkRpcs[network];
    }
    // use infura, if supported
    try {
        // try getting the URL for the given network. Will throw if not supported.
        ethers_1.providers.InfuraProvider.getUrl(ethers_1.providers.getNetwork(network), {});
        const apiKey = typeof providersApiKeys.infura === 'function'
            ? providersApiKeys.infura()
            : providersApiKeys.infura;
        if (!apiKey && !warned) {
            console.warn(`No API Key specified for Infura, using ethers default API key.
      This is not recommended for Production environments.
      To override Infura's default api key, use RN_INFURA_KEY environment variable, or call
      initPaymentDetectionApiKeys({ infura: () => "myApiKey" });
      `);
            warned = true;
        }
        return new ethers_1.providers.InfuraProvider(network, apiKey);
    }
    catch (e) {
        // suppress errors
    }
    if (!warned) {
        console.warn(`No provider is specified for network ${network}, using ethers default provider. 
      This is not recommended for Production environments.
      Use setProviderFactory to override the default provider`);
        warned = true;
    }
    // use getDefaultProvider to keep the original behaviour
    return ethers_1.providers.getDefaultProvider(network, providersApiKeys);
};
/**
 * Defines the behaviour to obtain a Provider for a given Network.
 * May be overridden using setProviderFactory
 */
let currentProviderFactory = defaultProviderFactory;
/**
 * Override the default providerFactory, which relies mainly on Infura.
 * @param providerFactory if not specify, will reset to the default factory
 */
const setProviderFactory = (providerFactory) => {
    currentProviderFactory = providerFactory || defaultProviderFactory;
};
exports.setProviderFactory = setProviderFactory;
/**
 * Returns a Web3 Provider for the given `network`.
 *
 * Configuration options:
 * - Specify `RN_WEB3_RPC_URL_[NETWORK]` environment variable to override the default behaviour
 * - Specify `RN_INFURA_KEY` to override the default Infura API KEY (recommended)
 * - Use `initPaymentDetectionApiKeys` to override Infura API KEY when `RN_INFURA_KEY` is not usable
 * - Use `setProviderFactory` for more complex configurations with multiple networks
 *
 * @param network the blockchain network. See https://chainid.network/chains.json `network` field for reference
 */
const getDefaultProvider = (network) => {
    const provider = currentProviderFactory(network, defaultProviderFactory);
    if (typeof provider === 'string') {
        return new ethers_1.providers.StaticJsonRpcProvider(provider);
    }
    return provider;
};
exports.getDefaultProvider = getDefaultProvider;
//# sourceMappingURL=provider.js.map