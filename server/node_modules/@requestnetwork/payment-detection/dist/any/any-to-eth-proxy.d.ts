import { ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { AnyToAnyDetector } from '../any-to-any-detector';
import { PaymentNetworkOptions, ReferenceBasedDetectorOptions } from '../types';
/**
 * Handle payment networks with ETH input data extension
 */
export declare class AnyToEthFeeProxyPaymentDetector extends AnyToAnyDetector<ExtensionTypes.PnAnyToEth.IAnyToEth, PaymentTypes.IETHFeePaymentEventParameters> {
    private readonly getSubgraphClient;
    /**
     * @param extension The advanced logic payment network extensions
     */
    constructor({ advancedLogic, currencyManager, getSubgraphClient, }: ReferenceBasedDetectorOptions & Pick<PaymentNetworkOptions, 'getSubgraphClient'>);
    /**
     * Extracts payment events of an address matching an address and a payment reference
     *
     * @param toAddress Address to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param requestCurrency The request currency
     * @param paymentReference The reference to identify the payment
     * @param paymentNetwork the payment network
     * @returns The balance
     */
    protected extractEvents(eventName: PaymentTypes.EVENTS_NAMES, toAddress: string | undefined, paymentReference: string, requestCurrency: RequestLogicTypes.ICurrency, paymentChain: string, paymentNetwork: ExtensionTypes.IState<ExtensionTypes.PnAnyToEth.ICreationParameters>): Promise<PaymentTypes.AllNetworkEvents<PaymentTypes.IETHPaymentEventParameters>>;
    /**
     * Get the network of the payment
     *
     * @param requestCurrency The request currency
     * @param paymentNetwork the payment network
     * @returns The network of payment
     */
    protected getPaymentChain(request: RequestLogicTypes.IRequest): string;
    static getDeploymentInformation: import("../utils").GetDeploymentInformation<false>;
}
//# sourceMappingURL=any-to-eth-proxy.d.ts.map