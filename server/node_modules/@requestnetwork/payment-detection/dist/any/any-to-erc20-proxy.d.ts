import { ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { ERC20FeeProxyPaymentDetectorBase } from '../erc20/fee-proxy-contract';
import { PaymentNetworkOptions, ReferenceBasedDetectorOptions } from '../types';
/**
 * Handle payment networks with conversion proxy contract extension
 */
export declare class AnyToERC20PaymentDetector extends ERC20FeeProxyPaymentDetectorBase<ExtensionTypes.PnAnyToErc20.IAnyToERC20, PaymentTypes.IERC20FeePaymentEventParameters> {
    private readonly getSubgraphClient;
    /**
     * @param extension The advanced logic payment network extensions
     */
    constructor({ advancedLogic, currencyManager, getSubgraphClient, }: ReferenceBasedDetectorOptions & Pick<PaymentNetworkOptions, 'getSubgraphClient'>);
    /**
     * Creates the extensions data for the creation of this extension.
     * Will set a salt if none is already given
     *
     * @param paymentNetworkCreationParameters Parameters to create the extension
     * @returns The extensionData object
     */
    createExtensionsDataForCreation(paymentNetworkCreationParameters: PaymentTypes.IAnyToErc20CreationParameters): Promise<ExtensionTypes.IAction>;
    /**
     * Extracts the balance and events of a request
     *
     * @private
     * @param request Address to check
     * @param salt Payment reference salt
     * @param toAddress Payee address
     * @param eventName Indicate if it is an address for payment or refund
     * @param paymentNetwork Payment network state
     * @returns The balance and events
     */
    protected extractEvents(eventName: PaymentTypes.EVENTS_NAMES, toAddress: string | undefined, paymentReference: string, requestCurrency: RequestLogicTypes.ICurrency, paymentChain: string, paymentNetwork: ExtensionTypes.IState<ExtensionTypes.PnAnyToErc20.ICreationParameters>): Promise<PaymentTypes.AllNetworkEvents<PaymentTypes.IERC20FeePaymentEventParameters>>;
    protected getPaymentChain(request: RequestLogicTypes.IRequest): string;
    static getDeploymentInformation: import("../utils").GetDeploymentInformation<false>;
}
//# sourceMappingURL=any-to-erc20-proxy.d.ts.map