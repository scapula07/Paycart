"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeclarativePaymentDetector = exports.DeclarativePaymentDetectorBase = void 0;
const tslib_1 = require("tslib");
const types_1 = require("@requestnetwork/types");
const utils_1 = require("@requestnetwork/utils");
const payment_detector_base_1 = require("./payment-detector-base");
/**
 * Handles payment detection for a declarative request, or derived.
 */
class DeclarativePaymentDetectorBase extends payment_detector_base_1.PaymentDetectorBase {
    constructor(_paymentNetworkId, extension) {
        super(_paymentNetworkId, extension);
    }
    /**
     * Creates the extensions data for the creation of this extension
     *
     * @param any paymentNetworkCreationParameters
     * @param paymentNetworkCreationParameters Parameters to create the extension
     * @returns The extensionData object
     */
    createExtensionsDataForCreation(paymentNetworkCreationParameters) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            return this.extension.createCreationAction({
                paymentInfo: paymentNetworkCreationParameters.paymentInfo,
                refundInfo: paymentNetworkCreationParameters.refundInfo,
                salt: paymentNetworkCreationParameters.salt,
            });
        });
    }
    /**
     * Creates the extensions data to add payment info
     *
     * @param Parameters to add payment information
     * @returns The extensionData object
     */
    createExtensionsDataForAddPaymentInformation(parameters) {
        return this.extension.createAddPaymentInstructionAction({
            paymentInfo: parameters.paymentInfo,
        });
    }
    /**
     * Creates the extensions data to add refund info
     *
     * @param Parameters to add refund information
     * @returns The extensionData object
     */
    createExtensionsDataForAddRefundInformation(parameters) {
        return this.extension.createAddRefundInstructionAction({
            refundInfo: parameters.refundInfo,
        });
    }
    /**
     * Creates the extensions data to declare a payment is sent
     *
     * @param Parameters to declare sent payment
     * @returns The extensionData object
     */
    createExtensionsDataForDeclareSentPayment(parameters) {
        return this.extension.createDeclareSentPaymentAction({
            amount: parameters.amount,
            note: parameters.note,
            txHash: parameters.txHash,
            network: parameters.network,
        });
    }
    /**
     * Creates the extensions data to declare a refund is sent
     *
     * @param Parameters to declare sent refund
     * @returns The extensionData object
     */
    createExtensionsDataForDeclareSentRefund(parameters) {
        return this.extension.createDeclareSentRefundAction({
            amount: parameters.amount,
            note: parameters.note,
            txHash: parameters.txHash,
            network: parameters.network,
        });
    }
    /**
     * Creates the extensions data to declare a payment is received
     *
     * @param Parameters to declare received payment
     * @returns The extensionData object
     */
    createExtensionsDataForDeclareReceivedPayment(parameters) {
        return this.extension.createDeclareReceivedPaymentAction({
            amount: parameters.amount,
            note: parameters.note,
            txHash: parameters.txHash,
            network: parameters.network,
        });
    }
    /**
     * Creates the extensions data to declare a refund is received
     *
     * @param Parameters to declare received refund
     * @returns The extensionData object
     */
    createExtensionsDataForDeclareReceivedRefund(parameters) {
        return this.extension.createDeclareReceivedRefundAction({
            amount: parameters.amount,
            note: parameters.note,
            txHash: parameters.txHash,
            network: parameters.network,
        });
    }
    /**
     * Creates the extensions data to declare a delegate
     *
     * @param Parameters to declare declare a delegate
     * @returns The extensionData object
     */
    createExtensionsDataForAddDelegate(parameters) {
        return this.extension.createAddDelegateAction({
            delegate: parameters.delegate,
        });
    }
    /**
     * The balance of a request using declarative payment network is the sum of declared received payments
     * subtracted by the sum of the declared received refund
     */
    getDeclarativeEvents(request) {
        var _a;
        const events = (_a = this.getPaymentExtension(request).events) !== null && _a !== void 0 ? _a : [];
        // For each extension data related to the declarative payment network,
        // Received payment increase the balance and received refund decrease the balance
        return events
            .map((data) => {
            const { amount, txHash, network, note } = data.parameters;
            const nameMap = {
                [types_1.ExtensionTypes.PnAnyDeclarative.ACTION.DECLARE_RECEIVED_PAYMENT]: types_1.PaymentTypes.EVENTS_NAMES.PAYMENT,
                [types_1.ExtensionTypes.PnAnyDeclarative.ACTION.DECLARE_RECEIVED_REFUND]: types_1.PaymentTypes.EVENTS_NAMES.REFUND,
            };
            const name = nameMap[data.name];
            if (name) {
                return {
                    amount,
                    name,
                    parameters: {
                        txHash,
                        network,
                        note,
                        from: data.from,
                    },
                    timestamp: data.timestamp,
                };
            }
            return null;
        })
            .filter(utils_1.default.notNull);
    }
}
exports.DeclarativePaymentDetectorBase = DeclarativePaymentDetectorBase;
/**
 * Handles payment detection for a declarative request
 */
class DeclarativePaymentDetector extends DeclarativePaymentDetectorBase {
    constructor({ advancedLogic }) {
        super(types_1.ExtensionTypes.PAYMENT_NETWORK_ID.ANY_DECLARATIVE, advancedLogic.extensions.declarative);
    }
    getEvents(request) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            return {
                paymentEvents: this.getDeclarativeEvents(request),
            };
        });
    }
}
exports.DeclarativePaymentDetector = DeclarativePaymentDetector;
//# sourceMappingURL=declarative.js.map