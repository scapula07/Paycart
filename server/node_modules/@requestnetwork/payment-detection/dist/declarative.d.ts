import { AdvancedLogicTypes, ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { PaymentDetectorBase } from './payment-detector-base';
/**
 * Handles payment detection for a declarative request, or derived.
 */
export declare abstract class DeclarativePaymentDetectorBase<TExtension extends ExtensionTypes.PnAnyDeclarative.IAnyDeclarative, TPaymentEventParameters extends PaymentTypes.IDeclarativePaymentEventParameters<unknown>> extends PaymentDetectorBase<TExtension, TPaymentEventParameters> {
    protected constructor(_paymentNetworkId: ExtensionTypes.PAYMENT_NETWORK_ID, extension: TExtension);
    /**
     * Creates the extensions data for the creation of this extension
     *
     * @param any paymentNetworkCreationParameters
     * @param paymentNetworkCreationParameters Parameters to create the extension
     * @returns The extensionData object
     */
    createExtensionsDataForCreation(paymentNetworkCreationParameters: ExtensionTypes.PnAnyDeclarative.ICreationParameters): Promise<ExtensionTypes.IAction>;
    /**
     * Creates the extensions data to add payment info
     *
     * @param Parameters to add payment information
     * @returns The extensionData object
     */
    createExtensionsDataForAddPaymentInformation(parameters: ExtensionTypes.PnAnyDeclarative.IAddPaymentInstructionParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensions data to add refund info
     *
     * @param Parameters to add refund information
     * @returns The extensionData object
     */
    createExtensionsDataForAddRefundInformation(parameters: ExtensionTypes.PnAnyDeclarative.IAddRefundInstructionParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensions data to declare a payment is sent
     *
     * @param Parameters to declare sent payment
     * @returns The extensionData object
     */
    createExtensionsDataForDeclareSentPayment(parameters: ExtensionTypes.PnAnyDeclarative.ISentParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensions data to declare a refund is sent
     *
     * @param Parameters to declare sent refund
     * @returns The extensionData object
     */
    createExtensionsDataForDeclareSentRefund(parameters: ExtensionTypes.PnAnyDeclarative.ISentParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensions data to declare a payment is received
     *
     * @param Parameters to declare received payment
     * @returns The extensionData object
     */
    createExtensionsDataForDeclareReceivedPayment(parameters: ExtensionTypes.PnAnyDeclarative.IReceivedParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensions data to declare a refund is received
     *
     * @param Parameters to declare received refund
     * @returns The extensionData object
     */
    createExtensionsDataForDeclareReceivedRefund(parameters: ExtensionTypes.PnAnyDeclarative.IReceivedParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensions data to declare a delegate
     *
     * @param Parameters to declare declare a delegate
     * @returns The extensionData object
     */
    createExtensionsDataForAddDelegate(parameters: ExtensionTypes.PnAnyDeclarative.IAddDelegateParameters): ExtensionTypes.IAction;
    /**
     * The balance of a request using declarative payment network is the sum of declared received payments
     * subtracted by the sum of the declared received refund
     */
    protected getDeclarativeEvents(request: RequestLogicTypes.IRequest): PaymentTypes.DeclarativePaymentNetworkEvent[];
}
/**
 * Handles payment detection for a declarative request
 */
export declare class DeclarativePaymentDetector extends DeclarativePaymentDetectorBase<ExtensionTypes.PnAnyDeclarative.IAnyDeclarative, PaymentTypes.IDeclarativePaymentEventParameters> {
    constructor({ advancedLogic }: {
        advancedLogic: AdvancedLogicTypes.IAdvancedLogic;
    });
    protected getEvents(request: RequestLogicTypes.IRequest): Promise<PaymentTypes.AllNetworkEvents<PaymentTypes.IDeclarativePaymentEventParameters>>;
}
//# sourceMappingURL=declarative.d.ts.map