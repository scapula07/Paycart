import { PaymentTypes } from '@requestnetwork/types';
import { IPaymentRetriever } from '../types';
import { ethers } from 'ethers';
/**
 * Retrieves a list of payment events from a payment reference, a destination address, a token address and a proxy contract
 */
export declare class EthProxyInfoRetriever implements IPaymentRetriever<PaymentTypes.ETHPaymentNetworkEvent> {
    private paymentReference;
    private proxyContractAddress;
    private proxyCreationBlockNumber;
    private toAddress;
    private eventName;
    private network;
    contractProxy: ethers.Contract;
    provider: ethers.providers.Provider;
    /**
     * @param paymentReference The reference to identify the payment
     * @param proxyContractAddress The address of the proxy contract
     * @param proxyCreationBlockNumber The block that created the proxy contract
     * @param toAddress Address of the balance we want to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param network The Ethereum network to use
     */
    constructor(paymentReference: string, proxyContractAddress: string, proxyCreationBlockNumber: number, toAddress: string, eventName: PaymentTypes.EVENTS_NAMES, network: string);
    /**
     * Retrieves transfer events for the current contract, address and network.
     */
    getTransferEvents(): Promise<PaymentTypes.ETHPaymentNetworkEvent[]>;
}
//# sourceMappingURL=proxy-info-retriever.d.ts.map