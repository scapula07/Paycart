"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthProxyInfoRetriever = void 0;
const tslib_1 = require("tslib");
const ethers_1 = require("ethers");
const provider_1 = require("../provider");
const utils_1 = require("../utils");
// The Ethereum proxy smart contract ABI fragment containing TransferWithReference event
const ethProxyContractAbiFragment = [
    'event TransferWithReference(address to,uint256 amount,bytes indexed paymentReference)',
    'event TransferWithReferenceAndFee(address to,uint256 amount,bytes indexed paymentReference,uint256 feeAmount,address feeAddress)',
];
/**
 * Retrieves a list of payment events from a payment reference, a destination address, a token address and a proxy contract
 */
class EthProxyInfoRetriever {
    /**
     * @param paymentReference The reference to identify the payment
     * @param proxyContractAddress The address of the proxy contract
     * @param proxyCreationBlockNumber The block that created the proxy contract
     * @param toAddress Address of the balance we want to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param network The Ethereum network to use
     */
    constructor(paymentReference, proxyContractAddress, proxyCreationBlockNumber, toAddress, eventName, network) {
        this.paymentReference = paymentReference;
        this.proxyContractAddress = proxyContractAddress;
        this.proxyCreationBlockNumber = proxyCreationBlockNumber;
        this.toAddress = toAddress;
        this.eventName = eventName;
        this.network = network;
        // Creates a local or default provider
        this.provider = (0, provider_1.getDefaultProvider)(this.network);
        // Setup the Ethereum proxy contract interface
        this.contractProxy = new ethers_1.ethers.Contract(this.proxyContractAddress, ethProxyContractAbiFragment, this.provider);
    }
    /**
     * Retrieves transfer events for the current contract, address and network.
     */
    getTransferEvents() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            // Create a filter to find all the Transfer logs for the toAddress
            const filter = this.contractProxy.filters.TransferWithReference(null, null, '0x' + this.paymentReference);
            filter.fromBlock = this.proxyCreationBlockNumber;
            filter.toBlock = 'latest';
            // Get the event logs
            const proxyLogs = yield this.provider.getLogs(filter);
            // Create a filter to find all the Fee Transfer logs with the payment reference
            const feeFilter = this.contractProxy.filters.TransferWithReferenceAndFee(null, null, '0x' + this.paymentReference, null, null);
            feeFilter.fromBlock = this.proxyCreationBlockNumber;
            feeFilter.toBlock = 'latest';
            // Get the fee proxy contract event logs
            const feeProxyLogs = yield this.provider.getLogs(feeFilter);
            // Merge both events
            const logs = [...proxyLogs, ...feeProxyLogs];
            // Parses, filters and creates the events from the logs of the proxy contract
            const eventPromises = logs
                // Parses the logs
                .map((log) => {
                const parsedLog = this.contractProxy.interface.parseLog(log);
                return {
                    parsedLog: (0, utils_1.parseLogArgs)(parsedLog),
                    blockNumber: log.blockNumber,
                    transactionHash: log.transactionHash,
                };
            })
                // Keeps only the log with the right token and the right destination address
                .filter(({ parsedLog }) => parsedLog.to.toLowerCase() === this.toAddress.toLowerCase())
                // Creates the balance events
                .map(({ parsedLog, blockNumber, transactionHash }) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                var _a;
                return ({
                    amount: parsedLog.amount.toString(),
                    name: this.eventName,
                    parameters: {
                        block: blockNumber,
                        txHash: transactionHash,
                        to: this.toAddress,
                        feeAddress: parsedLog.feeAddress,
                        feeAmount: ((_a = parsedLog.feeAmount) === null || _a === void 0 ? void 0 : _a.toString()) || undefined,
                    },
                    timestamp: (yield this.provider.getBlock(blockNumber || 0)).timestamp,
                });
            }));
            return yield Promise.all(eventPromises);
        });
    }
}
exports.EthProxyInfoRetriever = EthProxyInfoRetriever;
//# sourceMappingURL=proxy-info-retriever.js.map