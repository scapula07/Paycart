"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthInputDataInfoRetriever = void 0;
const tslib_1 = require("tslib");
const multichainExplorerApiProvider_1 = require("./multichainExplorerApiProvider");
/**
 * Gets a list of transfer events for an address and payment reference
 */
class EthInputDataInfoRetriever {
    /**
     * @param toAddress Address to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param network The id of network we want to check
     * @param paymentReference The reference to identify the payment
     * @param explorerApiKey The explorer (etherscan...) API key
     */
    constructor(toAddress, eventName, network, paymentReference, explorerApiKey) {
        this.toAddress = toAddress;
        this.eventName = eventName;
        this.network = network;
        this.paymentReference = paymentReference;
        this.explorerApiKey = explorerApiKey;
    }
    getTransferEvents() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (this.network === 'private') {
                throw new Error('ETH input data info-retriever works with etherscan and cannot work on a local network');
            }
            const provider = new multichainExplorerApiProvider_1.MultichainExplorerApiProvider(this.network, this.explorerApiKey);
            const history = yield provider.getHistory(this.toAddress);
            const events = history
                // remove potential duplicates (eg. if sender and receiver are the same)
                .filter((transaction, index) => history.findIndex((x) => x.hash === transaction.hash) === index)
                // keep only when address is the destination
                .filter((transaction) => transaction.to && transaction.to.toLowerCase() === this.toAddress.toLowerCase())
                // keep only if data contains the payment reference
                .filter((transaction) => transaction.data.toLowerCase() === '0x' + this.paymentReference.toLowerCase())
                .map((transaction) => ({
                amount: transaction.value.toString(),
                name: this.eventName,
                parameters: {
                    block: transaction.blockNumber,
                    confirmations: transaction.confirmations,
                    txHash: transaction.hash,
                },
                timestamp: transaction.timestamp,
            }));
            return events;
        });
    }
}
exports.EthInputDataInfoRetriever = EthInputDataInfoRetriever;
//# sourceMappingURL=info-retriever.js.map