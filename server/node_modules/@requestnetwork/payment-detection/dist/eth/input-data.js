"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthInputDataPaymentDetector = void 0;
const tslib_1 = require("tslib");
const SmartContracts = require("@requestnetwork/smart-contracts");
const types_1 = require("@requestnetwork/types");
const info_retriever_1 = require("./info-retriever");
const proxy_info_retriever_1 = require("./proxy-info-retriever");
const reference_based_detector_1 = require("../reference-based-detector");
const utils_1 = require("../utils");
const thegraph_1 = require("../thegraph");
// the versions 0.1.0 and 0.2.0 have the same contracts
const PROXY_CONTRACT_ADDRESS_MAP = {
    ['0.1.0']: '0.1.0',
    ['0.2.0']: '0.1.0',
    ['0.3.0']: '0.3.0',
};
/**
 * Handle payment networks with ETH input data extension
 */
class EthInputDataPaymentDetector extends reference_based_detector_1.ReferenceBasedDetector {
    /**
     * @param extension The advanced logic payment network extensions
     */
    constructor({ advancedLogic, currencyManager, explorerApiKeys, getSubgraphClient, }) {
        super(types_1.ExtensionTypes.PAYMENT_NETWORK_ID.ETH_INPUT_DATA, advancedLogic.extensions.ethereumInputData, currencyManager);
        this.explorerApiKeys = explorerApiKeys || {};
        this.getSubgraphClient = getSubgraphClient;
    }
    /**
     * Extracts payment events of an address matching an address and a payment reference
     *
     * @param toAddress Address to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param requestCurrency The request currency
     * @param paymentReference The reference to identify the payment
     * @param paymentNetwork the payment network
     * @returns The balance
     */
    extractEvents(eventName, toAddress, paymentReference, _requestCurrency, paymentChain, paymentNetwork) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (!toAddress) {
                return {
                    paymentEvents: [],
                };
            }
            const infoRetriever = new info_retriever_1.EthInputDataInfoRetriever(toAddress, eventName, paymentChain, paymentReference, this.explorerApiKeys[paymentChain]);
            const events = yield infoRetriever.getTransferEvents();
            const proxyContractArtifact = EthInputDataPaymentDetector.getDeploymentInformation(paymentChain, paymentNetwork.version);
            let allEvents;
            let escrowEvents = [];
            if (proxyContractArtifact) {
                const subgraphClient = this.getSubgraphClient(paymentChain);
                if (subgraphClient) {
                    const graphInfoRetriever = new thegraph_1.TheGraphInfoRetriever(subgraphClient, this.currencyManager);
                    allEvents = yield graphInfoRetriever.getTransferEvents({
                        paymentReference,
                        contractAddress: proxyContractArtifact.address,
                        toAddress,
                        eventName,
                        paymentChain,
                    });
                }
                else {
                    const ethInfoRetriever = new proxy_info_retriever_1.EthProxyInfoRetriever(paymentReference, proxyContractArtifact.address, proxyContractArtifact.creationBlockNumber, toAddress, eventName, paymentChain);
                    const paymentEvents = yield ethInfoRetriever.getTransferEvents();
                    allEvents = {
                        paymentEvents,
                    };
                }
                events.push(...allEvents.paymentEvents);
                escrowEvents = allEvents.escrowEvents;
            }
            return {
                paymentEvents: events,
                escrowEvents: escrowEvents,
            };
        });
    }
}
exports.EthInputDataPaymentDetector = EthInputDataPaymentDetector;
/*
 * Returns deployment information for the underlying smart contract for a given payment network version
 */
EthInputDataPaymentDetector.getDeploymentInformation = (0, utils_1.makeGetDeploymentInformation)(SmartContracts.ethereumProxyArtifact, PROXY_CONTRACT_ADDRESS_MAP, true);
//# sourceMappingURL=input-data.js.map