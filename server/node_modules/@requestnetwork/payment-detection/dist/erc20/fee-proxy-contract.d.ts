import { ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { CurrencyDefinition, ICurrencyManager } from '@requestnetwork/currency';
import { FeeReferenceBasedDetector } from '../fee-reference-based-detector';
import { PaymentNetworkOptions, ReferenceBasedDetectorOptions } from '../types';
/**
 * Handle payment networks with ERC20 fee proxy contract extension, or derived
 */
export declare abstract class ERC20FeeProxyPaymentDetectorBase<TExtension extends ExtensionTypes.PnFeeReferenceBased.IFeeReferenceBased, TPaymentEventParameters extends PaymentTypes.IERC20FeePaymentEventParameters> extends FeeReferenceBasedDetector<TExtension, TPaymentEventParameters> {
    /**
     * @param extension The advanced logic payment network extensions
     */
    protected constructor(paymentNetworkId: ExtensionTypes.PAYMENT_NETWORK_ID, extension: TExtension, currencyManager: ICurrencyManager);
    protected getCurrency(storageCurrency: RequestLogicTypes.ICurrency): Promise<CurrencyDefinition>;
}
/**
 * Handle payment networks with ERC20 fee proxy contract extension
 */
export declare class ERC20FeeProxyPaymentDetector extends ERC20FeeProxyPaymentDetectorBase<ExtensionTypes.PnFeeReferenceBased.IFeeReferenceBased, PaymentTypes.IERC20FeePaymentEventParameters> {
    private readonly getSubgraphClient;
    constructor({ advancedLogic, currencyManager, getSubgraphClient, }: ReferenceBasedDetectorOptions & Pick<PaymentNetworkOptions, 'getSubgraphClient'>);
    /**
     * Extracts the payment events of a request
     */
    protected extractEvents(eventName: PaymentTypes.EVENTS_NAMES, toAddress: string | undefined, paymentReference: string, requestCurrency: RequestLogicTypes.ICurrency, paymentChain: string, paymentNetwork: ExtensionTypes.IState<ExtensionTypes.PnFeeReferenceBased.ICreationParameters>): Promise<PaymentTypes.AllNetworkEvents<PaymentTypes.IERC20FeePaymentEventParameters>>;
    static getDeploymentInformation: import("../utils").GetDeploymentInformation<false>;
}
//# sourceMappingURL=fee-proxy-contract.d.ts.map