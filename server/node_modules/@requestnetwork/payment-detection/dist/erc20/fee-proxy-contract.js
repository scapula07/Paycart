"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC20FeeProxyPaymentDetector = exports.ERC20FeeProxyPaymentDetectorBase = void 0;
const tslib_1 = require("tslib");
const smart_contracts_1 = require("@requestnetwork/smart-contracts");
const types_1 = require("@requestnetwork/types");
const proxy_info_retriever_1 = require("./proxy-info-retriever");
const currency_1 = require("./currency");
const fee_reference_based_detector_1 = require("../fee-reference-based-detector");
const utils_1 = require("../utils");
const thegraph_1 = require("../thegraph");
const PROXY_CONTRACT_ADDRESS_MAP = {
    ['0.1.0']: '0.1.0',
    ['0.2.0']: '0.2.0',
};
/**
 * Handle payment networks with ERC20 fee proxy contract extension, or derived
 */
class ERC20FeeProxyPaymentDetectorBase extends fee_reference_based_detector_1.FeeReferenceBasedDetector {
    /**
     * @param extension The advanced logic payment network extensions
     */
    constructor(paymentNetworkId, extension, currencyManager) {
        super(paymentNetworkId, extension, currencyManager);
    }
    getCurrency(storageCurrency) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const currency = this.currencyManager.fromStorageCurrency(storageCurrency);
            if (currency) {
                return currency;
            }
            if (storageCurrency.type !== types_1.RequestLogicTypes.CURRENCY.ERC20) {
                throw new Error(`Currency ${storageCurrency.value} not known`);
            }
            const contractCurrency = yield (0, currency_1.loadCurrencyFromContract)(storageCurrency);
            if (!contractCurrency) {
                throw new Error(`Cannot retrieve currency for contrat ${storageCurrency.value} (${storageCurrency.network})`);
            }
            return contractCurrency;
        });
    }
}
exports.ERC20FeeProxyPaymentDetectorBase = ERC20FeeProxyPaymentDetectorBase;
/**
 * Handle payment networks with ERC20 fee proxy contract extension
 */
class ERC20FeeProxyPaymentDetector extends ERC20FeeProxyPaymentDetectorBase {
    constructor({ advancedLogic, currencyManager, getSubgraphClient, }) {
        super(types_1.ExtensionTypes.PAYMENT_NETWORK_ID.ERC20_FEE_PROXY_CONTRACT, advancedLogic.extensions.feeProxyContractErc20, currencyManager);
        this.getSubgraphClient = getSubgraphClient;
    }
    /**
     * Extracts the payment events of a request
     */
    extractEvents(eventName, toAddress, paymentReference, requestCurrency, paymentChain, paymentNetwork) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (!toAddress) {
                return Promise.resolve({
                    paymentEvents: [],
                });
            }
            const { address: proxyContractAddress, creationBlockNumber: proxyCreationBlockNumber } = ERC20FeeProxyPaymentDetector.getDeploymentInformation(paymentChain, paymentNetwork.version);
            const subgraphClient = this.getSubgraphClient(paymentChain);
            if (subgraphClient) {
                const graphInfoRetriever = new thegraph_1.TheGraphInfoRetriever(subgraphClient, this.currencyManager);
                return graphInfoRetriever.getTransferEvents({
                    eventName,
                    paymentReference,
                    toAddress,
                    contractAddress: proxyContractAddress,
                    paymentChain,
                });
            }
            else {
                const proxyInfoRetriever = new proxy_info_retriever_1.default(paymentReference, proxyContractAddress, proxyCreationBlockNumber, requestCurrency.value, toAddress, eventName, paymentChain);
                const paymentEvents = yield proxyInfoRetriever.getTransferEvents();
                return {
                    paymentEvents,
                };
            }
        });
    }
}
exports.ERC20FeeProxyPaymentDetector = ERC20FeeProxyPaymentDetector;
/*
 * Returns deployment information for the underlying smart contract for a given payment network version
 */
ERC20FeeProxyPaymentDetector.getDeploymentInformation = (0, utils_1.makeGetDeploymentInformation)(smart_contracts_1.erc20FeeProxyArtifact, PROXY_CONTRACT_ADDRESS_MAP);
//# sourceMappingURL=fee-proxy-contract.js.map