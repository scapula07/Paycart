"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainSoProvider = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("@requestnetwork/utils");
const axios_1 = require("axios");
const converterBTC = require("satoshi-bitcoin");
const ethers_1 = require("ethers");
// Maximum number of api requests to retry when an error is encountered (ECONNRESET, EPIPE, ENOTFOUND)
const CHAINSO_REQUEST_MAX_RETRY = 3;
// Delay between retries in ms
const CHAINSO_REQUEST_RETRY_DELAY = 100;
/**
 * The Bitcoin Info retriever give access to the bitcoin blockchain through the api of chain.so
 */
class ChainSoProvider {
    /**
     * Gets BTC address info using chain.so public API
     *
     * @param bitcoinNetworkId The Bitcoin network ID: 0 (mainnet) or 3 (testnet)
     * @param address BTC address to check
     * @param eventName Indicates if it is an address for payment or refund
     * @returns Object containing address info
     */
    getAddressBalanceWithEvents(bitcoinNetworkId, address, eventName) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const baseUrl = this.getBaseUrl(bitcoinNetworkId);
            const queryUrl = `${baseUrl}${address}`;
            try {
                const res = yield utils_1.default.retry(() => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () { return axios_1.default.get(queryUrl); }), {
                    maxRetries: CHAINSO_REQUEST_MAX_RETRY,
                    retryDelay: CHAINSO_REQUEST_RETRY_DELAY,
                })();
                // eslint-disable-next-line no-magic-numbers
                if (res.status >= 400) {
                    throw new Error(`Error ${res.status}. Bad response from server ${queryUrl}`);
                }
                const data = res.data;
                if (data.status === 'fail') {
                    throw new Error(`Error bad response from ${baseUrl}: ${data.message}`);
                }
                return this.parse(data, eventName);
            }
            catch (err) {
                // eslint-disable-next-line no-console
                console.warn(err.message || err);
                return { balance: '-1', events: [] };
            }
        });
    }
    /**
     * Parses the address information from the data of chain.so
     *
     * @param addressInfo Data of chain.so
     * @param eventName Indicates if it is an address for payment or refund
     * @returns Balance with events
     */
    parse(addressInfo, eventName) {
        const events = addressInfo.data.txs
            // keep only the transaction with value incoming to the address
            .filter((tx) => tx.incoming !== undefined)
            // delete transactions that are from this address
            .filter((tx) => tx.outgoing === undefined)
            .map((tx) => ({
            amount: converterBTC.toSatoshi(tx.incoming.value).toString(),
            name: eventName,
            parameters: {
                block: tx.block_no,
                txHash: tx.txid,
            },
            timestamp: tx.time,
        }));
        // Compute the balance making the sum of all the transactions amount
        const balance = events
            .reduce((balanceAccumulator, event) => {
            return balanceAccumulator.add(ethers_1.BigNumber.from(event.amount));
        }, ethers_1.BigNumber.from('0'))
            .toString();
        return { balance, events };
    }
    /**
     * Gets the base url to fetch according to the networkId
     *
     * @param bitcoinNetworkId the Bitcoin network ID: 0 (mainnet) or 3 (testnet)
     * @returns The chain.so info URL
     */
    getBaseUrl(bitcoinNetworkId) {
        if (bitcoinNetworkId === 0) {
            return 'https://chain.so/api/v2/address/BTC/';
        }
        if (bitcoinNetworkId === 3) {
            return 'https://chain.so/api/v2/address/BTCTEST/';
        }
        throw new Error(`Invalid network 0 (mainnet) or 3 (testnet) was expected but ${bitcoinNetworkId} was given`);
    }
}
exports.ChainSoProvider = ChainSoProvider;
//# sourceMappingURL=chain-so.js.map