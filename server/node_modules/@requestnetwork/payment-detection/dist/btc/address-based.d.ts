import { ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { PaymentDetectorBase } from '../payment-detector-base';
/**
 * Handle payment networks with BTC based address extension
 */
export declare abstract class BtcAddressBasedDetector extends PaymentDetectorBase<ExtensionTypes.PnAddressBased.IAddressBased<ExtensionTypes.PnAddressBased.ICreationParameters>, PaymentTypes.IBTCPaymentEventParameters> {
    private networkId;
    private bitcoinDetectionProvider;
    /**
     * @param extension The advanced logic payment network extensions
     */
    protected constructor(networkId: number, paymentNetworkId: ExtensionTypes.PAYMENT_NETWORK_ID, extension: ExtensionTypes.PnAddressBased.IAddressBased<ExtensionTypes.PnAddressBased.ICreationParameters>, bitcoinDetectionProvider?: PaymentTypes.IBitcoinDetectionProvider);
    /**
     * Creates the extensions data for the creation of this extension
     *
     * @param paymentNetworkCreationParameters Parameters to create the extension
     * @returns The extensionData object
     */
    createExtensionsDataForCreation(paymentNetworkCreationParameters: ExtensionTypes.PnAddressBased.ICreationParameters): Promise<ExtensionTypes.IAction>;
    /**
     * Creates the extensions data to add payment address
     *
     * @param Parameters to add payment information
     * @returns The extensionData object
     */
    createExtensionsDataForAddPaymentInformation(parameters: ExtensionTypes.PnAddressBased.IAddPaymentAddressParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensions data to add refund address
     *
     * @param Parameters to add refund information
     * @returns The extensionData object
     */
    createExtensionsDataForAddRefundInformation(parameters: ExtensionTypes.PnAddressBased.IAddRefundAddressParameters): ExtensionTypes.IAction;
    /**
     * Extracts the balance and events of an address
     *
     * @private
     * @param address Address to check
     * @param eventName Indicate if it is an address for payment or refund
     * @returns The balance
     */
    protected getEvents(request: RequestLogicTypes.IRequest): Promise<PaymentTypes.AllNetworkEvents<PaymentTypes.IBTCPaymentEventParameters>>;
}
//# sourceMappingURL=address-based.d.ts.map