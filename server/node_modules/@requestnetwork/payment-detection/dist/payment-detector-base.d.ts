import { BigNumber } from 'ethers';
import { ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
export declare abstract class PaymentDetectorBase<TExtension extends ExtensionTypes.IExtension, TPaymentEventParameters> implements PaymentTypes.IPaymentNetwork<TPaymentEventParameters> {
    readonly paymentNetworkId: ExtensionTypes.PAYMENT_NETWORK_ID;
    readonly extension: TExtension;
    protected constructor(paymentNetworkId: ExtensionTypes.PAYMENT_NETWORK_ID, extension: TExtension);
    abstract createExtensionsDataForCreation(paymentNetworkCreationParameters: PaymentTypes.PaymentNetworkCreateParameters['parameters']): Promise<any>;
    abstract createExtensionsDataForAddRefundInformation(parameters: any): any;
    abstract createExtensionsDataForAddPaymentInformation(parameters: any): any;
    /**
     * Gets the balance and the payment/refund events
     *
     * @param request the request to check
     * @returns the balance and the payment/refund events
     */
    getBalance(request: RequestLogicTypes.IRequest): Promise<PaymentTypes.IBalanceWithEvents<TPaymentEventParameters>>;
    /**
     * Gets all payment events for a given Request
     */
    protected abstract getEvents(request: RequestLogicTypes.IRequest): Promise<PaymentTypes.AllNetworkEvents<TPaymentEventParameters>>;
    protected getPaymentExtension(request: RequestLogicTypes.IRequest): TExtension extends ExtensionTypes.IExtension<infer X> ? ExtensionTypes.IState<X> : never;
    protected computeBalance(events: PaymentTypes.IPaymentNetworkEvent<unknown>[]): BigNumber;
    protected sortEvents(events: PaymentTypes.IPaymentNetworkEvent<TPaymentEventParameters>[]): PaymentTypes.IPaymentNetworkEvent<TPaymentEventParameters>[];
    protected sortEscrowEvents(events: PaymentTypes.EscrowNetworkEvent[]): PaymentTypes.EscrowNetworkEvent[];
    protected checkRequiredParameter<T>(value: T | undefined, name: string): asserts value is T;
}
//# sourceMappingURL=payment-detector-base.d.ts.map