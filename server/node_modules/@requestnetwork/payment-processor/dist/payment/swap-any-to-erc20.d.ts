import { ContractTransaction, Signer, providers } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { IRequestPaymentOptions } from './settings';
import { IPreparedTransaction } from './prepared-transaction';
export { ISwapSettings } from './swap-erc20-fee-proxy';
/**
 * Processes a transaction to swap tokens and pay an ERC20 Request through a proxy with fees.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param options to override amount, feeAmount and transaction parameters
 */
export declare function swapToPayAnyToErc20Request(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer | undefined, options: IRequestPaymentOptions): Promise<ContractTransaction>;
/**
 * Processes a transaction to swap tokens and pay an ERC20 Request through a proxy with fees.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param options to override amount, feeAmount and transaction parameters
 */
export declare function prepareSwapToPayAnyToErc20Request(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer | undefined, options: IRequestPaymentOptions): IPreparedTransaction;
/**
 * Encodes the call to pay a request through the ERC20 fee proxy contract, can be used with a Multisig contract.
 * @param request request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum
 * @param options to override amount, feeAmount and transaction parameters
 */
export declare function encodeSwapToPayAnyToErc20Request(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer | undefined, options: IRequestPaymentOptions): string;
//# sourceMappingURL=swap-any-to-erc20.d.ts.map