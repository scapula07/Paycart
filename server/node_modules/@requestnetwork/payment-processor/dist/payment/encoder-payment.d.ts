import { IRequestPaymentOptions } from './settings';
import { IPreparedTransaction } from './prepared-transaction';
import { providers } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
/**
 * Encodes a transaction to pay a Request in generic way. ERC777 stream excepted.
 * @param request the request data to pay
 * @param provider the Web3 provider. Defaults to window.ethereum.
 * @param options optionally, the request payment options.
 */
export declare function encodeRequestPayment(request: ClientTypes.IRequestData, provider: providers.Provider, options?: IRequestPaymentOptions): IPreparedTransaction;
/**
 * Encodes a transaction to pay a Request in generic way without swap.
 * @param request the request data to pay
 * @param options optionally, the request payment options.
 */
export declare function encodeRequestPaymentWithoutSwap(request: ClientTypes.IRequestData, options?: IRequestPaymentOptions): IPreparedTransaction;
/**
 * Encodes a transaction to pay a Request with ERC777 stream.
 * @param request the request data to pay
 * @param provider the Web3 provider. Defaults to window.ethereum.
 * @param options optionally, the request payment options.
 */
export declare function encodeRequestPaymentWithStream(request: ClientTypes.IRequestData, provider: providers.Provider, options?: IRequestPaymentOptions): Promise<IPreparedTransaction>;
/**
 * Encodes a transaction to pay a Request in generic way with swap.
 * @param request the request data to pay
 * @param provider the Web3 provider. Defaults to window.ethereum.
 * @param options optionally, the request payment options.
 */
export declare function encodeRequestPaymentWithSwap(request: ClientTypes.IRequestData, provider: providers.Provider, options: IRequestPaymentOptions): IPreparedTransaction;
//# sourceMappingURL=encoder-payment.d.ts.map