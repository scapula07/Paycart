import { ContractTransaction, Signer, providers, BigNumberish } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { ITransactionOverrides } from './transaction-overrides';
import { IPreparedTransaction } from './prepared-transaction';
import { IConversionPaymentSettings } from './index';
/**
 * Processes a transaction to pay a request with a native token when the request is denominated in another currency
 * The payment is made by the ETH fee proxy contract.
 * @param request the request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param paymentSettings payment settings
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmount optionally, the fee amount to pay. Defaults to the fee amount.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function payAnyToEthProxyRequest(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer | undefined, paymentSettings: IConversionPaymentSettings, amount?: BigNumberish, feeAmount?: BigNumberish, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Encodes the call to pay a request with a native token when the request currency is different. The payment is made by the ETH fee proxy contract.
 * @param request request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param paymentSettings payment settings
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmountOverride optionally, the fee amount to pay. Defaults to the fee amount of the request.
 */
export declare function encodePayAnyToEthProxyRequest(request: ClientTypes.IRequestData, paymentSettings: IConversionPaymentSettings, amount?: BigNumberish, feeAmountOverride?: BigNumberish): string;
export declare function prepareAnyToEthProxyPaymentTransaction(request: ClientTypes.IRequestData, paymentSettings: IConversionPaymentSettings, amount?: BigNumberish, feeAmount?: BigNumberish): IPreparedTransaction;
//# sourceMappingURL=any-to-eth-proxy.d.ts.map