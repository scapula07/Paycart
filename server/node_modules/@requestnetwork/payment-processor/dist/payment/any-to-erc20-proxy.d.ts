import { ContractTransaction, Signer, providers, BigNumberish } from 'ethers';
import { CurrencyDefinition } from '@requestnetwork/currency';
import { ClientTypes } from '@requestnetwork/types';
import { ITransactionOverrides } from './transaction-overrides';
import { IPreparedTransaction } from './prepared-transaction';
import { IConversionPaymentSettings } from './index';
/**
 * Processes a transaction to pay a request with an ERC20 currency that is different from the request currency (eg. fiat).
 * The payment is made by the ERC20 Conversion fee proxy contract.
 * @param request The request to pay
 * @param signerOrProvider The Web3 provider, or signer. Defaults to window.ethereum.
 * @param paymentSettings The payment settings
 * @param amount Optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmount Optionally, the fee amount to pay. Defaults to the fee amount.
 * @param overrides Optionally, override default transaction values, like gas.
 */
export declare function payAnyToErc20ProxyRequest(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer | undefined, paymentSettings: IConversionPaymentSettings, amount?: BigNumberish, feeAmount?: BigNumberish, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Encodes the call to pay a request with an ERC20 currency that is different from the request currency (eg. fiat).
 * The payment is made by the ERC20 Conversion fee proxy contract.
 * @param request The request to pay
 * @param paymentSettings The payment settings
 * @param amount Optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmountOverride Optionally, the fee amount to pay. Defaults to the fee amount of the request.
 */
export declare function encodePayAnyToErc20ProxyRequest(request: ClientTypes.IRequestData, paymentSettings: IConversionPaymentSettings, amount?: BigNumberish, feeAmountOverride?: BigNumberish): string;
/**
 * It checks paymentSettings values, it get request's path and requestCurrency
 * @param request The request to pay
 * @param paymentSettings The payment settings
 * @param amount Optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmountOverride Optionally, the fee amount to pay. Defaults to the fee amount of the request.
 */
export declare function checkRequestAndGetPathAndCurrency(request: ClientTypes.IRequestData, paymentSettings: IConversionPaymentSettings, amount?: BigNumberish, feeAmountOverride?: BigNumberish): {
    path: string[];
    requestCurrency: CurrencyDefinition<unknown>;
};
export declare function prepareAnyToErc20ProxyPaymentTransaction(request: ClientTypes.IRequestData, paymentSettings: IConversionPaymentSettings, amount?: BigNumberish, feeAmount?: BigNumberish): IPreparedTransaction;
//# sourceMappingURL=any-to-erc20-proxy.d.ts.map