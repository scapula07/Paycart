import { IRequestPaymentOptions } from './settings';
import { IPreparedTransaction } from './prepared-transaction';
import { providers } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
/**
 * For a given request and user, encode an approval transaction if it is needed.
 * @param request the request
 * @param provider generic provider
 * @param from the user who will pay the request
 * @param options specific to the request payment (conversion, swapping, ...)
 */
export declare function encodeRequestErc20ApprovalIfNeeded(request: ClientTypes.IRequestData, provider: providers.Provider, from: string, options?: IRequestPaymentOptions): Promise<IPreparedTransaction | void>;
/**
 * For a given request, encode an approval transaction.
 * @param request the request
 * @param provider generic provider
 * @param options specific to the request payment (conversion, ...)
 */
export declare function encodeRequestErc20Approval(request: ClientTypes.IRequestData, provider: providers.Provider, options?: IRequestPaymentOptions): IPreparedTransaction | void;
/**
 * For a given request and user, encode an approval transaction if it is needed when swap is not used.
 * @param request the request
 * @param provider generic provider
 * @param from user who will pay the request
 * @param options specific to the request payment (conversion, swapping, ...)
 */
export declare function encodeRequestErc20ApprovalWithoutSwapIfNeeded(request: ClientTypes.IRequestData, provider: providers.Provider, from: string, options?: IRequestPaymentOptions): Promise<IPreparedTransaction | void>;
/**
 * For a given request and user, encode an approval transaction if it is needed when swap is used.
 * @param request the request
 * @param provider generic provider
 * @param from user who will pay the request
 * @param options specific to the request payment (conversion, swapping, ...)
 */
export declare function encodeRequestErc20ApprovalWithSwapIfNeeded(request: ClientTypes.IRequestData, provider: providers.Provider, from: string, options?: IRequestPaymentOptions): Promise<IPreparedTransaction | void>;
/**
 * For a given request, encode an approval transaction when swap is not used.
 * @param request the request
 * @param provider generic provider
 * @param options specific to the request payment (conversion, ...)
 */
export declare function encodeRequestErc20ApprovalWithoutSwap(request: ClientTypes.IRequestData, provider: providers.Provider, options?: IRequestPaymentOptions): IPreparedTransaction | void;
/**
 * For a given request, encode an approval transaction when swap is used.
 * @param request the request
 * @param provider generic provider
 * @param options specific to the request payment (conversion, swapping, ...)
 */
export declare function encodeRequestErc20ApprovalWithSwap(request: ClientTypes.IRequestData, provider: providers.Provider, options: IRequestPaymentOptions): IPreparedTransaction | void;
/**
 * Check if for a given request and user, an approval transaction is needed.
 * @param request the request
 * @param provider generic provider
 * @param from user who will make the payment
 * @param options specific to the request payment (conversion, ...)
 */
export declare function isRequestErc20ApprovalNeeded(request: ClientTypes.IRequestData, provider: providers.Provider, from: string, options?: IRequestPaymentOptions): Promise<boolean>;
/**
 * Check if for a given request and user, an approval transaction is needed when swap is not used.
 * @param request the request
 * @param provider generic provider
 * @param from user who will make the payment
 * @param options specific to the request payment (conversion, ...)
 */
export declare function isRequestErc20ApprovalWithoutSwapNeeded(request: ClientTypes.IRequestData, provider: providers.Provider, from: string, options?: IRequestPaymentOptions): Promise<boolean>;
/**
 * Check if for a given request and user, an approval transaction is needed when swap is used.
 * @param request the request
 * @param provider generic provider
 * @param from user who will make the payment
 * @param options specific to the request payment (conversion, swapping, ...)
 */
export declare function isRequestErc20ApprovalWithSwapNeeded(request: ClientTypes.IRequestData, provider: providers.Provider, from: string, options: IRequestPaymentOptions): Promise<boolean>;
//# sourceMappingURL=encoder-approval.d.ts.map