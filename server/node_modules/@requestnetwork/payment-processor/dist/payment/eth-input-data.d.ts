import { ContractTransaction, Signer, BigNumberish, providers } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { ITransactionOverrides } from './transaction-overrides';
import { IPreparedTransaction } from './prepared-transaction';
/**
 * processes the transaction to pay an ETH request.
 * @param request the request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function payEthInputDataRequest(request: ClientTypes.IRequestData, signerOrProvider?: providers.Provider | Signer, amount?: BigNumberish, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * processes the transaction to pay an ETH request.
 * @param request the request to pay
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function prepareEthInputDataRequest(request: ClientTypes.IRequestData, amount?: BigNumberish, overrides?: ITransactionOverrides): IPreparedTransaction;
/**
 * processes the transaction to pay an ETH request.
 * @param request the request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 */
export declare function _getEthPaymentUrl(request: ClientTypes.IRequestData, amount?: BigNumberish): string;
//# sourceMappingURL=eth-input-data.d.ts.map