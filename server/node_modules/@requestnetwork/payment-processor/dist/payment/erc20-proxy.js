"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareErc20ProxyPaymentTransaction = exports._getErc20ProxyPaymentUrl = exports.encodePayErc20Request = exports.payErc20ProxyRequest = void 0;
const tslib_1 = require("tslib");
const payment_detection_1 = require("@requestnetwork/payment-detection");
const types_1 = require("@requestnetwork/smart-contracts/types");
const types_2 = require("@requestnetwork/types");
const utils_1 = require("./utils");
/**
 * Processes a transaction to pay an ERC20 Request.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param overrides optionally, override default transaction values, like gas.
 */
function payErc20ProxyRequest(request, signerOrProvider = (0, utils_1.getProvider)(), amount, overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const { data, to, value } = prepareErc20ProxyPaymentTransaction(request, amount);
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        return signer.sendTransaction(Object.assign({ data, to, value }, overrides));
    });
}
exports.payErc20ProxyRequest = payErc20ProxyRequest;
/**
 * Encodes the call to pay a request through the ERC20 proxy contract, can be used with a Multisig contract.
 * @param request request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 */
function encodePayErc20Request(request, amount) {
    (0, utils_1.validateRequest)(request, types_2.ExtensionTypes.PAYMENT_NETWORK_ID.ERC20_PROXY_CONTRACT);
    const tokenAddress = request.currencyInfo.value;
    const { paymentReference, paymentAddress } = (0, utils_1.getRequestPaymentValues)(request);
    const amountToPay = (0, utils_1.getAmountToPay)(request, amount);
    const proxyContract = types_1.ERC20Proxy__factory.createInterface();
    return proxyContract.encodeFunctionData('transferFromWithReference', [
        tokenAddress,
        paymentAddress,
        amountToPay,
        `0x${paymentReference}`,
    ]);
}
exports.encodePayErc20Request = encodePayErc20Request;
/**
 * Return the EIP-681 format URL with the transaction to pay an ERC20
 * Warning: this EIP isn't widely used, be sure to test compatibility yourself.
 *
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 */
function _getErc20ProxyPaymentUrl(request, amount) {
    (0, utils_1.validateRequest)(request, types_2.ExtensionTypes.PAYMENT_NETWORK_ID.ERC20_PROXY_CONTRACT);
    const { paymentAddress, paymentReference } = (0, utils_1.getRequestPaymentValues)(request);
    const contractAddress = (0, utils_1.getProxyAddress)(request, payment_detection_1.Erc20PaymentNetwork.ERC20ProxyPaymentDetector.getDeploymentInformation);
    const amountToPay = (0, utils_1.getAmountToPay)(request, amount);
    const parameters = `transferFromWithReference?address=${request.currencyInfo.value}&address=${paymentAddress}&uint256=${amountToPay}&bytes=${paymentReference}`;
    return `ethereum:${contractAddress}/${parameters}`;
}
exports._getErc20ProxyPaymentUrl = _getErc20ProxyPaymentUrl;
/**
 * Encodes the call to pay a request through the ERC20 proxy contract, can be used with a Multisig contract.
 * @param request request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 */
function prepareErc20ProxyPaymentTransaction(request, amount) {
    (0, utils_1.validateRequest)(request, types_2.ExtensionTypes.PAYMENT_NETWORK_ID.ERC20_PROXY_CONTRACT);
    return {
        data: encodePayErc20Request(request, amount),
        to: (0, utils_1.getProxyAddress)(request, payment_detection_1.Erc20PaymentNetwork.ERC20ProxyPaymentDetector.getDeploymentInformation),
        value: 0,
    };
}
exports.prepareErc20ProxyPaymentTransaction = prepareErc20ProxyPaymentTransaction;
//# sourceMappingURL=erc20-proxy.js.map