"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._getEthPaymentUrl = exports.prepareEthInputDataRequest = exports.payEthInputDataRequest = void 0;
const tslib_1 = require("tslib");
const types_1 = require("@requestnetwork/types");
const utils_1 = require("./utils");
/**
 * processes the transaction to pay an ETH request.
 * @param request the request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param overrides optionally, override default transaction values, like gas.
 */
function payEthInputDataRequest(request, signerOrProvider = (0, utils_1.getProvider)(), amount, overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        const preparedTx = prepareEthInputDataRequest(request, amount, overrides);
        const tx = yield signer.sendTransaction(preparedTx);
        return tx;
    });
}
exports.payEthInputDataRequest = payEthInputDataRequest;
/**
 * processes the transaction to pay an ETH request.
 * @param request the request to pay
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param overrides optionally, override default transaction values, like gas.
 */
function prepareEthInputDataRequest(request, amount, overrides) {
    (0, utils_1.validateRequest)(request, types_1.ExtensionTypes.PAYMENT_NETWORK_ID.ETH_INPUT_DATA);
    const { paymentReference, paymentAddress } = (0, utils_1.getRequestPaymentValues)(request);
    const amountToPay = (0, utils_1.getAmountToPay)(request, amount);
    return Object.assign({ data: `0x${paymentReference}`, to: paymentAddress, value: amountToPay }, overrides);
}
exports.prepareEthInputDataRequest = prepareEthInputDataRequest;
/**
 * processes the transaction to pay an ETH request.
 * @param request the request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 */
function _getEthPaymentUrl(request, amount) {
    const { paymentAddress, paymentReference } = (0, utils_1.getRequestPaymentValues)(request);
    const amountToPay = (0, utils_1.getAmountToPay)(request, amount);
    // eslint-disable-next-line no-console
    return `ethereum:${paymentAddress}?value=${amountToPay}&data=${paymentReference}`;
}
exports._getEthPaymentUrl = _getEthPaymentUrl;
//# sourceMappingURL=eth-input-data.js.map