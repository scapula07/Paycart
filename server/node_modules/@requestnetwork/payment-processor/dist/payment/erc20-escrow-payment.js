"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeRefundFrozenFunds = exports.encodeRevertEmergencyClaim = exports.encodeCompleteEmergencyClaim = exports.encodeInitiateEmergencyClaim = exports.encodePayRequestFromEscrow = exports.encodeFreezeRequest = exports.preparePayEscrow = exports.encodePayEscrow = exports.refundFrozenFunds = exports.revertEmergencyClaim = exports.completeEmergencyClaim = exports.initiateEmergencyClaim = exports.payRequestFromEscrow = exports.freezeRequest = exports.payEscrow = exports.approveErc20ForEscrow = exports.prepareErc20EscrowApproval = void 0;
const tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/no-non-null-assertion */
const ethers_1 = require("ethers");
const smart_contracts_1 = require("@requestnetwork/smart-contracts");
const types_1 = require("@requestnetwork/smart-contracts/types/");
const types_2 = require("@requestnetwork/types");
const utils_1 = require("./utils");
const erc20_1 = require("./erc20");
/**
 * Prepare the approval transaction of the payment ERC20 to be spent by the escrow contract
 * @param request request to pay
 * @param paymentTokenAddress currency to approve
 * @param signerOrProvider the web3 provider
 * @param overrides optionally overrides default transaction values, like gas
 * @returns the prepared transaction
 */
function prepareErc20EscrowApproval(request, paymentTokenAddress, signerOrProvider = (0, utils_1.getProvider)(), amount, overrides) {
    const contractAddress = smart_contracts_1.erc20EscrowToPayArtifact.getAddress(request.currencyInfo.network);
    const encodedTx = (0, erc20_1.encodeApproveAnyErc20)(paymentTokenAddress, contractAddress, signerOrProvider, amount);
    return Object.assign({ data: encodedTx, to: paymentTokenAddress, value: 0 }, overrides);
}
exports.prepareErc20EscrowApproval = prepareErc20EscrowApproval;
/**
 * Processes the approval transaction of the payment ERC20 to be spent by the erc20EscrowToPay
 * contract during the fee proxy delegate call.
 * @param request request to pay, used to know the network
 * @param paymentTokenAddress picked currency to pay
 * @param signerOrProvider the web3 provider. Defaults to Etherscan.
 * @param overrides optionally, override default transaction values, like gas.
 */
function approveErc20ForEscrow(request, paymentTokenAddress, signerOrProvider = (0, utils_1.getProvider)(), amount, overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const preparedTx = prepareErc20EscrowApproval(request, paymentTokenAddress, signerOrProvider, amount, overrides);
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        return yield signer.sendTransaction(preparedTx);
    });
}
exports.approveErc20ForEscrow = approveErc20ForEscrow;
/**
 * Processes a transaction to payEscrow().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optional, if you want to override the amount in the request.
 * @param feeAmount optional, if you want to override the feeAmount in the request.
 * @param overrides optionally, override default transaction values, like gas.
 */
function payEscrow(request, signerOrProvider = (0, utils_1.getProvider)(), amount, feeAmount, overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const preparedTx = preparePayEscrow(request, amount, feeAmount, overrides);
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        return yield signer.sendTransaction(preparedTx);
    });
}
exports.payEscrow = payEscrow;
/**
 * Processes a transaction to freeze request.
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
function freezeRequest(request, signerOrProvider = (0, utils_1.getProvider)(), overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const encodedTx = encodeFreezeRequest(request);
        const contractAddress = smart_contracts_1.erc20EscrowToPayArtifact.getAddress(request.currencyInfo.network);
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        const tx = yield signer.sendTransaction(Object.assign({ data: encodedTx, to: contractAddress, value: 0 }, overrides));
        return tx;
    });
}
exports.freezeRequest = freezeRequest;
/**
 * Processes a transaction to payRequestFromEscrow().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
function payRequestFromEscrow(request, signerOrProvider = (0, utils_1.getProvider)(), overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const encodedTx = encodePayRequestFromEscrow(request);
        const contractAddress = smart_contracts_1.erc20EscrowToPayArtifact.getAddress(request.currencyInfo.network);
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        const tx = yield signer.sendTransaction(Object.assign({ data: encodedTx, to: contractAddress, value: 0 }, overrides));
        return tx;
    });
}
exports.payRequestFromEscrow = payRequestFromEscrow;
/**
 * Processes a transaction to initiateEmergencyClaim().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
function initiateEmergencyClaim(request, signerOrProvider = (0, utils_1.getProvider)(), overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const encodedTx = encodeInitiateEmergencyClaim(request);
        const contractAddress = smart_contracts_1.erc20EscrowToPayArtifact.getAddress(request.currencyInfo.network);
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        const tx = yield signer.sendTransaction(Object.assign({ data: encodedTx, to: contractAddress, value: 0 }, overrides));
        return tx;
    });
}
exports.initiateEmergencyClaim = initiateEmergencyClaim;
/**
 * Processes a transaction to completeEmergencyClaim().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
function completeEmergencyClaim(request, signerOrProvider = (0, utils_1.getProvider)(), overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const encodedTx = encodeCompleteEmergencyClaim(request);
        const contractAddress = smart_contracts_1.erc20EscrowToPayArtifact.getAddress(request.currencyInfo.network);
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        const tx = yield signer.sendTransaction(Object.assign({ data: encodedTx, to: contractAddress, value: 0 }, overrides));
        return tx;
    });
}
exports.completeEmergencyClaim = completeEmergencyClaim;
/**
 * Processes a transaction to revertEmergencyClaim().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
function revertEmergencyClaim(request, signerOrProvider = (0, utils_1.getProvider)(), overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const encodedTx = encodeRevertEmergencyClaim(request);
        const contractAddress = smart_contracts_1.erc20EscrowToPayArtifact.getAddress(request.currencyInfo.network);
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        const tx = yield signer.sendTransaction(Object.assign({ data: encodedTx, to: contractAddress, value: 0 }, overrides));
        return tx;
    });
}
exports.revertEmergencyClaim = revertEmergencyClaim;
/**
 * Processes a transaction to refundFrozenFunds().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
function refundFrozenFunds(request, signerOrProvider = (0, utils_1.getProvider)(), overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const encodedTx = encodeRefundFrozenFunds(request);
        const contractAddress = smart_contracts_1.erc20EscrowToPayArtifact.getAddress(request.currencyInfo.network);
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        const tx = yield signer.sendTransaction(Object.assign({ data: encodedTx, to: contractAddress, value: 0 }, overrides));
        return tx;
    });
}
exports.refundFrozenFunds = refundFrozenFunds;
/**
 * Encodes the call to payEscrow().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 */
function encodePayEscrow(request, amount, feeAmountOverride) {
    (0, utils_1.validateRequest)(request, types_2.ExtensionTypes.PAYMENT_NETWORK_ID.ERC20_FEE_PROXY_CONTRACT);
    const tokenAddress = request.currencyInfo.value;
    // collects the parameters to be used, from the request
    const { paymentReference, paymentAddress, feeAmount, feeAddress } = (0, utils_1.getRequestPaymentValues)(request);
    const amountToPay = (0, utils_1.getAmountToPay)(request, amount);
    const feeToPay = ethers_1.BigNumber.from(feeAmountOverride || feeAmount || 0);
    const erc20EscrowContract = types_1.ERC20EscrowToPay__factory.createInterface();
    return erc20EscrowContract.encodeFunctionData('payEscrow', [
        tokenAddress,
        paymentAddress,
        amountToPay,
        `0x${paymentReference}`,
        feeToPay,
        feeAddress || ethers_1.constants.AddressZero,
    ]);
}
exports.encodePayEscrow = encodePayEscrow;
/**
 * Prepare a transaction pay the escrow contract.
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optional, if you want to override the amount in the request.
 * @param feeAmount optional, if you want to override the feeAmount in the request.
 * @param overrides optionally, override default transaction values, like gas.
 */
function preparePayEscrow(request, amount, feeAmount, overrides) {
    const encodedTx = encodePayEscrow(request, amount, feeAmount);
    const contractAddress = smart_contracts_1.erc20EscrowToPayArtifact.getAddress(request.currencyInfo.network);
    return Object.assign({ data: encodedTx, to: contractAddress, value: 0 }, overrides);
}
exports.preparePayEscrow = preparePayEscrow;
/**
 * Encapsulates the validation, paymentReference calculation and escrow contract interface creation.
 * These steps are used in all subsequent functions encoding escrow interaction transactions
 * @param request Request data
 * @returns {erc20EscrowToPayContract, paymentReference}
 */
function prepareForEncoding(request) {
    (0, utils_1.validateRequest)(request, types_2.ExtensionTypes.PAYMENT_NETWORK_ID.ERC20_FEE_PROXY_CONTRACT);
    // collects the parameters to be used from the request
    const { paymentReference } = (0, utils_1.getRequestPaymentValues)(request);
    // connections to the escrow contract
    const erc20EscrowToPayContract = types_1.ERC20EscrowToPay__factory.createInterface();
    return {
        erc20EscrowToPayContract,
        paymentReference,
    };
}
/**
 * Returns the encoded data to freezeRequest().
 * @param request request to pay.
 */
function encodeFreezeRequest(request) {
    const { erc20EscrowToPayContract, paymentReference } = prepareForEncoding(request);
    return erc20EscrowToPayContract.encodeFunctionData('freezeRequest', [`0x${paymentReference}`]);
}
exports.encodeFreezeRequest = encodeFreezeRequest;
/**
 * Returns the encoded data to payRequestFromEscrow().
 * @param request request for pay
 */
function encodePayRequestFromEscrow(request) {
    const { erc20EscrowToPayContract, paymentReference } = prepareForEncoding(request);
    return erc20EscrowToPayContract.encodeFunctionData('payRequestFromEscrow', [
        `0x${paymentReference}`,
    ]);
}
exports.encodePayRequestFromEscrow = encodePayRequestFromEscrow;
/**
 * Returns the encoded data to initiateEmergencyClaim().
 * @param request request to pay.
 */
function encodeInitiateEmergencyClaim(request) {
    const { erc20EscrowToPayContract, paymentReference } = prepareForEncoding(request);
    return erc20EscrowToPayContract.encodeFunctionData('initiateEmergencyClaim', [
        `0x${paymentReference}`,
    ]);
}
exports.encodeInitiateEmergencyClaim = encodeInitiateEmergencyClaim;
/**
 * Returns the encoded data to completeEmergencyClaim().
 * @param request request to pay.
 */
function encodeCompleteEmergencyClaim(request) {
    const { erc20EscrowToPayContract, paymentReference } = prepareForEncoding(request);
    return erc20EscrowToPayContract.encodeFunctionData('completeEmergencyClaim', [
        `0x${paymentReference}`,
    ]);
}
exports.encodeCompleteEmergencyClaim = encodeCompleteEmergencyClaim;
/**
 * Returns the encoded data to revertEmergencyClaim().
 * @param request request to pay.
 */
function encodeRevertEmergencyClaim(request) {
    const { erc20EscrowToPayContract, paymentReference } = prepareForEncoding(request);
    return erc20EscrowToPayContract.encodeFunctionData('revertEmergencyClaim', [
        `0x${paymentReference}`,
    ]);
}
exports.encodeRevertEmergencyClaim = encodeRevertEmergencyClaim;
/**
 * Returns the encoded data to refundFrozenFunds().
 * @param request request to pay.
 */
function encodeRefundFrozenFunds(request) {
    const { erc20EscrowToPayContract, paymentReference } = prepareForEncoding(request);
    return erc20EscrowToPayContract.encodeFunctionData('refundFrozenFunds', [
        `0x${paymentReference}`,
    ]);
}
exports.encodeRefundFrozenFunds = encodeRefundFrozenFunds;
//# sourceMappingURL=erc20-escrow-payment.js.map