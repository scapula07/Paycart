import { ContractTransaction, Signer, BigNumberish, providers } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { ITransactionOverrides } from './transaction-overrides';
import { IPreparedTransaction } from './prepared-transaction';
/**
 * Details required for a token swap:
 *
 *  - maxInputAmount: maximum number of ERC20 allowed for the swap before payment, considering both amount and fees
 *  - path: array of token addresses to be used for the "swap path".
 *    ['0xPaymentCurrency', '0xIntermediate1', ..., '0xRequestCurrency']
 *  - deadline: time in milliseconds since UNIX epoch, after which the swap should not be executed.
 */
export interface ISwapSettings {
    deadline: number;
    maxInputAmount: BigNumberish;
    path: string[];
}
/**
 * Details required for a request payment transaction
 * @member overrides custom swap transaction parameters
 */
export interface ISwapTransactionOptions extends IRequestPaymentOptions {
    overrides?: ITransactionOverrides;
}
/**
 * Details required for a proxy payment:
 * @member {BigNumberish} amount custom request amount to pay
 * @member {BigNumberish} feeAmount custom fee amount to pay for the proxy
 */
export interface IRequestPaymentOptions {
    amount?: BigNumberish;
    feeAmount?: BigNumberish;
}
/**
 * Processes a transaction to swap tokens and pay an ERC20 Request through a proxy with fees.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param swapSettings settings for the swap: swap path, max amount to swap, deadline
 * @param options to override amount, feeAmount and transaction parameters
 */
export declare function swapErc20FeeProxyRequest(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer | undefined, swapSettings: ISwapSettings, options?: ISwapTransactionOptions): Promise<ContractTransaction>;
/**
 * Prepare a transaction to swap tokens and pay an ERC20 Request through a proxy with fees.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param swapSettings settings for the swap: swap path, max amount to swap, deadline
 * @param options to override amount, feeAmount and transaction parameters
 */
export declare function prepareSwapToPayErc20FeeRequest(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer | undefined, swapSettings: ISwapSettings, options?: ISwapTransactionOptions): IPreparedTransaction;
/**
 * Encodes the call to pay a request through the ERC20 fee proxy contract, can be used with a Multisig contract.
 * @param request request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum
 * @param swapSettings settings for the swap
 * @param options to override amount, feeAmount and transaction parameters
 */
export declare function encodeSwapToPayErc20FeeRequest(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer | undefined, swapSettings: ISwapSettings, options?: IRequestPaymentOptions): string;
//# sourceMappingURL=swap-erc20-fee-proxy.d.ts.map