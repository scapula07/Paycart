import { ContractTransaction, Signer, BigNumberish, providers, BigNumber } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { ITransactionOverrides } from './transaction-overrides';
import { IPreparedTransaction } from './prepared-transaction';
/**
 * Processes the approval transaction of a given payment ERC20 to be spent by the conversion proxy,
 * if the current approval is missing or not sufficient.
 * @param request request to pay, used to know the network
 * @param ownerAddress address of the payer
 * @param paymentTokenAddress ERC20 currency used to pay
 * @param signerOrProvider the web3 provider. Defaults to Etherscan.
 * @param minAmount ensures the approved amount is sufficient to pay this amount
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function approveErc20ForProxyConversionIfNeeded(request: ClientTypes.IRequestData, ownerAddress: string, paymentTokenAddress: string, signerOrProvider: providers.Provider | Signer | undefined, minAmount: BigNumberish, overrides?: ITransactionOverrides): Promise<ContractTransaction | void>;
/**
 * Verify if a given payment ERC20 can be spent by the conversion proxy,
 * @param request request to pay, used to know the network
 * @param ownerAddress address of the payer
 * @param paymentTokenAddress ERC20 currency used to pay
 * @param signerOrProvider the web3 provider. Defaults to Etherscan.
 * @param minAmount ensures the approved amount is sufficient to pay this amount
 */
export declare function hasErc20ApprovalForProxyConversion(request: ClientTypes.IRequestData, ownerAddress: string, paymentTokenAddress: string, signerOrProvider: providers.Provider | Signer | undefined, minAmount: BigNumberish): Promise<boolean>;
/**
 * Processes the approval transaction of the payment ERC20 to be spent by the conversion proxy,
 * during the fee proxy delegate call.
 * @param request request to pay, used to know the network
 * @param paymentTokenAddress picked currency to pay
 * @param signerOrProvider the web3 provider. Defaults to Etherscan.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function approveErc20ForProxyConversion(request: ClientTypes.IRequestData, paymentTokenAddress: string, signerOrProvider?: providers.Provider | Signer, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Prepare the approval transaction of the payment ERC20 to be spent by the conversion proxy,
 * during the fee proxy delegate call.
 * @param request request to pay, used to know the network
 * @param paymentTokenAddress picked currency to pay
 * @param signerOrProvider the web3 provider. Defaults to Etherscan.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function prepareApproveErc20ForProxyConversion(request: ClientTypes.IRequestData, paymentTokenAddress: string, signerOrProvider?: providers.Provider | Signer, overrides?: ITransactionOverrides, amount?: BigNumber): IPreparedTransaction;
//# sourceMappingURL=conversion-erc20.d.ts.map