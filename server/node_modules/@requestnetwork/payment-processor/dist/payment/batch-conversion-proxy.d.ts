import { ContractTransaction, Signer, providers } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { ITransactionOverrides } from './transaction-overrides';
import { IPreparedTransaction } from './prepared-transaction';
import { EnrichedRequest, IConversionPaymentSettings } from './index';
import { IRequestPaymentOptions } from './settings';
/**
 * Processes a transaction to pay a batch of requests with an ERC20 currency
 * that can be different from the request currency (eg. fiat)
 * The payment is made through ERC20 or ERC20Conversion proxies
 * It can be used with a Multisig contract
 * @param enrichedRequests List of EnrichedRequests to pay.
 * @param signerOrProvider The Web3 provider, or signer. Defaults to window.ethereum.
 * @param options It contains 3 paramaters required to do a batch payments:
 *  - conversion: It must contains the currencyManager.
 *  - skipFeeUSDLimit: It checks the value of batchFeeAmountUSDLimit of the batch proxy deployed.
 * Setting the value to true skips the USD fee limit, and reduces gas consumption.
 *  - version: The version of the batch conversion proxy.
 * @param overrides Optionally, override default transaction values, like gas.
 * @dev We only implement batchPayments using two ERC20 functions:
 *      batchMultiERC20ConversionPayments, and batchMultiERC20Payments.
 */
export declare function payBatchConversionProxyRequest(enrichedRequests: EnrichedRequest[], signerOrProvider: providers.Provider | Signer | undefined, options: IRequestPaymentOptions, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Prepares a transaction to pay a batch of requests with an ERC20 currency
 * that can be different from the request currency (eg. fiat).
 * It can be used with a Multisig contract.
 * @param enrichedRequests List of EnrichedRequests to pay.
 * @param options It contains 3 paramaters required to prepare a batch payments:
 *  - conversion: It must contains the currencyManager.
 *  - skipFeeUSDLimit: It checks the value of batchFeeAmountUSDLimit of the batch proxy deployed.
 * Setting the value to true skips the USD fee limit, and reduces gas consumption.
 *  - version: The version of the batch conversion proxy.
 */
export declare function prepareBatchConversionPaymentTransaction(enrichedRequests: EnrichedRequest[], options: IRequestPaymentOptions): IPreparedTransaction;
/**
 * Gets batch conversion contract Address.
 * @param request The request for an ERC20 payment with/out conversion.
 * @param version The version of the batch conversion proxy.
 */
export declare function getBatchConversionProxyAddress(request: ClientTypes.IRequestData, version?: string): string;
/**
 * ERC20 Batch conversion proxy approvals methods
 */
/**
 * Processes the approval transaction of the targeted ERC20 with batch conversion proxy.
 * @param request The request for an ERC20 payment with/out conversion.
 * @param account The account that will be used to pay the request
 * @param signerOrProvider The Web3 provider, or signer. Defaults to window.ethereum.
 * @param paymentSettings The payment settings are necessary for conversion payment approval.
 * @param version The version of the batch conversion proxy, which can be different from request pn version.
 * @param overrides Optionally, override default transaction values, like gas.
 */
export declare function approveErc20BatchConversionIfNeeded(request: ClientTypes.IRequestData, account: string, signerOrProvider?: providers.Provider | Signer, paymentSettings?: IConversionPaymentSettings, version?: string, overrides?: ITransactionOverrides): Promise<ContractTransaction | void>;
/**
 * Checks if the batch conversion proxy has the necessary allowance from a given account
 * to pay a given request with ERC20 batch conversion proxy
 * @param request The request for an ERC20 payment with/out conversion.
 * @param account The account that will be used to pay the request
 * @param signerOrProvider The Web3 provider, or signer. Defaults to window.ethereum.
 * @param paymentSettings The payment settings are necessary for conversion payment approval.
 * @param version The version of the batch conversion proxy.
 */
export declare function hasErc20BatchConversionApproval(request: ClientTypes.IRequestData, account: string, signerOrProvider?: providers.Provider | Signer, paymentSettings?: IConversionPaymentSettings, version?: string): Promise<boolean>;
/**
 * Processes the transaction to approve the batch conversion proxy to spend signer's tokens to pay
 * the request in its payment currency. Can be used with a Multisig contract.
 * @param request The request for an ERC20 payment with/out conversion.
 * @param signerOrProvider The Web3 provider, or signer. Defaults to window.ethereum.
 * @param paymentSettings The payment settings are necessary for conversion payment approval.
 * @param version The version of the batch conversion proxy, which can be different from request pn version.
 * @param overrides Optionally, override default transaction values, like gas.
 */
export declare function approveErc20BatchConversion(request: ClientTypes.IRequestData, signerOrProvider?: providers.Provider | Signer, paymentSettings?: IConversionPaymentSettings, version?: string, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Prepare the transaction to approve the proxy to spend signer's tokens to pay
 * the request in its payment currency. Can be used with a Multisig contract.
 * @param request The request for an ERC20 payment with/out conversion.
 * @param signerOrProvider The Web3 provider, or signer. Defaults to window.ethereum.
 * @param paymentSettings The payment settings are necessary for conversion payment approval.
 * @param version The version of the batch conversion proxy.
 * @param overrides Optionally, override default transaction values, like gas.
 */
export declare function prepareApproveErc20BatchConversion(request: ClientTypes.IRequestData, signerOrProvider?: providers.Provider | Signer, paymentSettings?: IConversionPaymentSettings, version?: string, overrides?: ITransactionOverrides): IPreparedTransaction;
/**
 * Encodes the transaction to approve the batch conversion proxy to spend signer's tokens to pay
 * the request in its payment currency. Can be used with a Multisig contract.
 * @param request The request for an ERC20 payment with/out conversion.
 * @param signerOrProvider The Web3 provider, or signer. Defaults to window.ethereum.
 * @param paymentSettings The payment settings are necessary for conversion payment approval.
 * @param version The version of the batch conversion proxy.
 */
export declare function encodeApproveErc20BatchConversion(request: ClientTypes.IRequestData, signerOrProvider?: providers.Provider | Signer, paymentSettings?: IConversionPaymentSettings, version?: string): string;
//# sourceMappingURL=batch-conversion-proxy.d.ts.map