import { ContractTransaction, Signer, providers, BigNumberish } from 'ethers';
import { ClientTypes, ExtensionTypes } from '@requestnetwork/types';
import { ITransactionOverrides } from './transaction-overrides';
import { IPreparedTransaction } from './prepared-transaction';
/**
 * Processes a transaction to pay an ETH Request with fees.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmount optionally, the fee amount to pay. Defaults to the fee amount.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function payEthFeeProxyRequest(request: ClientTypes.IRequestData, signerOrProvider?: providers.Provider | Signer, amount?: BigNumberish, feeAmount?: BigNumberish, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Encodes the call to pay a request through the ETH fee proxy contract, can be used with a Multisig contract.
 * @param request request to pay
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmountOverride optionally, the fee amount to pay. Defaults to the fee amount of the request.
 */
export declare function encodePayEthFeeProxyRequest(request: ClientTypes.IRequestData, amount?: BigNumberish, feeAmountOverride?: BigNumberish): string;
/**
 * Prepate the transaction to pay a request through the ETH fee proxy contract, can be used with a Multisig contract.
 * @param request request to pay
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmountOverride optionally, the fee amount to pay. Defaults to the fee amount of the request.
 */
export declare function prepareEthFeeProxyPaymentTransaction(request: ClientTypes.IRequestData, amount?: BigNumberish, feeAmountOverride?: BigNumberish): IPreparedTransaction;
/**
 * Validates the amount and fee parameters for an Eth Fee Proxy based request.
 * @param request to validate
 * @param feeAmountOverride optionally, the custom fee amount
 * @param paymentNetwork defaults to ETH Fee Proxy contract
 */
export declare function validateEthFeeProxyRequest(request: ClientTypes.IRequestData, amount?: BigNumberish, feeAmountOverride?: BigNumberish, paymentNetwork?: ExtensionTypes.PAYMENT_NETWORK_ID): void;
//# sourceMappingURL=eth-fee-proxy.d.ts.map