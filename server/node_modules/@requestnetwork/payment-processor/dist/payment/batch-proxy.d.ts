import { ContractTransaction, Signer, providers, BigNumber } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { ITransactionOverrides } from './transaction-overrides';
import { IPreparedTransaction } from './prepared-transaction';
/**
 * ERC20 Batch Proxy payment details:
 *   batch of request with the same payment network type: ERC20
 *   batch of request with the same payment network version
 *   2 modes available: single token or multi tokens
 * It requires batch proxy's approval
 *
 * Eth Batch Proxy payment details:
 *   batch of request with the same payment network type
 *   batch of request with the same payment network version
 * -> Eth batch proxy accepts requests with 2 id: ethProxy and ethFeeProxy
 *    but only call ethFeeProxy. It can impact payment detection
 */
/**
 * Processes a transaction to pay a batch of ETH Requests with fees.
 * Requests paymentType must be "ETH" or "ERC20"
 * @param requests List of requests
 * @param version The version version of the batch proxy, which can be different from request pn version
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param batchFee Only for batch ETH: additional fee applied to a batch, between 0 and 1000, default value = 10
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function payBatchProxyRequest(requests: ClientTypes.IRequestData[], version: string, signerOrProvider: providers.Provider | Signer | undefined, batchFee: number, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Prepate the transaction to pay a batch of requests through the batch proxy contract, can be used with a Multisig contract.
 * Requests paymentType must be "ETH" or "ERC20"
 * @param requests list of ETH requests to pay
 * @param version The version version of the batch proxy, which can be different from request pn version
 * @param batchFee additional fee applied to a batch
 */
export declare function prepareBatchPaymentTransaction(requests: ClientTypes.IRequestData[], version: string, batchFee: number): IPreparedTransaction;
/**
 * Encodes the call to pay a batch of requests through the ERC20Bacth or ETHBatch proxy contract,
 * can be used with a Multisig contract.
 * @param requests list of ECR20 requests to pay
 * @dev pn version of the requests is checked to avoid paying with two differents proxies (e.g: erc20proxy v1 and v2)
 */
export declare function encodePayBatchRequest(requests: ClientTypes.IRequestData[]): string;
/**
 * Get batch arguments
 * @param requests List of requests
 * @param forcedPaymentType It force to considere the request as an ETH or an ERC20 payment
 * @returns List with the args required by batch Eth and Erc20 functions,
 * @dev tokenAddresses returned is for batch Erc20 functions
 */
export declare function getBatchArgs(requests: ClientTypes.IRequestData[], forcedPaymentType?: 'ETH' | 'ERC20'): {
    tokenAddresses: Array<string>;
    paymentAddresses: Array<string>;
    amountsToPay: Array<BigNumber>;
    paymentReferences: Array<string>;
    feesToPay: Array<BigNumber>;
    feeAddressUsed: string;
};
/**
 * Get Batch contract Address
 * @param request The request to pay
 * @param version The version version of the batch proxy, which can be different from request pn version
 */
export declare function getBatchProxyAddress(request: ClientTypes.IRequestData, version: string): string;
/**
 * ERC20 Batch proxy approvals methods
 */
/**
 * Processes the approval transaction of the targeted ERC20 with batch proxy.
 * @param request The request to pay
 * @param account The account that will be used to pay the request
 * @param version The version version of the batch proxy, which can be different from request pn version
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function approveErc20BatchIfNeeded(request: ClientTypes.IRequestData, account: string, version: string, signerOrProvider?: providers.Provider | Signer, overrides?: ITransactionOverrides): Promise<ContractTransaction | void>;
/**
 * Checks if the batch proxy has the necessary allowance from a given account
 * to pay a given request with ERC20 batch
 * @param request The request to pay
 * @param account The account that will be used to pay the request
 * @param version The version version of the batch proxy, which can be different from request pn version
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 */
export declare function hasErc20BatchApproval(request: ClientTypes.IRequestData, account: string, version: string, signerOrProvider?: providers.Provider | Signer): Promise<boolean>;
/**
 * Processes the transaction to approve the batch proxy to spend signer's tokens to pay
 * the request in its payment currency. Can be used with a Multisig contract.
 * @param request The request to pay
 * @param version The version version of the batch proxy, which can be different from request pn version
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function approveErc20Batch(request: ClientTypes.IRequestData, version: string, signerOrProvider?: providers.Provider | Signer, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Prepare the transaction to approve the proxy to spend signer's tokens to pay
 * the request in its payment currency. Can be used with a Multisig contract.
 * @param request The request to pay
 * @param version The version version of the batch proxy, which can be different from request pn version
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function prepareApproveErc20Batch(request: ClientTypes.IRequestData, version: string, signerOrProvider?: providers.Provider | Signer, overrides?: ITransactionOverrides): IPreparedTransaction;
/**
 * Encodes the transaction to approve the batch proxy to spend signer's tokens to pay
 * the request in its payment currency. Can be used with a Multisig contract.
 * @param request The request to pay
 * @param version The version version of the batch proxy, which can be different from request pn version
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 */
export declare function encodeApproveErc20Batch(request: ClientTypes.IRequestData, version: string, signerOrProvider?: providers.Provider | Signer): string;
//# sourceMappingURL=batch-proxy.d.ts.map