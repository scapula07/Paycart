import { BigNumber, BigNumberish, ContractTransaction, providers, Signer } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { ITransactionOverrides } from './transaction-overrides';
import { IPreparedTransaction } from './prepared-transaction';
/**
 * Prepare the approval transaction of the payment ERC20 to be spent by the escrow contract
 * @param request request to pay
 * @param paymentTokenAddress currency to approve
 * @param signerOrProvider the web3 provider
 * @param overrides optionally overrides default transaction values, like gas
 * @returns the prepared transaction
 */
export declare function prepareErc20EscrowApproval(request: ClientTypes.IRequestData, paymentTokenAddress: string, signerOrProvider?: providers.Provider | Signer, amount?: BigNumber, overrides?: ITransactionOverrides): IPreparedTransaction;
/**
 * Processes the approval transaction of the payment ERC20 to be spent by the erc20EscrowToPay
 * contract during the fee proxy delegate call.
 * @param request request to pay, used to know the network
 * @param paymentTokenAddress picked currency to pay
 * @param signerOrProvider the web3 provider. Defaults to Etherscan.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function approveErc20ForEscrow(request: ClientTypes.IRequestData, paymentTokenAddress: string, signerOrProvider?: providers.Provider | Signer, amount?: BigNumber, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Processes a transaction to payEscrow().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optional, if you want to override the amount in the request.
 * @param feeAmount optional, if you want to override the feeAmount in the request.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function payEscrow(request: ClientTypes.IRequestData, signerOrProvider?: providers.Web3Provider | Signer, amount?: BigNumberish, feeAmount?: BigNumberish, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Processes a transaction to freeze request.
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function freezeRequest(request: ClientTypes.IRequestData, signerOrProvider?: providers.Web3Provider | Signer, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Processes a transaction to payRequestFromEscrow().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function payRequestFromEscrow(request: ClientTypes.IRequestData, signerOrProvider?: providers.Web3Provider | Signer, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Processes a transaction to initiateEmergencyClaim().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function initiateEmergencyClaim(request: ClientTypes.IRequestData, signerOrProvider?: providers.Web3Provider | Signer, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Processes a transaction to completeEmergencyClaim().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function completeEmergencyClaim(request: ClientTypes.IRequestData, signerOrProvider?: providers.Web3Provider | Signer, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Processes a transaction to revertEmergencyClaim().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function revertEmergencyClaim(request: ClientTypes.IRequestData, signerOrProvider?: providers.Web3Provider | Signer, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Processes a transaction to refundFrozenFunds().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function refundFrozenFunds(request: ClientTypes.IRequestData, signerOrProvider?: providers.Web3Provider | Signer, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Encodes the call to payEscrow().
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 */
export declare function encodePayEscrow(request: ClientTypes.IRequestData, amount?: BigNumberish, feeAmountOverride?: BigNumberish): string;
/**
 * Prepare a transaction pay the escrow contract.
 * @param request request to pay.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optional, if you want to override the amount in the request.
 * @param feeAmount optional, if you want to override the feeAmount in the request.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function preparePayEscrow(request: ClientTypes.IRequestData, amount?: BigNumberish, feeAmount?: BigNumberish, overrides?: ITransactionOverrides): IPreparedTransaction;
/**
 * Returns the encoded data to freezeRequest().
 * @param request request to pay.
 */
export declare function encodeFreezeRequest(request: ClientTypes.IRequestData): string;
/**
 * Returns the encoded data to payRequestFromEscrow().
 * @param request request for pay
 */
export declare function encodePayRequestFromEscrow(request: ClientTypes.IRequestData): string;
/**
 * Returns the encoded data to initiateEmergencyClaim().
 * @param request request to pay.
 */
export declare function encodeInitiateEmergencyClaim(request: ClientTypes.IRequestData): string;
/**
 * Returns the encoded data to completeEmergencyClaim().
 * @param request request to pay.
 */
export declare function encodeCompleteEmergencyClaim(request: ClientTypes.IRequestData): string;
/**
 * Returns the encoded data to revertEmergencyClaim().
 * @param request request to pay.
 */
export declare function encodeRevertEmergencyClaim(request: ClientTypes.IRequestData): string;
/**
 * Returns the encoded data to refundFrozenFunds().
 * @param request request to pay.
 */
export declare function encodeRefundFrozenFunds(request: ClientTypes.IRequestData): string;
//# sourceMappingURL=erc20-escrow-payment.d.ts.map