import { ContractTransaction, Signer, Overrides, providers, BigNumberish, BigNumber } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { Framework } from '@superfluid-finance/sdk-core';
import { IPreparedTransaction } from './prepared-transaction';
import { ITransactionOverrides } from './transaction-overrides';
export declare const RESOLVER_ADDRESS = "0x913bbCFea2f347a24cfCA441d483E7CBAc8De3Db";
export declare const USERDATA_PREFIX = "0xbeefac";
/**
 * Processes a transaction to pay an ERC777 stream Request.
 * @param request the request to pay
 * @param signer the Web3 signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function payErc777StreamRequest(request: ClientTypes.IRequestData, signer: Signer, overrides?: Overrides): Promise<ContractTransaction>;
/**
 * Processes a transaction to complete an ERC777 stream paying a Request.
 * @param request the request to pay
 * @param signer the Web3 signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function completeErc777StreamRequest(request: ClientTypes.IRequestData, signer: Signer, overrides?: Overrides): Promise<ContractTransaction>;
/**
 * Encodes the call to pay a request through the ERC20 fee proxy contract, can be used with a Multisig contract.
 * @param request the request to pay
 * @param provider the Web3 provider. Defaults to window.ethereum.
 */
export declare function getSuperFluidFramework(request: ClientTypes.IRequestData, provider: providers.Provider): Promise<Framework>;
/**
 * Encodes the call to pay a request through the ERC777 SuperFluid stream contract.
 * @param request the request to pay
 * @param sf the SuperFluid framework to use
 */
export declare function encodePayErc777StreamRequest(request: ClientTypes.IRequestData, sf: Framework): Promise<string>;
/**
 * Prepare the transaction to pay a request through the ERC777 SuperFluid stream contract.
 * @param request the request to pay
 * @param provider the Web3 provider. Defaults to window.ethereum.
 */
export declare function prepareErc777StreamPaymentTransaction(request: ClientTypes.IRequestData, provider: providers.Provider): Promise<IPreparedTransaction>;
/**
 * Gets the future ERC777 balance of an address, based on the request currency information
 * @param request the request that contains currency information
 * @param address the address to check
 * @param timestamp the time to calculate the balance at
 * @param provider the web3 provider. Defaults to Etherscan
 */
export declare function getErc777BalanceAt(request: ClientTypes.IRequestData, address: string, timestamp: number, provider?: providers.Provider): Promise<BigNumberish>;
/**
 * Encode the transaction data for a one off payment of ERC777 Tokens
 * @param request to encode the payment for
 * @param amount the amount to be sent
 * @returns the encoded transaction data
 */
export declare const encodeErc777OneOffPayment: (request: ClientTypes.IRequestData, amount: BigNumber) => string;
/**
 * Prepare the transaction for a one payment for the user to sign
 * @param request to prepare the transaction for
 * @param amount the amount to be sent
 * @returns the prepared transaction
 */
export declare const prepareErc777OneOffPayment: (request: ClientTypes.IRequestData, amount: BigNumber) => IPreparedTransaction;
/**
 * Make an ERC777 payment
 * @param request associated to the payment
 * @param amount the amount to be sent
 * @param signer the transaction signer
 * @returns the transaction result
 */
export declare const makeErc777OneOffPayment: (request: ClientTypes.IRequestData, amount: BigNumber, signer: Signer, overrides?: ITransactionOverrides | undefined) => Promise<ContractTransaction>;
//# sourceMappingURL=erc777-stream.d.ts.map