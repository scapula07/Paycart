import { BigNumberish, ContractTransaction, providers, Signer } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { ITransactionOverrides } from './transaction-overrides';
import { IPreparedTransaction } from './prepared-transaction';
/**
 * Processes a transaction to pay an ETH Request with the proxy contract.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function payEthProxyRequest(request: ClientTypes.IRequestData, signerOrProvider?: providers.Provider | Signer, amount?: BigNumberish, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Encodes the call to pay a request through the ETH proxy contract, can be used with a Multisig contract.
 * @param request request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 */
export declare function encodePayEthProxyRequest(request: ClientTypes.IRequestData): string;
export declare function prepareEthProxyPaymentTransaction(request: ClientTypes.IRequestData, amount?: BigNumberish): IPreparedTransaction;
//# sourceMappingURL=eth-proxy.d.ts.map