"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateEthFeeProxyRequest = exports.prepareEthFeeProxyPaymentTransaction = exports.encodePayEthFeeProxyRequest = exports.payEthFeeProxyRequest = void 0;
const tslib_1 = require("tslib");
const ethers_1 = require("ethers");
const types_1 = require("@requestnetwork/types");
const payment_detection_1 = require("@requestnetwork/payment-detection");
const types_2 = require("@requestnetwork/smart-contracts/types");
const utils_1 = require("./utils");
/**
 * Processes a transaction to pay an ETH Request with fees.
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmount optionally, the fee amount to pay. Defaults to the fee amount.
 * @param overrides optionally, override default transaction values, like gas.
 */
function payEthFeeProxyRequest(request, signerOrProvider = (0, utils_1.getProvider)(), amount, feeAmount, overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const { data, to, value } = prepareEthFeeProxyPaymentTransaction(request, amount, feeAmount);
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        return signer.sendTransaction(Object.assign({ data, to, value }, overrides));
    });
}
exports.payEthFeeProxyRequest = payEthFeeProxyRequest;
/**
 * Encodes the call to pay a request through the ETH fee proxy contract, can be used with a Multisig contract.
 * @param request request to pay
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmountOverride optionally, the fee amount to pay. Defaults to the fee amount of the request.
 */
function encodePayEthFeeProxyRequest(request, amount, feeAmountOverride) {
    validateEthFeeProxyRequest(request, amount, feeAmountOverride);
    const { paymentReference, paymentAddress, feeAddress, feeAmount } = (0, utils_1.getRequestPaymentValues)(request);
    const feeToPay = ethers_1.BigNumber.from(feeAmountOverride || feeAmount || 0);
    const proxyContract = types_2.EthereumFeeProxy__factory.createInterface();
    return proxyContract.encodeFunctionData('transferWithReferenceAndFee', [
        paymentAddress,
        `0x${paymentReference}`,
        feeToPay,
        feeAddress || ethers_1.constants.AddressZero,
    ]);
}
exports.encodePayEthFeeProxyRequest = encodePayEthFeeProxyRequest;
/**
 * Prepate the transaction to pay a request through the ETH fee proxy contract, can be used with a Multisig contract.
 * @param request request to pay
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmountOverride optionally, the fee amount to pay. Defaults to the fee amount of the request.
 */
function prepareEthFeeProxyPaymentTransaction(request, amount, feeAmountOverride) {
    validateEthFeeProxyRequest(request, amount, feeAmountOverride);
    const { feeAmount } = (0, utils_1.getRequestPaymentValues)(request);
    const amountToPay = (0, utils_1.getAmountToPay)(request, amount);
    const feeToPay = feeAmountOverride || ethers_1.BigNumber.from(feeAmount || 0);
    const encodedTx = encodePayEthFeeProxyRequest(request, amount, feeAmountOverride);
    const proxyAddress = (0, utils_1.getProxyAddress)(request, payment_detection_1.EthFeeProxyPaymentDetector.getDeploymentInformation);
    return {
        data: encodedTx,
        to: proxyAddress,
        value: amountToPay.add(feeToPay),
    };
}
exports.prepareEthFeeProxyPaymentTransaction = prepareEthFeeProxyPaymentTransaction;
/**
 * Validates the amount and fee parameters for an Eth Fee Proxy based request.
 * @param request to validate
 * @param feeAmountOverride optionally, the custom fee amount
 * @param paymentNetwork defaults to ETH Fee Proxy contract
 */
function validateEthFeeProxyRequest(request, amount, feeAmountOverride, paymentNetwork = types_1.ExtensionTypes.PAYMENT_NETWORK_ID
    .ETH_FEE_PROXY_CONTRACT) {
    (0, utils_1.validateRequest)(request, paymentNetwork);
    const { feeAmount } = (0, utils_1.getRequestPaymentValues)(request);
    const amountToPay = (0, utils_1.getAmountToPay)(request, amount);
    const feeToPay = ethers_1.BigNumber.from(feeAmountOverride || feeAmount || 0);
    if (amountToPay.isZero() && feeToPay.isZero()) {
        throw new Error('Request payment amount and fee are 0');
    }
}
exports.validateEthFeeProxyRequest = validateEthFeeProxyRequest;
//# sourceMappingURL=eth-fee-proxy.js.map