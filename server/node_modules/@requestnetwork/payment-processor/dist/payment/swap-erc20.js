"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareApprovalErc20ForSwapToPay = exports.approveErc20ForSwapToPay = exports.hasApprovalErc20ForSwapToPay = exports.approveErc20ForSwapToPayIfNeeded = void 0;
const tslib_1 = require("tslib");
const smart_contracts_1 = require("@requestnetwork/smart-contracts");
const utils_1 = require("./utils");
const erc20_1 = require("./erc20");
/**
 * Processes the approval transaction of a given payment ERC20 to be spent by the swap router,
 * if the current approval is missing or not sufficient.
 * @param request request to pay, used to know the network
 * @param ownerAddress address of the payer
 * @param paymentCurrency ERC20 currency used for the swap
 * @param signerOrProvider the web3 provider. Defaults to Etherscan.
 * @param minAmount ensures the approved amount is sufficient to pay this amount
 * @param overrides optionally, override default transaction values, like gas.
 */
function approveErc20ForSwapToPayIfNeeded(request, ownerAddress, paymentTokenAddress, signerOrProvider = (0, utils_1.getProvider)(), minAmount, overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        if (!(yield hasApprovalErc20ForSwapToPay(request, ownerAddress, paymentTokenAddress, signerOrProvider, minAmount))) {
            return approveErc20ForSwapToPay(request, paymentTokenAddress, signerOrProvider, overrides);
        }
    });
}
exports.approveErc20ForSwapToPayIfNeeded = approveErc20ForSwapToPayIfNeeded;
/**
 * Verify if a given payment ERC20 can be spent by the swap router,
 * @param request request to pay, used to know the network
 * @param ownerAddress address of the payer
 * @param paymentCurrency ERC20 currency used for the swap
 * @param signerOrProvider the web3 provider. Defaults to Etherscan.
 * @param minAmount ensures the approved amount is sufficient to pay this amount
 */
function hasApprovalErc20ForSwapToPay(request, ownerAddress, paymentTokenAddress, signerOrProvider = (0, utils_1.getProvider)(), minAmount) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        if (!request.currencyInfo.network) {
            throw new Error('Request currency network is missing');
        }
        return (0, erc20_1.checkErc20Allowance)(ownerAddress, smart_contracts_1.erc20SwapToPayArtifact.getAddress(request.currencyInfo.network), signerOrProvider, paymentTokenAddress, minAmount);
    });
}
exports.hasApprovalErc20ForSwapToPay = hasApprovalErc20ForSwapToPay;
/**
 * Processes the approval transaction of the payment ERC20 to be spent by the swap router.
 * @param request request to pay, used to know the network
 * @param paymentTokenAddress picked currency for the swap to pay
 * @param signerOrProvider the web3 provider. Defaults to Etherscan.
 * @param overrides optionally, override default transaction values, like gas.
 */
function approveErc20ForSwapToPay(request, paymentTokenAddress, signerOrProvider = (0, utils_1.getProvider)(), overrides) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const preparedTx = prepareApprovalErc20ForSwapToPay(request, paymentTokenAddress, signerOrProvider, overrides);
        const signer = (0, utils_1.getSigner)(signerOrProvider);
        const tx = yield signer.sendTransaction(preparedTx);
        return tx;
    });
}
exports.approveErc20ForSwapToPay = approveErc20ForSwapToPay;
/**
 * Prepare the transaction for allowing the swap router to spend ERC20 payment tokens.
 * @param request request to pay, used to know the network
 * @param paymentTokenAddress picked currency for the swap to pay
 * @param signerOrProvider the web3 provider. Defaults to Etherscan.
 * @param overrides optionally, override default transaction values, like gas.
 */
function prepareApprovalErc20ForSwapToPay(request, paymentTokenAddress, signerOrProvider = (0, utils_1.getProvider)(), overrides, amount) {
    const encodedTx = (0, erc20_1.encodeApproveAnyErc20)(paymentTokenAddress, smart_contracts_1.erc20SwapToPayArtifact.getAddress(request.currencyInfo.network), signerOrProvider, amount);
    return Object.assign({ data: encodedTx, to: paymentTokenAddress, value: 0 }, overrides);
}
exports.prepareApprovalErc20ForSwapToPay = prepareApprovalErc20ForSwapToPay;
//# sourceMappingURL=swap-erc20.js.map