/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1820Implementer__factory>;
    getContractFactory(
      name: "IERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Implementer__factory>;
    getContractFactory(
      name: "BadERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadERC20__factory>;
    getContractFactory(
      name: "BasicToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicToken__factory>;
    getContractFactory(
      name: "BlackList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlackList__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Basic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Basic__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardToken__factory>;
    getContractFactory(
      name: "UpgradedStandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradedStandardToken__factory>;
    getContractFactory(
      name: "BatchConversionPayments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchConversionPayments__factory>;
    getContractFactory(
      name: "BatchNoConversionPayments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchNoConversionPayments__factory>;
    getContractFactory(
      name: "BatchPayments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchPayments__factory>;
    getContractFactory(
      name: "AggregatorFraction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorFraction__factory>;
    getContractFactory(
      name: "ChainlinkConversionPath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkConversionPath__factory>;
    getContractFactory(
      name: "ERC20fraction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20fraction__factory>;
    getContractFactory(
      name: "Erc20ConversionProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Erc20ConversionProxy__factory>;
    getContractFactory(
      name: "ERC20EscrowToPay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20EscrowToPay__factory>;
    getContractFactory(
      name: "ERC20FeeProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20FeeProxy__factory>;
    getContractFactory(
      name: "ERC20Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Proxy__factory>;
    getContractFactory(
      name: "ERC20SwapToConversion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20SwapToConversion__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "ERC20SwapToPay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20SwapToPay__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "EthConversionProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthConversionProxy__factory>;
    getContractFactory(
      name: "EthereumFeeProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumFeeProxy__factory>;
    getContractFactory(
      name: "EthereumProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumProxy__factory>;
    getContractFactory(
      name: "FakeSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeSwapRouter__factory>;
    getContractFactory(
      name: "IERC20FeeProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20FeeProxy__factory>;
    getContractFactory(
      name: "IEthereumFeeProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEthereumFeeProxy__factory>;
    getContractFactory(
      name: "IERC20ConversionProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20ConversionProxy__factory>;
    getContractFactory(
      name: "IEthConversionProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEthConversionProxy__factory>;
    getContractFactory(
      name: "WhitelistAdminRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistAdminRole__factory>;
    getContractFactory(
      name: "WhitelistedRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistedRole__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "RequestDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RequestDeployer__factory>;
    getContractFactory(
      name: "RequestHashStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RequestHashStorage__factory>;
    getContractFactory(
      name: "RequestOpenHashSubmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RequestOpenHashSubmitter__factory>;
    getContractFactory(
      name: "StorageFeeCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StorageFeeCollector__factory>;
    getContractFactory(
      name: "AggregatorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorMock__factory>;
    getContractFactory(
      name: "BytesUtilsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BytesUtilsMock__factory>;
    getContractFactory(
      name: "EtherPaymentFallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtherPaymentFallback__factory>;
    getContractFactory(
      name: "GnosisSafeProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GnosisSafeProxy__factory>;
    getContractFactory(
      name: "UsdtFake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UsdtFake__factory>;
    getContractFactory(
      name: "ERC20Alpha",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Alpha__factory>;
    getContractFactory(
      name: "ERC20False",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20False__factory>;
    getContractFactory(
      name: "ERC20NoReturn",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20NoReturn__factory>;
    getContractFactory(
      name: "ERC20Revert",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Revert__factory>;
    getContractFactory(
      name: "ERC20True",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20True__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
