/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BatchPaymentsInterface extends ethers.utils.Interface {
  functions: {
    "approvePaymentProxyToSpend(address)": FunctionFragment;
    "batchERC20PaymentsMultiTokensWithReference(address[],address[],uint256[],bytes[],uint256[],address)": FunctionFragment;
    "batchERC20PaymentsWithReference(address,address[],uint256[],bytes[],uint256[],address)": FunctionFragment;
    "batchEthPaymentsWithReference(address[],uint256[],bytes[],uint256[],address)": FunctionFragment;
    "batchFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentErc20FeeProxy()": FunctionFragment;
    "paymentEthFeeProxy()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBatchFee(uint256)": FunctionFragment;
    "setPaymentErc20FeeProxy(address)": FunctionFragment;
    "setPaymentEthFeeProxy(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approvePaymentProxyToSpend",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchERC20PaymentsMultiTokensWithReference",
    values: [
      string[],
      string[],
      BigNumberish[],
      BytesLike[],
      BigNumberish[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchERC20PaymentsWithReference",
    values: [
      string,
      string[],
      BigNumberish[],
      BytesLike[],
      BigNumberish[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchEthPaymentsWithReference",
    values: [string[], BigNumberish[], BytesLike[], BigNumberish[], string]
  ): string;
  encodeFunctionData(functionFragment: "batchFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentErc20FeeProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentEthFeeProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentErc20FeeProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentEthFeeProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvePaymentProxyToSpend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchERC20PaymentsMultiTokensWithReference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchERC20PaymentsWithReference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchEthPaymentsWithReference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentErc20FeeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentEthFeeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentErc20FeeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentEthFeeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class BatchPayments extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BatchPaymentsInterface;

  functions: {
    approvePaymentProxyToSpend(
      _erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchERC20PaymentsMultiTokensWithReference(
      _tokenAddresses: string[],
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchERC20PaymentsWithReference(
      _tokenAddress: string,
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchEthPaymentsWithReference(
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentErc20FeeProxy(overrides?: CallOverrides): Promise<[string]>;

    paymentEthFeeProxy(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBatchFee(
      _batchFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentErc20FeeProxy(
      _paymentErc20FeeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentEthFeeProxy(
      _paymentEthFeeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approvePaymentProxyToSpend(
    _erc20Address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchERC20PaymentsMultiTokensWithReference(
    _tokenAddresses: string[],
    _recipients: string[],
    _amounts: BigNumberish[],
    _paymentReferences: BytesLike[],
    _feeAmounts: BigNumberish[],
    _feeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchERC20PaymentsWithReference(
    _tokenAddress: string,
    _recipients: string[],
    _amounts: BigNumberish[],
    _paymentReferences: BytesLike[],
    _feeAmounts: BigNumberish[],
    _feeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchEthPaymentsWithReference(
    _recipients: string[],
    _amounts: BigNumberish[],
    _paymentReferences: BytesLike[],
    _feeAmounts: BigNumberish[],
    _feeAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchFee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentErc20FeeProxy(overrides?: CallOverrides): Promise<string>;

  paymentEthFeeProxy(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBatchFee(
    _batchFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentErc20FeeProxy(
    _paymentErc20FeeProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentEthFeeProxy(
    _paymentEthFeeProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approvePaymentProxyToSpend(
      _erc20Address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchERC20PaymentsMultiTokensWithReference(
      _tokenAddresses: string[],
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchERC20PaymentsWithReference(
      _tokenAddress: string,
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchEthPaymentsWithReference(
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentErc20FeeProxy(overrides?: CallOverrides): Promise<string>;

    paymentEthFeeProxy(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBatchFee(
      _batchFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentErc20FeeProxy(
      _paymentErc20FeeProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentEthFeeProxy(
      _paymentEthFeeProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    approvePaymentProxyToSpend(
      _erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchERC20PaymentsMultiTokensWithReference(
      _tokenAddresses: string[],
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchERC20PaymentsWithReference(
      _tokenAddress: string,
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchEthPaymentsWithReference(
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentErc20FeeProxy(overrides?: CallOverrides): Promise<BigNumber>;

    paymentEthFeeProxy(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBatchFee(
      _batchFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentErc20FeeProxy(
      _paymentErc20FeeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentEthFeeProxy(
      _paymentEthFeeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvePaymentProxyToSpend(
      _erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchERC20PaymentsMultiTokensWithReference(
      _tokenAddresses: string[],
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchERC20PaymentsWithReference(
      _tokenAddress: string,
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchEthPaymentsWithReference(
      _recipients: string[],
      _amounts: BigNumberish[],
      _paymentReferences: BytesLike[],
      _feeAmounts: BigNumberish[],
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentErc20FeeProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentEthFeeProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBatchFee(
      _batchFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentErc20FeeProxy(
      _paymentErc20FeeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentEthFeeProxy(
      _paymentEthFeeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
