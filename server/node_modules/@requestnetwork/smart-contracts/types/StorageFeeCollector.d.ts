/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StorageFeeCollectorInterface extends ethers.utils.Interface {
  functions: {
    "addWhitelistAdmin(address)": FunctionFragment;
    "getFeesAmount(uint256)": FunctionFragment;
    "isWhitelistAdmin(address)": FunctionFragment;
    "minimumFee()": FunctionFragment;
    "rateFeesDenominator()": FunctionFragment;
    "rateFeesNumerator()": FunctionFragment;
    "renounceWhitelistAdmin()": FunctionFragment;
    "requestBurnerContract()": FunctionFragment;
    "setFeeParameters(uint256,uint256,uint256)": FunctionFragment;
    "setRequestBurnerContract(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addWhitelistAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeesAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateFeesDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateFeesNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceWhitelistAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestBurnerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestBurnerContract",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeesAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minimumFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateFeesDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateFeesNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBurnerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestBurnerContract",
    data: BytesLike
  ): Result;

  events: {
    "UpdatedBurnerContract(address)": EventFragment;
    "UpdatedFeeParameters(uint256,uint256,uint256)": EventFragment;
    "UpdatedMinimumFeeThreshold(uint256)": EventFragment;
    "WhitelistAdminAdded(address)": EventFragment;
    "WhitelistAdminRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdatedBurnerContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedFeeParameters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMinimumFeeThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistAdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistAdminRemoved"): EventFragment;
}

export class StorageFeeCollector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StorageFeeCollectorInterface;

  functions: {
    addWhitelistAdmin(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFeesAmount(
      _contentSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minimumFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    rateFeesDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    rateFeesNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceWhitelistAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestBurnerContract(overrides?: CallOverrides): Promise<[string]>;

    setFeeParameters(
      _minimumFee: BigNumberish,
      _rateFeesNumerator: BigNumberish,
      _rateFeesDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRequestBurnerContract(
      _requestBurnerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addWhitelistAdmin(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFeesAmount(
    _contentSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isWhitelistAdmin(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

  rateFeesDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  rateFeesNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  renounceWhitelistAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestBurnerContract(overrides?: CallOverrides): Promise<string>;

  setFeeParameters(
    _minimumFee: BigNumberish,
    _rateFeesNumerator: BigNumberish,
    _rateFeesDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRequestBurnerContract(
    _requestBurnerContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getFeesAmount(
      _contentSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    rateFeesDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    rateFeesNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    renounceWhitelistAdmin(overrides?: CallOverrides): Promise<void>;

    requestBurnerContract(overrides?: CallOverrides): Promise<string>;

    setFeeParameters(
      _minimumFee: BigNumberish,
      _rateFeesNumerator: BigNumberish,
      _rateFeesDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequestBurnerContract(
      _requestBurnerContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    UpdatedBurnerContract(
      burnerAddress?: null
    ): TypedEventFilter<[string], { burnerAddress: string }>;

    UpdatedFeeParameters(
      minimumFee?: null,
      rateFeesNumerator?: null,
      rateFeesDenominator?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        minimumFee: BigNumber;
        rateFeesNumerator: BigNumber;
        rateFeesDenominator: BigNumber;
      }
    >;

    UpdatedMinimumFeeThreshold(
      threshold?: null
    ): TypedEventFilter<[BigNumber], { threshold: BigNumber }>;

    WhitelistAdminAdded(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    WhitelistAdminRemoved(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    addWhitelistAdmin(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFeesAmount(
      _contentSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    rateFeesDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    rateFeesNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    renounceWhitelistAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestBurnerContract(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeParameters(
      _minimumFee: BigNumberish,
      _rateFeesNumerator: BigNumberish,
      _rateFeesDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRequestBurnerContract(
      _requestBurnerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhitelistAdmin(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFeesAmount(
      _contentSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateFeesDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateFeesNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceWhitelistAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestBurnerContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeParameters(
      _minimumFee: BigNumberish,
      _rateFeesNumerator: BigNumberish,
      _rateFeesDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRequestBurnerContract(
      _requestBurnerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
