import '@nomiclabs/hardhat-ethers';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { Contract } from 'ethers';
import { ContractArtifact } from '../src/lib';
export interface DeploymentResult<TContract extends Contract | unknown = Contract> {
    address: string;
    contractName: string;
    instance: TContract;
    constructorArguments: any[];
    type: 'simulated' | 'deployed' | 'attached' | 'skipped';
    verificationPromise?: Promise<boolean>;
    block?: number;
}
/**
 * Deploys contracts if they are not known by artifacts on the network.
 * Publishes the source when the deployment is made.
 * @options
 *  - options.verify: set false to prevent verification on live networks
 *  - options.nonceCondition: only proceeds with the deployment if the nonce matches
 *  - options.version: to deploy or map a version different from the last version
 * @returns a deployment result with address =
 *  - The address if the contract is deployed or attached
 *  - 'simulated' if args.simulate === true (no deployment/)
 *  - 'skipped' if the nonce condition is not met
 */
export declare function deployOne<TContract extends Contract>(args: any, hre: HardhatRuntimeEnvironment, contractName: string, options?: {
    constructorArguments?: any[];
    artifact?: ContractArtifact<Contract>;
    verify?: boolean;
    nonceCondition?: number;
    version?: string;
}): Promise<DeploymentResult<TContract>>;
//# sourceMappingURL=deploy-one.d.ts.map