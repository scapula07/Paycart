import { Contract, providers, Signer } from 'ethers';
import type { JsonFragment } from '@ethersproject/abi';
/**
 * Contract information specific to a network
 */
export declare type ArtifactNetworkInfo = {
    /** Contract's address */
    address: string;
    /** Block number at which the contract was created */
    creationBlockNumber: number;
};
/** Deployment information and ABI per network */
export declare type ArtifactDeploymentInfo<TNetwork extends string = string> = {
    abi: JsonFragment[];
    deployment: Record<TNetwork, ArtifactNetworkInfo>;
};
/** Deployment information and ABI per version and network */
export declare type ArtifactInfo<TVersion extends string = string, TNetwork extends string = string> = Record<TVersion, ArtifactDeploymentInfo<TNetwork>>;
export declare type DeploymentInformation = {
    address: string;
    creationBlockNumber: number;
};
/**
 * Provides information on a deployed smart-contract,
 * and utilities to connect to it
 **/
export declare class ContractArtifact<TContract extends Contract> {
    private info;
    private lastVersion;
    constructor(info: ArtifactInfo<string, string>, lastVersion: string);
    /**
     * Returns an ethers contract instance for the given `networkName`
     */
    connect(networkName: string, signerOrProvider: Signer | providers.Provider, version?: string): TContract;
    getInterface(): TContract['interface'];
    /**
     * Retrieve the abi from the artifact of the used version
     * @returns the abi of the artifact as a json object
     */
    getContractAbi(version?: string): JsonFragment[];
    /**
     * Retrieve the address from the artifact of the used version
     * deployed into the specified network
     * @param networkName the name of the network where the contract is deployed
     * @returns the address of the deployed contract
     */
    getAddress(networkName: string, version?: string): string;
    /**
     * Retrieve all addresses for all versions
     * @param networkName the name of the network where the contract is deployed
     * @returns the addresses of the deployed contract and the associated version.
     */
    getAllAddresses(networkName: string): {
        version: string;
        address: string;
    }[];
    /**
     * Retrieve the block creation number from the artifact of the used version
     * deployed into the specified network
     * @param networkName the name of the network where the contract is deployed
     * @returns the number of the block where the contract was deployed
     */
    getCreationBlockNumber(networkName: string, version?: string): number;
    /**
     * Retrieve the deployment information from the artifact of the used version
     * deployed into the specified network. Will trow an error if the version of network is incorrect.
     * @param networkName the name of the network where the contract is deployed
     * @returns The address and the number of the creation block
     */
    getDeploymentInformation(networkName: string, version?: string): DeploymentInformation;
    /**
     * Retrieve the deployment information from the artifact of the used version
     * deployed into the specified network
     * @param networkName the name of the network where the contract is deployed
     * @returns The address and the number of the creation block, or null if not found
     */
    getOptionalDeploymentInformation(networkName: string, version?: string): DeploymentInformation | null;
}
//# sourceMappingURL=ContractArtifact.d.ts.map