"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractArtifact = void 0;
const ethers_1 = require("ethers");
/**
 * Provides information on a deployed smart-contract,
 * and utilities to connect to it
 **/
class ContractArtifact {
    constructor(info, lastVersion) {
        this.info = info;
        this.lastVersion = lastVersion;
        this.connect = this.connect.bind(this);
        this.getInterface = this.getInterface.bind(this);
        this.getContractAbi = this.getContractAbi.bind(this);
        this.getAddress = this.getAddress.bind(this);
        this.getCreationBlockNumber = this.getCreationBlockNumber.bind(this);
        this.getDeploymentInformation = this.getDeploymentInformation.bind(this);
        this.getAllAddresses = this.getAllAddresses.bind(this);
        this.getOptionalDeploymentInformation = this.getOptionalDeploymentInformation.bind(this);
    }
    /**
     * Returns an ethers contract instance for the given `networkName`
     */
    connect(networkName, signerOrProvider, version = this.lastVersion) {
        return new ethers_1.Contract(this.getAddress(networkName, version), this.getContractAbi(version), signerOrProvider);
    }
    getInterface() {
        return ethers_1.Contract.getInterface(this.getContractAbi());
    }
    /**
     * Retrieve the abi from the artifact of the used version
     * @returns the abi of the artifact as a json object
     */
    getContractAbi(version = this.lastVersion) {
        return this.info[version].abi;
    }
    /**
     * Retrieve the address from the artifact of the used version
     * deployed into the specified network
     * @param networkName the name of the network where the contract is deployed
     * @returns the address of the deployed contract
     */
    getAddress(networkName, version = this.lastVersion) {
        return this.getDeploymentInformation(networkName, version).address;
    }
    /**
     * Retrieve all addresses for all versions
     * @param networkName the name of the network where the contract is deployed
     * @returns the addresses of the deployed contract and the associated version.
     */
    getAllAddresses(networkName) {
        const entries = Object.entries(this.info);
        return entries.map(([version, { deployment }]) => {
            var _a;
            return ({
                version,
                address: (_a = deployment[networkName]) === null || _a === void 0 ? void 0 : _a.address,
            });
        });
    }
    /**
     * Retrieve the block creation number from the artifact of the used version
     * deployed into the specified network
     * @param networkName the name of the network where the contract is deployed
     * @returns the number of the block where the contract was deployed
     */
    getCreationBlockNumber(networkName, version = this.lastVersion) {
        return this.getDeploymentInformation(networkName, version).creationBlockNumber;
    }
    /**
     * Retrieve the deployment information from the artifact of the used version
     * deployed into the specified network. Will trow an error if the version of network is incorrect.
     * @param networkName the name of the network where the contract is deployed
     * @returns The address and the number of the creation block
     */
    getDeploymentInformation(networkName, version = this.lastVersion) {
        const versionInfo = this.info[version];
        if (!versionInfo) {
            throw Error(`No deployment for version: ${version}.`);
        }
        const info = versionInfo.deployment[networkName];
        // Check the artifact has been deployed into the specified network
        if (!info) {
            throw Error(`No deployment for network: ${networkName}.`);
        }
        return info;
    }
    /**
     * Retrieve the deployment information from the artifact of the used version
     * deployed into the specified network
     * @param networkName the name of the network where the contract is deployed
     * @returns The address and the number of the creation block, or null if not found
     */
    getOptionalDeploymentInformation(networkName, version = this.lastVersion) {
        var _a;
        return ((_a = this.info[version]) === null || _a === void 0 ? void 0 : _a.deployment[networkName]) || null;
    }
}
exports.ContractArtifact = ContractArtifact;
//# sourceMappingURL=ContractArtifact.js.map