/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ChainlinkConversionPathInterface extends ethers.utils.Interface {
  functions: {
    "addWhitelistAdmin(address)": FunctionFragment;
    "allAggregators(address,address)": FunctionFragment;
    "getConversion(uint256,address[])": FunctionFragment;
    "getRate(address[])": FunctionFragment;
    "isWhitelistAdmin(address)": FunctionFragment;
    "nativeTokenHash()": FunctionFragment;
    "renounceWhitelistAdmin()": FunctionFragment;
    "updateAggregator(address,address,address)": FunctionFragment;
    "updateAggregatorsList(address[],address[],address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addWhitelistAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allAggregators",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConversion",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "getRate", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "isWhitelistAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeTokenHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceWhitelistAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAggregator",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAggregatorsList",
    values: [string[], string[], string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokenHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAggregatorsList",
    data: BytesLike
  ): Result;

  events: {
    "AggregatorUpdated(address,address,address)": EventFragment;
    "WhitelistAdminAdded(address)": EventFragment;
    "WhitelistAdminRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AggregatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistAdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistAdminRemoved"): EventFragment;
}

export class ChainlinkConversionPath extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ChainlinkConversionPathInterface;

  functions: {
    addWhitelistAdmin(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allAggregators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getConversion(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        result: BigNumber;
        oldestRateTimestamp: BigNumber;
      }
    >;

    getRate(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        oldestRateTimestamp: BigNumber;
        decimals: BigNumber;
      }
    >;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nativeTokenHash(overrides?: CallOverrides): Promise<[string]>;

    renounceWhitelistAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAggregator(
      _input: string,
      _output: string,
      _aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAggregatorsList(
      _inputs: string[],
      _outputs: string[],
      _aggregators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addWhitelistAdmin(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allAggregators(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getConversion(
    _amountIn: BigNumberish,
    _path: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      result: BigNumber;
      oldestRateTimestamp: BigNumber;
    }
  >;

  getRate(
    _path: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      oldestRateTimestamp: BigNumber;
      decimals: BigNumber;
    }
  >;

  isWhitelistAdmin(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nativeTokenHash(overrides?: CallOverrides): Promise<string>;

  renounceWhitelistAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAggregator(
    _input: string,
    _output: string,
    _aggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAggregatorsList(
    _inputs: string[],
    _outputs: string[],
    _aggregators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allAggregators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getConversion(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        result: BigNumber;
        oldestRateTimestamp: BigNumber;
      }
    >;

    getRate(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        oldestRateTimestamp: BigNumber;
        decimals: BigNumber;
      }
    >;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nativeTokenHash(overrides?: CallOverrides): Promise<string>;

    renounceWhitelistAdmin(overrides?: CallOverrides): Promise<void>;

    updateAggregator(
      _input: string,
      _output: string,
      _aggregator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAggregatorsList(
      _inputs: string[],
      _outputs: string[],
      _aggregators: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AggregatorUpdated(
      _input?: null,
      _output?: null,
      _aggregator?: null
    ): TypedEventFilter<
      [string, string, string],
      { _input: string; _output: string; _aggregator: string }
    >;

    WhitelistAdminAdded(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    WhitelistAdminRemoved(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    addWhitelistAdmin(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allAggregators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConversion(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRate(_path: string[], overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeTokenHash(overrides?: CallOverrides): Promise<BigNumber>;

    renounceWhitelistAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAggregator(
      _input: string,
      _output: string,
      _aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAggregatorsList(
      _inputs: string[],
      _outputs: string[],
      _aggregators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhitelistAdmin(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allAggregators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConversion(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRate(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeTokenHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceWhitelistAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAggregator(
      _input: string,
      _output: string,
      _aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAggregatorsList(
      _inputs: string[],
      _outputs: string[],
      _aggregators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
