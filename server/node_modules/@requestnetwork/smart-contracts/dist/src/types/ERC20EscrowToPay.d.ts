/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC20EscrowToPayInterface extends ethers.utils.Interface {
  functions: {
    "approvePaymentProxyToSpend(address)": FunctionFragment;
    "completeEmergencyClaim(bytes)": FunctionFragment;
    "emergencyClaimPeriod()": FunctionFragment;
    "freezeRequest(bytes)": FunctionFragment;
    "frozenPeriod()": FunctionFragment;
    "initiateEmergencyClaim(bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "payEscrow(address,address,uint256,bytes,uint256,address)": FunctionFragment;
    "payRequestFromEscrow(bytes)": FunctionFragment;
    "paymentProxy()": FunctionFragment;
    "refundFrozenFunds(bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestMapping(bytes)": FunctionFragment;
    "revertEmergencyClaim(bytes)": FunctionFragment;
    "setEmergencyClaimPeriod(uint256)": FunctionFragment;
    "setFrozenPeriod(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approvePaymentProxyToSpend",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeEmergencyClaim",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyClaimPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "frozenPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateEmergencyClaim",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payEscrow",
    values: [string, string, BigNumberish, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "payRequestFromEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundFrozenFunds",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestMapping",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revertEmergencyClaim",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyClaimPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFrozenPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvePaymentProxyToSpend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeEmergencyClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frozenPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateEmergencyClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payRequestFromEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundFrozenFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertEmergencyClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFrozenPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "InitiatedEmergencyClaim(bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestFrozen(bytes)": EventFragment;
    "RevertedEmergencyClaim(bytes)": EventFragment;
    "TransferWithReferenceAndFee(address,address,uint256,bytes,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InitiatedEmergencyClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevertedEmergencyClaim"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferWithReferenceAndFee"
  ): EventFragment;
}

export class ERC20EscrowToPay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC20EscrowToPayInterface;

  functions: {
    approvePaymentProxyToSpend(
      _erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyClaimPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    freezeRequest(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    frozenPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    initiateEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payEscrow(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentRef: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payRequestFromEscrow(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paymentProxy(overrides?: CallOverrides): Promise<[string]>;

    refundFrozenFunds(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        tokenAddress: string;
        payee: string;
        payer: string;
        amount: BigNumber;
        unlockDate: BigNumber;
        emergencyClaimDate: BigNumber;
        emergencyState: boolean;
        isFrozen: boolean;
      }
    >;

    revertEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyClaimPeriod(
      _emergencyClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFrozenPeriod(
      _frozenPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approvePaymentProxyToSpend(
    _erc20Address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeEmergencyClaim(
    _paymentRef: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyClaimPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  freezeRequest(
    _paymentRef: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  frozenPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  initiateEmergencyClaim(
    _paymentRef: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payEscrow(
    _tokenAddress: string,
    _to: string,
    _amount: BigNumberish,
    _paymentRef: BytesLike,
    _feeAmount: BigNumberish,
    _feeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payRequestFromEscrow(
    _paymentRef: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paymentProxy(overrides?: CallOverrides): Promise<string>;

  refundFrozenFunds(
    _paymentRef: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestMapping(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      tokenAddress: string;
      payee: string;
      payer: string;
      amount: BigNumber;
      unlockDate: BigNumber;
      emergencyClaimDate: BigNumber;
      emergencyState: boolean;
      isFrozen: boolean;
    }
  >;

  revertEmergencyClaim(
    _paymentRef: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyClaimPeriod(
    _emergencyClaimPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFrozenPeriod(
    _frozenPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approvePaymentProxyToSpend(
      _erc20Address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    completeEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyClaimPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    freezeRequest(
      _paymentRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    frozenPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    initiateEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payEscrow(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentRef: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    payRequestFromEscrow(
      _paymentRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    paymentProxy(overrides?: CallOverrides): Promise<string>;

    refundFrozenFunds(
      _paymentRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        tokenAddress: string;
        payee: string;
        payer: string;
        amount: BigNumber;
        unlockDate: BigNumber;
        emergencyClaimDate: BigNumber;
        emergencyState: boolean;
        isFrozen: boolean;
      }
    >;

    revertEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyClaimPeriod(
      _emergencyClaimPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFrozenPeriod(
      _frozenPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    InitiatedEmergencyClaim(
      paymentReference?: BytesLike | null
    ): TypedEventFilter<[string], { paymentReference: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RequestFrozen(
      paymentReference?: BytesLike | null
    ): TypedEventFilter<[string], { paymentReference: string }>;

    RevertedEmergencyClaim(
      paymentReference?: BytesLike | null
    ): TypedEventFilter<[string], { paymentReference: string }>;

    TransferWithReferenceAndFee(
      tokenAddress?: null,
      to?: null,
      amount?: null,
      paymentReference?: BytesLike | null,
      feeAmount?: null,
      feeAddress?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, string],
      {
        tokenAddress: string;
        to: string;
        amount: BigNumber;
        paymentReference: string;
        feeAmount: BigNumber;
        feeAddress: string;
      }
    >;
  };

  estimateGas: {
    approvePaymentProxyToSpend(
      _erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyClaimPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    freezeRequest(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    frozenPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    initiateEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payEscrow(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentRef: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payRequestFromEscrow(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paymentProxy(overrides?: CallOverrides): Promise<BigNumber>;

    refundFrozenFunds(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyClaimPeriod(
      _emergencyClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFrozenPeriod(
      _frozenPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvePaymentProxyToSpend(
      _erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyClaimPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeRequest(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    frozenPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payEscrow(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentRef: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payRequestFromEscrow(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paymentProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundFrozenFunds(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertEmergencyClaim(
      _paymentRef: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyClaimPeriod(
      _emergencyClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFrozenPeriod(
      _frozenPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
