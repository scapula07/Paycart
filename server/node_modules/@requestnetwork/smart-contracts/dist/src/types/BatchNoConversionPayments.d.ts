/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BatchNoConversionPaymentsInterface extends ethers.utils.Interface {
  functions: {
    "NativeAddress()": FunctionFragment;
    "USDAddress()": FunctionFragment;
    "batchERC20Payments(tuple[],address[][],address)": FunctionFragment;
    "batchFee()": FunctionFragment;
    "batchFeeAmountUSDLimit()": FunctionFragment;
    "batchMultiERC20Payments(tuple[],address[][],address)": FunctionFragment;
    "batchNativePayments(tuple[],bool,address)": FunctionFragment;
    "chainlinkConversionPath()": FunctionFragment;
    "owner()": FunctionFragment;
    "pathsNativeToUSD(uint256,uint256)": FunctionFragment;
    "paymentErc20Proxy()": FunctionFragment;
    "paymentNativeProxy()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBatchFee(uint16)": FunctionFragment;
    "setBatchFeeAmountUSDLimit(uint64)": FunctionFragment;
    "setChainlinkConversionPath(address)": FunctionFragment;
    "setNativeAndUSDAddress(address,address)": FunctionFragment;
    "setPaymentErc20Proxy(address)": FunctionFragment;
    "setPaymentNativeProxy(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "NativeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchERC20Payments",
    values: [
      {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      string[][],
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "batchFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchFeeAmountUSDLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchMultiERC20Payments",
    values: [
      {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      string[][],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchNativePayments",
    values: [
      {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkConversionPath",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pathsNativeToUSD",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentErc20Proxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentNativeProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchFeeAmountUSDLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkConversionPath",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNativeAndUSDAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentErc20Proxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentNativeProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "NativeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchERC20Payments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchFeeAmountUSDLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMultiERC20Payments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchNativePayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkConversionPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pathsNativeToUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentErc20Proxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentNativeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchFeeAmountUSDLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkConversionPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNativeAndUSDAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentErc20Proxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentNativeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class BatchNoConversionPayments extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BatchNoConversionPaymentsInterface;

  functions: {
    NativeAddress(overrides?: CallOverrides): Promise<[string]>;

    USDAddress(overrides?: CallOverrides): Promise<[string]>;

    batchERC20Payments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      pathsToUSD: string[][],
      feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchFee(overrides?: CallOverrides): Promise<[number]>;

    batchFeeAmountUSDLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchMultiERC20Payments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      pathsToUSD: string[][],
      feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchNativePayments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      skipFeeUSDLimit: boolean,
      feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainlinkConversionPath(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pathsNativeToUSD(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    paymentErc20Proxy(overrides?: CallOverrides): Promise<[string]>;

    paymentNativeProxy(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBatchFee(
      _batchFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBatchFeeAmountUSDLimit(
      _batchFeeAmountUSDLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainlinkConversionPath(
      _chainlinkConversionPath: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNativeAndUSDAddress(
      _NativeAddress: string,
      _USDAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentErc20Proxy(
      _paymentErc20Proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentNativeProxy(
      _paymentNativeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NativeAddress(overrides?: CallOverrides): Promise<string>;

  USDAddress(overrides?: CallOverrides): Promise<string>;

  batchERC20Payments(
    requestDetails: {
      recipient: string;
      requestAmount: BigNumberish;
      path: string[];
      paymentReference: BytesLike;
      feeAmount: BigNumberish;
      maxToSpend: BigNumberish;
      maxRateTimespan: BigNumberish;
    }[],
    pathsToUSD: string[][],
    feeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchFee(overrides?: CallOverrides): Promise<number>;

  batchFeeAmountUSDLimit(overrides?: CallOverrides): Promise<BigNumber>;

  batchMultiERC20Payments(
    requestDetails: {
      recipient: string;
      requestAmount: BigNumberish;
      path: string[];
      paymentReference: BytesLike;
      feeAmount: BigNumberish;
      maxToSpend: BigNumberish;
      maxRateTimespan: BigNumberish;
    }[],
    pathsToUSD: string[][],
    feeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchNativePayments(
    requestDetails: {
      recipient: string;
      requestAmount: BigNumberish;
      path: string[];
      paymentReference: BytesLike;
      feeAmount: BigNumberish;
      maxToSpend: BigNumberish;
      maxRateTimespan: BigNumberish;
    }[],
    skipFeeUSDLimit: boolean,
    feeAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainlinkConversionPath(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pathsNativeToUSD(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  paymentErc20Proxy(overrides?: CallOverrides): Promise<string>;

  paymentNativeProxy(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBatchFee(
    _batchFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBatchFeeAmountUSDLimit(
    _batchFeeAmountUSDLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainlinkConversionPath(
    _chainlinkConversionPath: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNativeAndUSDAddress(
    _NativeAddress: string,
    _USDAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentErc20Proxy(
    _paymentErc20Proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentNativeProxy(
    _paymentNativeProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NativeAddress(overrides?: CallOverrides): Promise<string>;

    USDAddress(overrides?: CallOverrides): Promise<string>;

    batchERC20Payments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      pathsToUSD: string[][],
      feeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchFee(overrides?: CallOverrides): Promise<number>;

    batchFeeAmountUSDLimit(overrides?: CallOverrides): Promise<BigNumber>;

    batchMultiERC20Payments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      pathsToUSD: string[][],
      feeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchNativePayments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      skipFeeUSDLimit: boolean,
      feeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainlinkConversionPath(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pathsNativeToUSD(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    paymentErc20Proxy(overrides?: CallOverrides): Promise<string>;

    paymentNativeProxy(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBatchFee(
      _batchFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBatchFeeAmountUSDLimit(
      _batchFeeAmountUSDLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkConversionPath(
      _chainlinkConversionPath: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNativeAndUSDAddress(
      _NativeAddress: string,
      _USDAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentErc20Proxy(
      _paymentErc20Proxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentNativeProxy(
      _paymentNativeProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    NativeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    USDAddress(overrides?: CallOverrides): Promise<BigNumber>;

    batchERC20Payments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      pathsToUSD: string[][],
      feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchFee(overrides?: CallOverrides): Promise<BigNumber>;

    batchFeeAmountUSDLimit(overrides?: CallOverrides): Promise<BigNumber>;

    batchMultiERC20Payments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      pathsToUSD: string[][],
      feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchNativePayments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      skipFeeUSDLimit: boolean,
      feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainlinkConversionPath(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pathsNativeToUSD(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentErc20Proxy(overrides?: CallOverrides): Promise<BigNumber>;

    paymentNativeProxy(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBatchFee(
      _batchFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBatchFeeAmountUSDLimit(
      _batchFeeAmountUSDLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainlinkConversionPath(
      _chainlinkConversionPath: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNativeAndUSDAddress(
      _NativeAddress: string,
      _USDAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentErc20Proxy(
      _paymentErc20Proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentNativeProxy(
      _paymentNativeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NativeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchERC20Payments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      pathsToUSD: string[][],
      feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchFeeAmountUSDLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchMultiERC20Payments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      pathsToUSD: string[][],
      feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchNativePayments(
      requestDetails: {
        recipient: string;
        requestAmount: BigNumberish;
        path: string[];
        paymentReference: BytesLike;
        feeAmount: BigNumberish;
        maxToSpend: BigNumberish;
        maxRateTimespan: BigNumberish;
      }[],
      skipFeeUSDLimit: boolean,
      feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainlinkConversionPath(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pathsNativeToUSD(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentErc20Proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentNativeProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBatchFee(
      _batchFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBatchFeeAmountUSDLimit(
      _batchFeeAmountUSDLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkConversionPath(
      _chainlinkConversionPath: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNativeAndUSDAddress(
      _NativeAddress: string,
      _USDAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentErc20Proxy(
      _paymentErc20Proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentNativeProxy(
      _paymentNativeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
