"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupBatchPayments = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("../../src/lib");
const utils_1 = require("@requestnetwork/utils");
const adminTasks_1 = require("./adminTasks");
/**
 * Updates the values of the batch fees of the BatchPayments contract, if needed
 * @param contractAddress address of the BatchPayments Proxy
 * @param hre Hardhat runtime environment
 */
const setupBatchPayments = (contractAddress, hre) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
    // Setup contract parameters
    const batchPaymentContract = new hre.ethers.Contract(contractAddress, lib_1.batchPaymentsArtifact.getContractAbi());
    yield Promise.all(hre.config.xdeploy.networks.map((network) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
        let provider;
        if (network === 'celo') {
            provider = utils_1.default.getCeloProvider();
        }
        else {
            provider = utils_1.default.getDefaultProvider(network);
        }
        const wallet = new hre.ethers.Wallet(hre.config.xdeploy.signer, provider);
        const signer = wallet.connect(provider);
        const batchPaymentConnected = yield batchPaymentContract.connect(signer);
        const adminNonce = yield signer.getTransactionCount();
        const gasPrice = yield provider.getGasPrice();
        // start from the adminNonce, increase gasPrice if needed
        yield Promise.all([
            (0, adminTasks_1.updateBatchPaymentFees)(batchPaymentConnected, adminNonce, gasPrice.mul(2)),
            (0, adminTasks_1.updatePaymentErc20FeeProxy)(batchPaymentConnected, network, adminNonce + 1, gasPrice.mul(2)),
            (0, adminTasks_1.updatePaymentEthFeeProxy)(batchPaymentConnected, network, adminNonce + 2, gasPrice.mul(2)),
        ]);
    })));
    console.log('Setup for setupBatchPayment successfull');
});
exports.setupBatchPayments = setupBatchPayments;
//# sourceMappingURL=setupBatchPayments.js.map