import { LogTypes } from '@requestnetwork/types';
import { providers } from 'ethers';
type ProviderFactory = (network: string | undefined) => providers.Provider | string;
/**
 * @param network the network to connect to
 * @param defaultFactory the defaultFactory to use as fallback if needed
 */
type CurrentProviderFactory = (network: string | undefined, defaultFactory: ProviderFactory) => providers.Provider | string;
/**
 * Default API_KEYS configuration, can be overridden using initPaymentDetectionApiKeys
 */
declare let providersApiKeys: Record<string, string | (() => string)>;
/**
 * @param defaultProviderOptions Default Provider Options as specified in https://docs.ethers.io/v5/api/providers/#providers-getDefaultProvider  */
declare const initPaymentDetectionApiKeys: (defaultProviderOptions?: typeof providersApiKeys) => void;
/**
 * Define default URLs for networks supported by Request payment detection but not by ethers' Infura Provider
 */
declare const networkRpcs: Record<string, string>;
/**
 * Override the default providerFactory, which relies mainly on Infura.
 * @param providerFactory if not specify, will reset to the default factory
 */
declare const setProviderFactory: (providerFactory?: CurrentProviderFactory) => void;
/**
 * Returns a Web3 Provider for the given `network`.
 *
 * Configuration options:
 * - Specify `RN_WEB3_RPC_URL_[NETWORK]` environment variable to override the default behaviour
 * - Specify `RN_INFURA_KEY` to override the default Infura API KEY (recommended)
 * - Use `initPaymentDetectionApiKeys` to override Infura API KEY when `RN_INFURA_KEY` is not usable
 * - Use `setProviderFactory` for more complex configurations with multiple networks
 *
 * @param network the blockchain network. See https://chainid.network/chains.json `network` field for reference
 */
declare const getDefaultProvider: (network?: string) => providers.Provider;
declare const getCeloProvider: () => providers.Provider;
declare const isEip1559Supported: (provider: providers.Provider | providers.JsonRpcProvider, logger?: LogTypes.ILogger) => Promise<boolean>;
export { setProviderFactory, initPaymentDetectionApiKeys, isEip1559Supported, getDefaultProvider, getCeloProvider, networkRpcs, };
//# sourceMappingURL=providers.d.ts.map