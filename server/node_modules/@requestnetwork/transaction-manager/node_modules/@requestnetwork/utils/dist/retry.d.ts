/**
 * A method that retries a function a defined amount of times if it fails.
 *
 * @param target The target function
 * @param [options] Retry configuration options
 * @param [options.context] The context to run the function
 * @param [options.maxRetries=DEFAULT_MAX_RETRIES] The maximum amount of retries for the function
 * @param [options.retryDelay=DEFAULT_RETRY_DELAY] The delay between retries
 * @param [options.exponentialBackoffDelay=DEFAULT_EXPONENTIAL_BACKOFF_DELAY] The exponential backoff delay increment
 * @param [options.maxExponentialBackoffDelay=DEFAULT_MAX_EXPONENTIAL_BACKOFF_DELAY] The maximum exponential backoff delay allowed
 */
declare const retry: <TParams extends unknown[], TReturn>(target: (...params: TParams) => TReturn | Promise<TReturn>, { context, maxRetries, retryDelay, exponentialBackoffDelay, maxExponentialBackoffDelay, }?: {
    context?: unknown;
    maxRetries?: number | undefined;
    retryDelay?: number | undefined;
    exponentialBackoffDelay?: number | undefined;
    maxExponentialBackoffDelay?: number | undefined;
}) => (...params: TParams) => Promise<TReturn>;
export { retry };
//# sourceMappingURL=retry.d.ts.map