import { DecryptionProviderTypes, EncryptionTypes, TransactionTypes } from '@requestnetwork/types';
/**
 * Class to parse transactions
 */
export default class TransactionsParser {
    private decryptionProvider;
    constructor(decryptionProvider?: DecryptionProviderTypes.IDecryptionProvider);
    /**
     * Parses a persisted transaction into a ClearTransaction or EncryptedTransaction, and decrypts the channel key if needed
     *
     * @param persistedTransaction the persisted transaction to parse
     * @param channelType The channel type (unknown, clear or encrypted)
     * @param channelKey the channel key to decrypt the transaction if needed
     * @param encryptionMethod the channel encryption method to decrypt the transaction if needed
     * @returns the transaction object and the channel key (if applicable)
     */
    parsePersistedTransaction(persistedTransaction: TransactionTypes.IPersistedTransaction, channelType: TransactionTypes.ChannelType, channelKey?: EncryptionTypes.IDecryptionParameters, encryptionMethod?: string): Promise<{
        transaction: TransactionTypes.ITransaction;
        channelKey?: EncryptionTypes.IDecryptionParameters;
        encryptionMethod?: string;
    }>;
    /**
     * Decrypts a channel key
     *
     * @param keys encrypted keys indexed by identity
     * @param encryptionMethod encryption method used for the channel
     * @returns the channel key
     */
    private decryptChannelKey;
}
//# sourceMappingURL=transactions-parser.d.ts.map