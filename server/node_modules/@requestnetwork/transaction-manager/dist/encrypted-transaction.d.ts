import { EncryptionTypes, TransactionTypes } from '@requestnetwork/types';
/**
 * Class representing an encrypted transaction
 */
export default class EncryptedTransaction implements TransactionTypes.ITransaction {
    /** Decrypted data - start empty then filled by getData() */
    private data;
    /** Hash computed from the decrypted data - start empty then filled by getHash() */
    private dataHashSerialized;
    /** Persisted data */
    private persistedData;
    /** channel key to decrypt the encrypted data */
    private channelKey;
    /**
     * Creates an instance of EncryptedTransaction.
     * @param persistedData the encrypted data of the transaction
     * @param channelKey decryption parameters to decrypted the encrypted data
     */
    constructor(persistedData: TransactionTypes.ITransactionData, channelKey: EncryptionTypes.IDecryptionParameters);
    /**
     * Gets the data of the transaction
     *
     * @returns a promise resolving the transaction data
     */
    getData(): Promise<TransactionTypes.ITransactionData>;
    /**
     * Gets the transaction data hash
     *
     * @returns a promise resolving the transaction data hash
     */
    getHash(): Promise<string>;
    /**
     * Gets the transaction error
     *
     * @returns a promise resolving a string of the error if any, otherwise an empty string
     */
    getError(): Promise<string>;
}
//# sourceMappingURL=encrypted-transaction.d.ts.map