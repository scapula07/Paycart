import { DecryptionProviderTypes, EncryptionTypes, TransactionTypes } from '@requestnetwork/types';
/**
 * Class to parse channels from a list of transactions and their channel id
 */
export default class ChannelParser {
    private transactionParser;
    constructor(decryptionProvider?: DecryptionProviderTypes.IDecryptionProvider);
    /**
     * Decrypts and cleans a channel by removing the wrong transactions
     *
     * @param channelId the channelId of the channel
     * @param transactions the transactions of the channel to decrypt and clean
     * @returns Promise resolving the kept transactions and the ignored ones with the reason
     */
    decryptAndCleanChannel(channelId: string, transactions: TransactionTypes.ITimestampedTransaction[]): Promise<{
        encryptionMethod: string | undefined;
        transactions: Array<TransactionTypes.ITimestampedTransaction | null>;
        ignoredTransactions: Array<TransactionTypes.IIgnoredTransaction | null>;
    }>;
    /**
     * Get channel type and channel key from a list of transactions (if applicable)
     *
     * @param _channelId the channelId of the channel
     * @param transactions the transactions of the channel to decrypt and clean
     * @returns Promise resolving the channel type and the channel key (if applicable)
     */
    getChannelTypeAndChannelKey(_channelId: string, transactions: TransactionTypes.ITimestampedTransaction[]): Promise<{
        channelType: TransactionTypes.ChannelType;
        channelKey: EncryptionTypes.IDecryptionParameters | undefined;
        encryptionMethod: string | undefined;
    }>;
}
//# sourceMappingURL=channel-parser.d.ts.map