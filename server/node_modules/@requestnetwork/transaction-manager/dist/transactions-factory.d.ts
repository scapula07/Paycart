import { EncryptionTypes, TransactionTypes } from '@requestnetwork/types';
/**
 * Class to create transactions (clear and encrypted)
 */
export default class TransactionsFactory {
    /**
     * Creates a clear transaction with data
     *
     * @param data The data to create the transaction with
     * @returns the transaction
     */
    static createClearTransaction(data: TransactionTypes.ITransactionData): Promise<TransactionTypes.IPersistedTransaction>;
    /**
     * Creates an encrypted transaction without a channel key
     *
     * @param data The data to create the transaction with
     * @param encryptionParams Array of the encryption parameters to encrypt the key with
     * @returns the encrypted transaction
     */
    static createEncryptedTransactionInNewChannel(data: TransactionTypes.ITransactionData, encryptionParams: EncryptionTypes.IEncryptionParameters[]): Promise<TransactionTypes.IPersistedTransaction>;
    /**
     * Creates an encrypted transaction with a channel key
     *
     * @param data The data to create the transaction with
     * @param channelKey Channel key use to encrypt the transaction
     * @param encryptionParams Array of additional encryption parameters to encrypt the key with
  
     * @returns the encrypted transaction
     */
    static createEncryptedTransaction(data: TransactionTypes.ITransactionData, channelKey: EncryptionTypes.IEncryptionParameters, encryptionParams?: EncryptionTypes.IEncryptionParameters[]): Promise<TransactionTypes.IPersistedTransaction>;
}
//# sourceMappingURL=transactions-factory.d.ts.map