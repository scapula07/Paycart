"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInvoiceTaxTotal = exports.getInvoiceLineTotalWithoutTax = exports.getInvoiceTotalWithoutTax = exports.getInvoiceLineTotal = exports.getInvoiceTotal = void 0;
const ethers_1 = require("ethers");
const getInvoiceTotal = (invoice) => {
    return invoice.invoiceItems.reduce((acc, item) => acc.add((0, exports.getInvoiceLineTotal)(item)), ethers_1.BigNumber.from(0));
};
exports.getInvoiceTotal = getInvoiceTotal;
const getInvoiceLineTotal = (item) => {
    // Support for rnf_version < 0.0.3
    const tax = item.taxPercent
        ? { type: 'percentage', amount: String(item.taxPercent) }
        : item.tax || { type: 'percentage', amount: '0' };
    const taxPercent = tax.amount && tax.type === 'percentage' ? Number(tax.amount) + 100 : 100;
    const taxFixed = tax.amount && tax.type === 'fixed' ? ethers_1.BigNumber.from(tax.amount) : ethers_1.BigNumber.from(0);
    const discount = item.discount ? ethers_1.BigNumber.from(item.discount) : ethers_1.BigNumber.from(0);
    return ethers_1.BigNumber.from(ethers_1.FixedNumber.from(item.unitPrice)
        // accounts for floating quantities
        .mulUnsafe(ethers_1.FixedNumber.fromString(item.quantity.toString()))
        .subUnsafe(ethers_1.FixedNumber.from(discount))
        // accounts for floating taxes
        .mulUnsafe(ethers_1.FixedNumber.fromString(taxPercent.toString()))
        // Removes the percentage multiplier
        .divUnsafe(ethers_1.FixedNumber.from(100))
        .addUnsafe(ethers_1.FixedNumber.from(taxFixed))
        .round(0)
        .toString()
        // Removes the .0
        .split('.')[0]);
};
exports.getInvoiceLineTotal = getInvoiceLineTotal;
const getInvoiceTotalWithoutTax = (invoice) => {
    return invoice.invoiceItems.reduce((acc, item) => acc.add((0, exports.getInvoiceLineTotalWithoutTax)(item)), ethers_1.BigNumber.from(0));
};
exports.getInvoiceTotalWithoutTax = getInvoiceTotalWithoutTax;
const getInvoiceLineTotalWithoutTax = (item) => {
    const discount = item.discount ? ethers_1.BigNumber.from(item.discount) : ethers_1.BigNumber.from(0);
    return ethers_1.BigNumber.from(ethers_1.FixedNumber.from(item.unitPrice)
        // accounts for floating quantities
        .mulUnsafe(ethers_1.FixedNumber.fromString(item.quantity.toString()))
        .subUnsafe(ethers_1.FixedNumber.from(discount))
        .round(0)
        .toString()
        .split('.')[0]);
};
exports.getInvoiceLineTotalWithoutTax = getInvoiceLineTotalWithoutTax;
const getInvoiceTaxTotal = (invoice) => {
    const invoiceTotalWithoutTax = invoice.invoiceItems.reduce((acc, item) => acc.add((0, exports.getInvoiceLineTotalWithoutTax)(item)), ethers_1.BigNumber.from(0));
    const invoiceTotal = invoice.invoiceItems.reduce((acc, item) => acc.add((0, exports.getInvoiceLineTotal)(item)), ethers_1.BigNumber.from(0));
    return invoiceTotal.sub(invoiceTotalWithoutTax);
};
exports.getInvoiceTaxTotal = getInvoiceTaxTotal;
//# sourceMappingURL=utils.js.map