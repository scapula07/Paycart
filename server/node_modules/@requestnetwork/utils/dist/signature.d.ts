import { IdentityTypes, SignatureTypes } from '@requestnetwork/types';
declare const _default: {
    getIdentityFromSignatureParams: typeof getIdentityFromSignatureParams;
    recover: typeof recover;
    sign: typeof sign;
};
/**
 * Function to manage Request Logic Signature
 */
export default _default;
/**
 * Function to get the signer identity from the signature parameters
 *
 * @param ISignatureParameters signatureParams Signature parameters
 *
 * @returns REQUEST_ROLE the role of the signer (payee, payer or third party)
 */
declare function getIdentityFromSignatureParams(signatureParams: SignatureTypes.ISignatureParameters): IdentityTypes.IIdentity;
/**
 * Function to sign data from signature parameters
 *
 * This must be used for test purpose only. A signature providers must be used in production.
 *
 * @param data the data to sign
 * @param signatureParams Signature parameters
 * @returns ISignature the signature
 */
declare function sign(data: unknown, signatureParams: SignatureTypes.ISignatureParameters): SignatureTypes.ISignedData;
/**
 * Function to recover signer identity from a signature
 *
 * IMPORTANT: this is used to recover from the signature made by the signature providers
 *
 * @param signedData the data signed
 * @returns identity of the signer
 */
declare function recover(signedData: SignatureTypes.ISignedData): IdentityTypes.IIdentity;
//# sourceMappingURL=signature.d.ts.map