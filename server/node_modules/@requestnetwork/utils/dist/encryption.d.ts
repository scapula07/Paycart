import { EncryptionTypes, IdentityTypes } from '@requestnetwork/types';
declare const _default: {
    decrypt: typeof decrypt;
    encrypt: typeof encrypt;
    getIdentityFromEncryptionParams: typeof getIdentityFromEncryptionParams;
};
/**
 * Functions to manage encryption
 */
export default _default;
/**
 * Function to get the identity from the encryption parameters
 *
 * @param encryptionParams encryption parameters
 *
 * @returns the identity behind the encryption parameters
 */
declare function getIdentityFromEncryptionParams(encryptionParams: EncryptionTypes.IEncryptionParameters): IdentityTypes.IIdentity;
/**
 * Encrypts data using encryption parameters
 *
 * @param data the data to sign
 * @param encryptionParams Encryption parameters
 * @returns the encrypted data
 */
declare function encrypt(data: string, encryptionParams: EncryptionTypes.IEncryptionParameters): Promise<EncryptionTypes.IEncryptedData>;
/**
 * Decrypt data using decryption parameters
 *
 * IMPORTANT: This must be used for test purpose only. An decryption provider must be used in production.
 *
 * @param encryptedData the encrypted data
 * @param key the decryption parameters
 * @returns the decrypted data
 */
declare function decrypt(encryptedData: EncryptionTypes.IEncryptedData, decryptionParams: EncryptionTypes.IDecryptionParameters): Promise<string>;
//# sourceMappingURL=encryption.d.ts.map