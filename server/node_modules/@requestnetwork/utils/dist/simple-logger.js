"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-console */
const types_1 = require("@requestnetwork/types");
// The default log level to use if none is used at the constructor.
const DEFAULT_LOG_LEVEL = types_1.LogTypes.LogLevel.QUIET;
/**
 * Simple logger that outputs content to the console.
 */
class SimpleLogger {
    /**
     * Creates an instance of SimpleLogger
     *
     * @param [maxLogLevel=DEFAULT_LOG_LEVEL] The maximum log level for this logger
     */
    constructor(maxLogLevel = DEFAULT_LOG_LEVEL) {
        /**
         * The output console to use for logging
         */
        this.output = console;
        this.maxLogLevel = maxLogLevel;
    }
    /**
     * Logs an error message
     *
     * @param message The error message to log
     * @param [tags] The array of tags concerning this message
     */
    error(message, tags) {
        if (this.maxLogLevel >= types_1.LogTypes.LogLevel.ERROR) {
            this.output.error(this.formatLog(types_1.LogTypes.LogLevel.ERROR, message, tags));
        }
    }
    /**
     * Logs a warning message
     *
     * @param message The warning message to log
     * @param [tags] The array of tags concerning this message
     */
    warn(message, tags) {
        if (this.maxLogLevel >= types_1.LogTypes.LogLevel.WARN) {
            this.output.warn(this.formatLog(types_1.LogTypes.LogLevel.WARN, message, tags));
        }
    }
    /**
     * Logs an info message
     *
     * @param message The info message to log
     * @param [tags] The array of tags concerning this message
     */
    info(message, tags) {
        if (this.maxLogLevel >= types_1.LogTypes.LogLevel.INFO) {
            this.output.info(this.formatLog(types_1.LogTypes.LogLevel.INFO, message, tags));
        }
    }
    /**
     * Logs a debug message
     *
     * @param message The debug message to log
     * @param [tags] The array of tags concerning this message
     */
    debug(message, tags) {
        if (this.maxLogLevel >= types_1.LogTypes.LogLevel.DEBUG) {
            this.output.debug(this.formatLog(types_1.LogTypes.LogLevel.DEBUG, message, tags));
        }
    }
    /**
     * Formats the message on the log format
     * The format is: ISO date|level|message|tag1,tag2,...,tagM
     *
     * @param level The log level of the message
     * @param message The log message
     * @param [tags] The log tags
     * @returns A string with the formatted log message
     */
    formatLog(level, message, tags) {
        const now = new Date();
        let log = `${now.toISOString()}|${types_1.LogTypes.LogLevel[level]}|${message}`;
        if (tags && tags.length) {
            this.checkForSeparator(tags, '|');
            const tagList = tags.join(',');
            log += `|${tagList}`;
        }
        return log;
    }
    /**
     * Throws if tags contain the log separator character
     *
     * @param tags The list of tags to check
     * @param separator The log separator character
     */
    checkForSeparator(tags, separator) {
        if (tags.some((tag) => tag.includes(separator))) {
            throw new Error(`Log tags can't can't contain ${separator} character`);
        }
    }
}
exports.default = SimpleLogger;
//# sourceMappingURL=simple-logger.js.map