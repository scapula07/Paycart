/// <reference types="node" />
import { MultiFormatTypes } from '@requestnetwork/types';
declare const _default: {
    CryptoWrapper: {
        decryptWithAes256cbc: (encryptedAndIv: Buffer, key: Buffer) => Promise<Buffer>;
        decryptWithAes256gcm: (encryptedAndIv: Buffer, key: Buffer) => Promise<Buffer>;
        encryptWithAes256cbc: (data: Buffer, key: Buffer) => Promise<Buffer>;
        encryptWithAes256gcm: (data: Buffer, key: Buffer) => Promise<Buffer>;
        random32Bytes: () => Promise<Buffer>;
    };
    EcUtils: {
        decrypt: (privateKey: string, encrypted: string) => Promise<string>; /**
         * manages crypto functions
         */
        encrypt: (publicKey: string, data: string) => Promise<string>;
        getAddressFromPrivateKey: (privateKey: string) => string;
        getAddressFromPublicKey: (publicKey: string) => string;
        recover: (signature: string, data: string) => string;
        sign: (privateKey: string, data: string) => string;
    };
    generate32BufferKey: typeof generate32BufferKey;
    generate8randomBytes: typeof generate8randomBytes;
    keccak256Hash: typeof keccak256Hash;
    last20bytesOfNormalizedKeccak256Hash: typeof last20bytesOfNormalizedKeccak256Hash;
    normalize: typeof normalize;
    normalizeKeccak256Hash: typeof normalizeKeccak256Hash;
};
/**
 * manages crypto functions
 */
export default _default;
/**
 * Hashes with the keccak256 algorithm with a normalization before and formats it
 *
 * @notice It will sort the object by keys before hashing
 *
 * @param data The data to hash
 * @returns The hashed data multi-formatted
 */
declare function normalizeKeccak256Hash(data: unknown): MultiFormatTypes.HashTypes.IHash;
/**
 * Normalizes data: sorts the object by keys and convert it in string
 *
 * @param data The data to normalize
 * @returns The normalized data
 */
declare function normalize(data: unknown): string;
/**
 * Hashes with the keccak256 algorithm
 *
 * @param data The string to hash
 * @returns The hashed data multi-formatted
 */
declare function keccak256Hash(data: string): string;
/**
 * Hashes with the keccak256 algorithm with a normalization before and formats it
 *
 * @notice It will sort the object by keys before hashing
 *
 * @param data The data to hash
 * @returns The hashed data multi-formatted
 */
declare function last20bytesOfNormalizedKeccak256Hash(data: unknown): string;
/**
 * Generates a 32 bytes key in a base64 string
 *
 * @returns a random buffer of 32 bytes in a base64 string
 */
declare function generate32BufferKey(): Promise<string>;
/**
 * Generate 8 random bytes and return as a hexadecimal string.
 * Used for salt in ETH input data.
 * Example: 'ea3bc7caf64110ca'
 *
 * @returns a string of 8 random bytes
 */
declare function generate8randomBytes(): Promise<string>;
//# sourceMappingURL=crypto.d.ts.map