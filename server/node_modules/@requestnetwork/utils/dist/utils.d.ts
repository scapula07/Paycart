declare const _default: {
    deepCopy: typeof deepCopy;
    deepSort: typeof deepSort;
    flatten2DimensionsArray: typeof flatten2DimensionsArray;
    getCurrentTimestampInSecond: typeof getCurrentTimestampInSecond;
    isString: typeof isString;
    timeoutPromise: typeof timeoutPromise;
    unique: typeof unique;
    uniqueByProperty: typeof uniqueByProperty;
    notNull: typeof notNull;
};
/**
 * Collection of general purpose utility function
 */
export default _default;
/**
 * Function to check if a variable is a string
 *
 * @param any variable variable to check
 *
 * @returns boolean true, if variable is a string or a String
 */
declare function isString(variable: any): boolean;
/**
 * Function return a deep copy of the parameter
 *
 * @param any variable variable to copy
 *
 * @returns any the deep copy
 */
declare function deepCopy<T>(variable: T): T;
/**
 * Function return the object with keys deeply sorted
 *
 * @param any nestedObject the object to deeply sort
 *
 * @returns any the object deeply sorted
 */
declare function deepSort(nestedObject: any): any;
/**
 * Separates the duplicated object from an array
 * Two object are assumed identical if their normalized Keccak256 hashes are equal
 * Normalize here is a lowed case JSON stringify of the properties alphabetical sorted
 *
 * @param array the array to curate
 * @returns an object containing the array with only unique element and an object with the duplication
 */
declare function unique<T>(array: T[]): {
    uniqueItems: T[];
    duplicates: T[];
};
/**
 * Separates the duplicated object from an array from a property
 * Two object are assumed identical if the value of the properties whose name is given in parameter have their normalized Keccak256 hashes equals
 * Normalize here is a lowed case JSON stringify of the properties alphabetical sorted
 *
 * @param array the array to curate
 * @returns an object containing the array with only unique element and an object with the duplication
 */
declare function uniqueByProperty<T>(array: T[], property: keyof T): {
    uniqueItems: T[];
    duplicates: T[];
};
/**
 * Function return the timestamp in second
 *
 * @returns number current timestamp in second
 */
declare function getCurrentTimestampInSecond(): number;
/** Function return a two dimensions array flatten
 * @param any[] twoDimensionsArray the array to flatten
 *
 * @returns any[] the flat array
 */
declare function flatten2DimensionsArray<T>(twoDimensionsArray: T[][]): T[];
/**
 * Function that returns a promise that rejects when the specified timeout is reached
 * @param timeout Timeout threshold to throw the error
 * @param message Timeout error message
 */
declare function timeoutPromise<T>(promise: Promise<T>, timeout: number, message: string): Promise<T>;
declare function notNull<T>(x: T | null | undefined): x is T;
//# sourceMappingURL=utils.d.ts.map