import { ClientTypes, DataAccessTypes } from '@requestnetwork/types';
import { AxiosRequestConfig } from 'axios';
import HttpDataAccess from './http-data-access';
/**
 * Exposes a Data-Access module over HTTP
 */
export default class HttpMetaMaskDataAccess extends HttpDataAccess {
    /**
     * Cache block persisted directly (in case the node did not have the time to retrieve it)
     * (public for easier testing)
     */
    cache: {
        [channelId: string]: {
            [ipfsHash: string]: {
                block: DataAccessTypes.IBlock;
                storageMeta: any;
            } | null;
        };
    };
    private submitterContract;
    private provider;
    private networkName;
    /**
     * Creates an instance of HttpDataAccess.
     * @param httpConfig Http config that will be used by the underlying http-data-access. @see ClientTypes.IHttpDataAccessConfig
     * @param nodeConnectionConfig Configuration options to connect to the node. Follows Axios configuration format.
     */
    constructor({ httpConfig, nodeConnectionConfig, web3, ethereumProviderUrl, }?: {
        httpConfig?: Partial<ClientTypes.IHttpDataAccessConfig>;
        nodeConnectionConfig?: AxiosRequestConfig;
        web3?: any;
        ethereumProviderUrl?: string;
    });
    /**
     * Initialize the module. Does nothing, exists only to implement IDataAccess
     *
     * @returns nothing
     */
    initialize(): Promise<void>;
    /**
     * Persists a new transaction using the node only for IPFS but persisting on ethereum through local provider
     *
     * @param transactionData The transaction data
     * @param topics The topics used to index the transaction
     */
    persistTransaction(transactionData: DataAccessTypes.ITransaction, channelId: string, topics?: string[]): Promise<DataAccessTypes.IReturnPersistTransaction>;
    /**
     * Gets the transactions for a channel from the node through HTTP.
     *
     * @param channelId The channel id to search for
     * @param timestampBoundaries filter timestamp boundaries
     */
    getTransactionsByChannelId(channelId: string, timestampBoundaries?: DataAccessTypes.ITimestampBoundaries): Promise<DataAccessTypes.IReturnGetTransactions>;
    /**
     * Gets the cached transactions and remove the ones that have been retrieved from the node
     * (public for easier testing)
     *
     * @param channelId The channel id to search for
     * @param storageLocationFromNode location retrieved from the node
     * @param timestampBoundaries filter timestamp boundaries
     */
    getCachedTransactionsAndCleanCache(channelId: string, storageLocationFromNode: string[], timestampBoundaries?: DataAccessTypes.ITimestampBoundaries): DataAccessTypes.IReturnGetTransactions;
}
//# sourceMappingURL=http-metamask-data-access.d.ts.map