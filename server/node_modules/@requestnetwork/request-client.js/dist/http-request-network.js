"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const currency_1 = require("@requestnetwork/currency");
const request_network_1 = require("./api/request-network");
const http_data_access_1 = require("./http-data-access");
const mock_data_access_1 = require("./mock-data-access");
const mock_storage_1 = require("./mock-storage");
/**
 * Exposes RequestNetwork module configured to use http-data-access.
 */
class HttpRequestNetwork extends request_network_1.default {
    /**
     * Creates an instance of HttpRequestNetwork.
     *
     * @param options.httpConfig Http config that will be used by the underlying data-access. @see ClientTypes.IHttpDataAccessConfig for available options.
     * @param options.nodeConnectionConfig Configuration options to connect to the node. Follows Axios configuration format.
     * @param options.useMockStorage When true, will use a mock storage in memory. Meant to simplify local development and should never be used in production.
     * @param options.signatureProvider Module to handle the signature. If not given it will be impossible to create new transaction (it requires to sign).
     * @param options.currencies custom currency list
     * @param options.currencyManager custom currency manager (will override `currencies`)
     */
    constructor({ decryptionProvider, httpConfig, nodeConnectionConfig, signatureProvider, useMockStorage, currencies, currencyManager, paymentOptions, } = {
        httpConfig: {},
        nodeConnectionConfig: {},
        useMockStorage: false,
    }) {
        const dataAccess = useMockStorage
            ? new mock_data_access_1.default(new mock_storage_1.default())
            : new http_data_access_1.default({ httpConfig, nodeConnectionConfig });
        if (!currencyManager) {
            currencyManager = new currency_1.CurrencyManager(currencies || currency_1.CurrencyManager.getDefaultList());
        }
        super({ dataAccess, signatureProvider, decryptionProvider, currencyManager, paymentOptions });
    }
}
exports.default = HttpRequestNetwork;
//# sourceMappingURL=http-request-network.js.map