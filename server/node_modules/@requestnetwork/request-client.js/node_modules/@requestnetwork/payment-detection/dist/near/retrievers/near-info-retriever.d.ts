import { CurrencyTypes, PaymentTypes } from '@requestnetwork/types';
import { TheGraphClient } from '../../thegraph';
import { ITheGraphBaseInfoRetriever } from 'payment-detection/src/types';
export interface NearPaymentEvent extends PaymentTypes.IERC20FeePaymentEventParameters {
    receiptId: string;
}
export type TransferEventsParams = {
    /** The reference to identify the payment*/
    paymentReference: string;
    /** The recipient of the transfer */
    toAddress: string;
    /** The address of the payment proxy */
    contractAddress: string;
    /** The chain to check for payment */
    paymentChain: CurrencyTypes.VMChainName;
    /** Indicates if it is an address for payment or refund */
    eventName: PaymentTypes.EVENTS_NAMES;
    /** The list of ERC20 tokens addresses accepted for payments and refunds. Set to `undefined` for payments in NEAR token. */
    acceptedTokens?: string[];
};
/**
 * Gets a list of transfer events for a set of Near payment details
 * TheGraph-based etriever for ERC20 Fee Proxy and Native token payments.
 */
export declare class NearInfoRetriever implements ITheGraphBaseInfoRetriever<NearPaymentEvent> {
    protected readonly client: TheGraphClient<CurrencyTypes.NearChainName>;
    /**
     * @param paymentReference The reference to identify the payment
     * @param toAddress Address to check
     * @param eventName Indicate if it is an address for payment or refund
     *
     */
    constructor(client: TheGraphClient<CurrencyTypes.NearChainName>);
    getTransferEvents(params: TransferEventsParams): Promise<PaymentTypes.AllNetworkEvents<NearPaymentEvent>>;
    private mapPaymentEvent;
}
//# sourceMappingURL=near-info-retriever.d.ts.map