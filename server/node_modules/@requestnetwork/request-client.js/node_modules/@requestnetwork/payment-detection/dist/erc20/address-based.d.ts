import { AdvancedLogicTypes, ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { PaymentDetectorBase } from '../payment-detector-base';
/**
 * Handle payment networks with ERC20 based address extension
 */
export declare class ERC20AddressBasedPaymentDetector extends PaymentDetectorBase<ExtensionTypes.PnAddressBased.IAddressBased<ExtensionTypes.PnAddressBased.ICreationParameters>, PaymentTypes.IERC20PaymentEventParameters> {
    /**
     * @param extension The advanced logic payment network extensions
     */
    constructor({ advancedLogic }: {
        advancedLogic: AdvancedLogicTypes.IAdvancedLogic;
    });
    /**
     * Creates the extensions data for the creation of this extension
     *
     * @param paymentNetworkCreationParameters Parameters to create the extension
     * @returns The extensionData object
     */
    createExtensionsDataForCreation(paymentNetworkCreationParameters: ExtensionTypes.PnAddressBased.ICreationParameters): Promise<ExtensionTypes.IAction>;
    /**
     * Creates the extensions data to add payment address
     *
     * @param parameters to add payment information
     * @returns The extensionData object
     */
    createExtensionsDataForAddPaymentInformation(parameters: ExtensionTypes.PnAddressBased.IAddPaymentAddressParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensions data to add refund address
     *
     * @param Parameters to add refund information
     * @returns The extensionData object
     */
    createExtensionsDataForAddRefundInformation(parameters: ExtensionTypes.PnAddressBased.IAddRefundAddressParameters): ExtensionTypes.IAction;
    /**
     * Gets the balance and the payment/refund events
     *
     * @param request the request to check
     * @returns the balance and the payment/refund events
     */
    protected getEvents(request: RequestLogicTypes.IRequest): Promise<PaymentTypes.AllNetworkEvents<PaymentTypes.IERC20PaymentEventParameters>>;
    /**
     * Extracts the balance and events of an address
     *
     * @private
     * @param address Address to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param network The id of network we want to check
     * @param tokenContractAddress the address of the token contract
     * @returns The balance
     */
    private extractTransferEvents;
}
//# sourceMappingURL=address-based.d.ts.map