import { CurrencyTypes, ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { ICurrencyManager } from '@requestnetwork/currency';
import { DeclarativePaymentDetectorBase } from './declarative';
/**
 * Abstract class to extend to get the payment balance of reference based requests
 */
export declare abstract class ReferenceBasedDetector<TExtension extends ExtensionTypes.PnReferenceBased.IReferenceBased, TPaymentEventParameters extends PaymentTypes.IDeclarativePaymentEventParameters<string>> extends DeclarativePaymentDetectorBase<TExtension, TPaymentEventParameters | PaymentTypes.IDeclarativePaymentEventParameters> {
    protected readonly currencyManager: ICurrencyManager;
    /**
     * @param paymentNetworkId Example : ExtensionTypes.PAYMENT_NETWORK_ID.ETH_INPUT_DATA
     * @param extension The advanced logic payment network extension, reference based
     * @param currencyManager The currency manager
     */
    protected constructor(paymentNetworkId: ExtensionTypes.PAYMENT_NETWORK_ID, extension: TExtension, currencyManager: ICurrencyManager);
    /**
     * Creates the extensions data for the creation of this extension.
     * Will set a salt if none is already given
     *
     * @param paymentNetworkCreationParameters Parameters to create the extension
     * @returns The extensionData object
     */
    createExtensionsDataForCreation(paymentNetworkCreationParameters: ExtensionTypes.PnReferenceBased.ICreationParameters): Promise<ExtensionTypes.IAction>;
    /**
     * Creates the extensions data to add payment address
     *
     * @param parameters to add payment address
     * @returns The extensionData object
     */
    createExtensionsDataForAddPaymentAddress(parameters: ExtensionTypes.PnReferenceBased.IAddPaymentAddressParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensions data to add refund address
     *
     * @param Parameters to add refund address
     * @returns The extensionData object
     */
    createExtensionsDataForAddRefundAddress(parameters: ExtensionTypes.PnReferenceBased.IAddRefundAddressParameters): ExtensionTypes.IAction;
    protected getEvents(request: RequestLogicTypes.IRequest): Promise<PaymentTypes.AllNetworkEvents<TPaymentEventParameters | PaymentTypes.IDeclarativePaymentEventParameters>>;
    /**
     * Extracts payment events of an address matching an address and a payment reference
     *
     * @param eventName Indicate if it is an address for payment or refund
     * @param address Address to check
     * @param paymentReference The reference to identify the payment
     * @param requestCurrency The request currency
     * @param paymentChain the payment network
     * @param paymentExtension the payment network
     * @returns The balance
     */
    protected abstract extractEvents(eventName: PaymentTypes.EVENTS_NAMES, address: string | undefined, paymentReference: string, requestCurrency: RequestLogicTypes.ICurrency, paymentChain: CurrencyTypes.ChainName, paymentNetwork: TExtension extends ExtensionTypes.IExtension<infer X> ? ExtensionTypes.IState<X> : never): Promise<PaymentTypes.AllNetworkEvents<TPaymentEventParameters>>;
    /**
     * Get the network of the payment
     * @returns The network of payment
     */
    protected getPaymentChain(request: RequestLogicTypes.IRequest): CurrencyTypes.ChainName;
    protected getPaymentReference(request: RequestLogicTypes.IRequest): string;
}
//# sourceMappingURL=reference-based-detector.d.ts.map