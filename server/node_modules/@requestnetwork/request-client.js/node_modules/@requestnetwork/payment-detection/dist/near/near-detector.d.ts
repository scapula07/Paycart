import { CurrencyTypes, ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { NativeTokenPaymentDetector } from '../native-token-detector';
import { NativeDetectorOptions } from '../types';
/**
 * Handle payment detection for NEAR native token payment
 */
export declare class NearNativeTokenPaymentDetector extends NativeTokenPaymentDetector {
    constructor(args: NativeDetectorOptions);
    static getContractName: (chainName: CurrencyTypes.NearChainName, paymentNetworkVersion?: string) => string;
    /**
     * Extracts the events for an address and a payment reference
     *
     * @param address Address to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param paymentReference The reference to identify the payment
     * @param paymentNetwork the payment network state
     * @returns The balance with events
     */
    protected extractEvents(eventName: PaymentTypes.EVENTS_NAMES, address: string | undefined, paymentReference: string, _requestCurrency: RequestLogicTypes.ICurrency, paymentChain: CurrencyTypes.NearChainName, paymentNetwork: ExtensionTypes.IState<ExtensionTypes.PnReferenceBased.ICreationParameters>): Promise<PaymentTypes.AllNetworkRetrieverEvents<PaymentTypes.ETHPaymentNetworkEvent>>;
    protected static getVersionOrThrow: (paymentNetworkVersion: string) => string;
}
//# sourceMappingURL=near-detector.d.ts.map