import { BigNumber } from 'ethers';
import { ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { ICurrencyManager } from '@requestnetwork/currency';
import { ReferenceBasedDetector } from './reference-based-detector';
/**
 * Abstract class to extend to get the payment balance of reference based requests
 */
export declare abstract class FeeReferenceBasedDetector<TExtension extends ExtensionTypes.PnFeeReferenceBased.IFeeReferenceBased, TPaymentEventParameters extends PaymentTypes.IDeclarativePaymentEventParameters<string> & {
    feeAddress?: string;
    feeAmount?: string;
}> extends ReferenceBasedDetector<TExtension, TPaymentEventParameters> {
    /**
     * @param paymentNetworkId Example : ExtensionTypes.PAYMENT_NETWORK_ID.ETH_INPUT_DATA
     * @param extension The advanced logic payment network extension, reference based
     */
    protected constructor(paymentNetworkId: ExtensionTypes.PAYMENT_NETWORK_ID, extension: TExtension, currencyManager: ICurrencyManager);
    /**
     * Creates the extensions data for the creation of this extension.
     * Will set a salt if none is already given
     *
     * @param paymentNetworkCreationParameters Parameters to create the extension
     * @returns The extensionData object
     */
    createExtensionsDataForCreation(paymentNetworkCreationParameters: ExtensionTypes.PnFeeReferenceBased.ICreationParameters): Promise<ExtensionTypes.IAction>;
    /**
     * Creates the extensions data to add fee address and amount
     *
     * @param Parameters to add refund information
     * @returns The extensionData object
     */
    createExtensionsDataForAddFeeInformation(parameters: ExtensionTypes.PnFeeReferenceBased.IAddFeeParameters): ExtensionTypes.IAction;
    getBalance(request: RequestLogicTypes.IRequest): Promise<PaymentTypes.IBalanceWithEvents<TPaymentEventParameters | PaymentTypes.IDeclarativePaymentEventParameters>>;
    getFeeBalance(request: RequestLogicTypes.IRequest, balance: PaymentTypes.IBalanceWithEvents<TPaymentEventParameters | PaymentTypes.IDeclarativePaymentEventParameters>): Promise<PaymentTypes.IBalanceWithEvents<TPaymentEventParameters | PaymentTypes.IDeclarativePaymentEventParameters>>;
    protected computeFeeBalance(feeEvents: PaymentTypes.IPaymentNetworkEvent<TPaymentEventParameters | PaymentTypes.IDeclarativePaymentEventParameters>[], feeAddress: string): BigNumber;
}
//# sourceMappingURL=fee-reference-based-detector.d.ts.map