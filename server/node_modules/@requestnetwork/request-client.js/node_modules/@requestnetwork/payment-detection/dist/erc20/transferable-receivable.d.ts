import { ExtensionTypes, PaymentTypes, RequestLogicTypes, CurrencyTypes } from '@requestnetwork/types';
import { PaymentNetworkOptions, ReferenceBasedDetectorOptions } from '../types';
import { FeeReferenceBasedDetector } from '../fee-reference-based-detector';
/**
 * Handle payment networks with ERC20 transferable receivable contract extension
 */
export declare class ERC20TransferableReceivablePaymentDetector extends FeeReferenceBasedDetector<ExtensionTypes.PnFeeReferenceBased.IFeeReferenceBased, PaymentTypes.IERC20PaymentEventParameters> {
    private readonly getSubgraphClient;
    /**
     * @param extension The advanced logic payment network extensions
     */
    constructor({ advancedLogic, currencyManager, getSubgraphClient, }: ReferenceBasedDetectorOptions & Pick<PaymentNetworkOptions<CurrencyTypes.EvmChainName>, 'getSubgraphClient'>);
    /**
     * Extracts the balance and events of an address
     *
     * @private
     * @param address Address to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param network The id of network we want to check
     * @param tokenContractAddress the address of the token contract
     * @returns The balance and events
     */
    protected extractEvents(eventName: PaymentTypes.EVENTS_NAMES, toAddress: string | undefined, paymentReference: string, requestCurrency: RequestLogicTypes.ICurrency, paymentChain: CurrencyTypes.EvmChainName, paymentNetwork: ExtensionTypes.IState<ExtensionTypes.PnReferenceBased.ICreationParameters>): Promise<PaymentTypes.AllNetworkEvents<PaymentTypes.IERC20PaymentEventParameters>>;
    static getDeploymentInformation: import("../utils").GetDeploymentInformation<false>;
}
//# sourceMappingURL=transferable-receivable.d.ts.map