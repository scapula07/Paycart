import { CurrencyTypes, ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { CurrencyDefinition, ICurrencyManager } from '@requestnetwork/currency';
import { FeeReferenceBasedDetector } from '../fee-reference-based-detector';
import { TheGraphClient, TheGraphInfoRetriever } from '../thegraph';
import { ReferenceBasedDetectorOptions, TGetSubGraphClient } from '../types';
import { NearInfoRetriever } from '../near';
/**
 * Handle payment networks with ERC20 fee proxy contract extension, or derived
 */
export declare abstract class ERC20FeeProxyPaymentDetectorBase<TExtension extends ExtensionTypes.PnFeeReferenceBased.IFeeReferenceBased, TPaymentEventParameters extends PaymentTypes.IERC20FeePaymentEventParameters> extends FeeReferenceBasedDetector<TExtension, TPaymentEventParameters> {
    /**
     * @param extension The advanced logic payment network extensions
     */
    protected constructor(paymentNetworkId: ExtensionTypes.PAYMENT_NETWORK_ID, extension: TExtension, currencyManager: ICurrencyManager);
    protected getCurrency(storageCurrency: RequestLogicTypes.ICurrency): Promise<CurrencyDefinition>;
    static getDeploymentInformation: import("../utils").GetDeploymentInformation<false>;
}
/**
 * Handle payment networks with ERC20 fee proxy contract extension on EVM (default) or Near chains
 */
export declare class ERC20FeeProxyPaymentDetector<TChain extends CurrencyTypes.VMChainName = CurrencyTypes.EvmChainName> extends ERC20FeeProxyPaymentDetectorBase<ExtensionTypes.PnFeeReferenceBased.IFeeReferenceBased, PaymentTypes.IERC20FeePaymentEventParameters> {
    private readonly getSubgraphClient;
    protected readonly network: TChain | undefined;
    constructor({ advancedLogic, currencyManager, getSubgraphClient, network, }: ReferenceBasedDetectorOptions & {
        network?: TChain;
        getSubgraphClient: TGetSubGraphClient<TChain>;
    });
    /**
     * Extracts the payment events of a request
     */
    protected extractEvents(eventName: PaymentTypes.EVENTS_NAMES, toAddress: string | undefined, paymentReference: string, requestCurrency: RequestLogicTypes.ICurrency, paymentChain: TChain, paymentNetwork: ExtensionTypes.IState): Promise<PaymentTypes.AllNetworkEvents<PaymentTypes.IERC20FeePaymentEventParameters>>;
    protected getTheGraphInfoRetriever(paymentChain: TChain, subgraphClient: TheGraphClient | TheGraphClient<CurrencyTypes.NearChainName>): TheGraphInfoRetriever | NearInfoRetriever;
}
//# sourceMappingURL=fee-proxy-contract.d.ts.map