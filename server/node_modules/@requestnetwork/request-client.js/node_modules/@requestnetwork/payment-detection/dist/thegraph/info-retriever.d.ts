import { PaymentTypes } from '@requestnetwork/types';
import { ICurrencyManager } from '@requestnetwork/currency';
import type { TheGraphClient } from '.';
import type { PaymentEventResultFragment } from './generated/graphql';
import { TransferEventsParams, ITheGraphBaseInfoRetriever } from '../types';
/**
 * TheGraph info retriever for payments without conversion on EVMs
 */
export declare class TheGraphInfoRetriever<TGraphQuery extends TransferEventsParams = TransferEventsParams> implements ITheGraphBaseInfoRetriever<PaymentTypes.IERC20FeePaymentEventParameters> {
    protected readonly client: TheGraphClient;
    protected readonly currencyManager: ICurrencyManager;
    constructor(client: TheGraphClient, currencyManager: ICurrencyManager);
    getTransferEvents(params: TGraphQuery): Promise<PaymentTypes.AllNetworkEvents<PaymentTypes.IERC20FeePaymentEventParameters>>;
    getReceivableEvents(params: TGraphQuery): Promise<PaymentTypes.AllNetworkEvents<PaymentTypes.IERC20FeePaymentEventParameters>>;
    protected mapPaymentEvents(payment: PaymentEventResultFragment, params: TGraphQuery): PaymentTypes.IPaymentNetworkEvent<PaymentTypes.IERC20FeePaymentEventParameters>;
    private mapEscrowEvents;
}
//# sourceMappingURL=info-retriever.d.ts.map