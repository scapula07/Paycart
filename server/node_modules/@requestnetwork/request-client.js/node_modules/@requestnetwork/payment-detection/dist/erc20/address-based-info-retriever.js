"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ethers_1 = require("ethers");
const utils_1 = require("@requestnetwork/utils");
// The ERC20 smart contract ABI fragment containing decimals property and Transfer event
const erc20BalanceOfAbiFragment = [
    // decimals property
    {
        constant: true,
        inputs: [],
        name: 'decimals',
        outputs: [
            {
                name: '',
                type: 'uint8',
            },
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    // Transfer events
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                name: 'from',
                type: 'address',
            },
            {
                indexed: true,
                name: 'to',
                type: 'address',
            },
            {
                indexed: false,
                name: 'value',
                type: 'uint256',
            },
        ],
        name: 'Transfer',
        type: 'event',
    },
];
/**
 * Retrieves a list of transfer events for an address
 */
class ERC20InfoRetriever {
    /**
     * @param tokenContractAddress The address of the ERC20 contract
     * @param toAddress Address of the balance we want to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param network The Ethereum network to use
     */
    constructor(tokenContractAddress, toAddress, eventName, network) {
        this.tokenContractAddress = tokenContractAddress;
        this.toAddress = toAddress;
        this.eventName = eventName;
        this.network = network;
    }
    /**
     * Retrieves transfer events for the current contract, address and network.
     */
    getTransferEvents() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Creates a local or default provider
            const provider = (0, utils_1.getDefaultProvider)(this.network);
            // Set up the ERC20 contract interface
            const contract = new ethers_1.ethers.Contract(this.tokenContractAddress, erc20BalanceOfAbiFragment, provider);
            // Create a filter to find all the Transfer logs for the toAddress
            console.warn('It is not recommended to use the ERC20InfoRetriever to retrieve ' +
                'all Transfer events from block "0" to block "latest", ' +
                'as this operation is not supported by most RPC providers');
            const filter = contract.filters.Transfer(null, this.toAddress);
            filter.fromBlock = 0;
            filter.toBlock = 'latest';
            // Get the event logs
            const logs = yield provider.getLogs(filter);
            // Clean up the Transfer logs data
            const eventPromises = logs.map((log) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (!log.blockNumber) {
                    throw new Error('Block number not found');
                }
                const block = yield provider.getBlock(log.blockNumber);
                const parsedLog = contract.interface.parseLog(log);
                return {
                    amount: parsedLog.args.value.toString(),
                    name: this.eventName,
                    parameters: {
                        block: block.number,
                        from: parsedLog.args.from,
                        to: parsedLog.args.to,
                        txHash: log.transactionHash,
                    },
                    timestamp: block.timestamp,
                };
            }));
            return Promise.all(eventPromises);
        });
    }
}
exports.default = ERC20InfoRetriever;
//# sourceMappingURL=address-based-info-retriever.js.map