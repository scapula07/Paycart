"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BtcAddressBasedDetector = void 0;
const tslib_1 = require("tslib");
const types_1 = require("@requestnetwork/types");
const default_bitcoin_detection_provider_1 = require("./default-bitcoin-detection-provider");
const payment_detector_base_1 = require("../payment-detector-base");
/**
 * Handle payment networks with BTC based address extension
 */
class BtcAddressBasedDetector extends payment_detector_base_1.PaymentDetectorBase {
    /**
     * @param extension The advanced logic payment network extensions
     */
    constructor(networkId, paymentNetworkId, extension, bitcoinDetectionProvider = new default_bitcoin_detection_provider_1.DefaultBitcoinDetectionProvider()) {
        super(paymentNetworkId, extension);
        this.networkId = networkId;
        this.bitcoinDetectionProvider = bitcoinDetectionProvider;
    }
    /**
     * Creates the extensions data for the creation of this extension
     *
     * @param paymentNetworkCreationParameters Parameters to create the extension
     * @returns The extensionData object
     */
    createExtensionsDataForCreation(paymentNetworkCreationParameters) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.extension.createCreationAction({
                paymentAddress: paymentNetworkCreationParameters.paymentAddress,
                refundAddress: paymentNetworkCreationParameters.refundAddress,
            });
        });
    }
    /**
     * Creates the extensions data to add payment address
     *
     * @param Parameters to add payment information
     * @returns The extensionData object
     */
    createExtensionsDataForAddPaymentInformation(parameters) {
        return this.extension.createAddPaymentAddressAction({
            paymentAddress: parameters.paymentAddress,
        });
    }
    /**
     * Creates the extensions data to add refund address
     *
     * @param Parameters to add refund information
     * @returns The extensionData object
     */
    createExtensionsDataForAddRefundInformation(parameters) {
        return this.extension.createAddRefundAddressAction({
            refundAddress: parameters.refundAddress,
        });
    }
    /**
     * Extracts the balance and events of an address
     *
     * @private
     * @param address Address to check
     * @param eventName Indicate if it is an address for payment or refund
     * @returns The balance
     */
    getEvents(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { paymentAddress, refundAddress } = this.getPaymentExtension(request).values;
            this.checkRequiredParameter(paymentAddress, 'paymentAddress');
            const [payments, refunds] = yield Promise.all([
                yield this.bitcoinDetectionProvider.getAddressBalanceWithEvents(this.networkId, paymentAddress, types_1.PaymentTypes.EVENTS_NAMES.PAYMENT),
                refundAddress
                    ? yield this.bitcoinDetectionProvider.getAddressBalanceWithEvents(this.networkId, refundAddress, types_1.PaymentTypes.EVENTS_NAMES.REFUND)
                    : { events: [] },
            ]);
            const paymentEvents = [...payments.events, ...refunds.events];
            return {
                paymentEvents,
            };
        });
    }
}
exports.BtcAddressBasedDetector = BtcAddressBasedDetector;
//# sourceMappingURL=address-based.js.map