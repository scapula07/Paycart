import { CurrencyTypes, ExtensionTypes, PaymentTypes, RequestLogicTypes } from '@requestnetwork/types';
import { FeeReferenceBasedDetector } from '../fee-reference-based-detector';
import { PaymentNetworkOptions, ReferenceBasedDetectorOptions } from '../types';
/**
 * Handle payment networks with ETH fee proxy extension
 */
export declare class EthFeeProxyPaymentDetector extends FeeReferenceBasedDetector<ExtensionTypes.PnFeeReferenceBased.IFeeReferenceBased, PaymentTypes.IETHFeePaymentEventParameters> {
    private readonly getSubgraphClient;
    /**
     * @param extension The advanced logic payment network extensions
     */
    constructor({ advancedLogic, currencyManager, getSubgraphClient, }: ReferenceBasedDetectorOptions & Pick<PaymentNetworkOptions<CurrencyTypes.EvmChainName>, 'getSubgraphClient'>);
    /**
     * Extracts payment events of an address matching an address and a payment reference
     *
     * @param eventName Indicate if it is an address for payment or refund
     * @param toAddress Address to check
     * @param paymentReference The reference to identify the payment
     * @param _requestCurrency The request currency
     * @param paymentChain the name of the payment (block)chain
     * @param paymentNetwork the payment network
     * @returns The balance
     */
    protected extractEvents(eventName: PaymentTypes.EVENTS_NAMES, toAddress: string | undefined, paymentReference: string, _requestCurrency: RequestLogicTypes.ICurrency, paymentChain: CurrencyTypes.EvmChainName, paymentNetwork: ExtensionTypes.PnFeeReferenceBased.IFeeReferenceBased extends ExtensionTypes.IExtension<infer X> ? ExtensionTypes.IState<X> : never): Promise<PaymentTypes.AllNetworkEvents<PaymentTypes.IETHPaymentEventParameters>>;
    static getDeploymentInformation: import("../utils").GetDeploymentInformation<false>;
}
//# sourceMappingURL=fee-proxy-detector.d.ts.map