import { CurrencyTypes, PaymentTypes } from '@requestnetwork/types';
import { CurrencyDefinition } from '@requestnetwork/currency';
import { NearInfoRetriever, NearPaymentEvent } from './near-info-retriever';
import { TheGraphClient } from '../../thegraph';
export type TransferEventsParams = {
    /** The reference to identify the payment*/
    paymentReference: string;
    /** Request denomination (usually fiat) */
    requestCurrency: CurrencyDefinition;
    /** The recipient of the transfer */
    toAddress: string;
    /** The address of the payment proxy */
    contractAddress: string;
    /** The chain to check for payment */
    paymentChain: CurrencyTypes.VMChainName;
    /** Indicates if it is an address for payment or refund */
    eventName: PaymentTypes.EVENTS_NAMES;
    /** The maximum span between the time the rate was fetched and the payment */
    maxRateTimespan?: number;
};
/**
 * Gets a list of transfer events for a set of Near payment details
 */
export declare class NearConversionInfoRetriever extends NearInfoRetriever {
    protected readonly client: TheGraphClient<CurrencyTypes.NearChainName>;
    /**
     * @param paymentReference The reference to identify the payment
     * @param toAddress Address to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param network The id of network we want to check
     */
    constructor(client: TheGraphClient<CurrencyTypes.NearChainName>);
    getTransferEvents(params: TransferEventsParams): Promise<PaymentTypes.AllNetworkEvents<NearPaymentEvent>>;
}
//# sourceMappingURL=near-conversion-info-retriever.d.ts.map