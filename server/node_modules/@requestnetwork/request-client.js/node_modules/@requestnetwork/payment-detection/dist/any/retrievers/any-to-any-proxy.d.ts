import { CurrencyDefinition } from '@requestnetwork/currency';
import { PaymentTypes } from '@requestnetwork/types';
import { ethers } from 'ethers';
import type { JsonFragment } from '@ethersproject/abi';
/**
 * Retrieves a list of payment events from a payment reference, a destination address, a token address and a proxy contract
 */
export declare abstract class ConversionInfoRetriever {
    protected requestCurrency: CurrencyDefinition;
    protected paymentReference: string;
    protected conversionProxyContractAddress: string;
    protected conversionProxyCreationBlockNumber: number;
    protected conversionProxyContractAbiFragment: JsonFragment[];
    protected toAddress: string;
    protected eventName: PaymentTypes.EVENTS_NAMES;
    protected network: string;
    protected acceptedTokens?: string[] | undefined;
    protected maxRateTimespan: number;
    contractConversionProxy: ethers.Contract;
    provider: ethers.providers.Provider;
    /**
     * @param requestCurrency The request currency
     * @param paymentReference The reference to identify the payment
     * @param conversionProxyContractAddress The address of the conversion proxy contract
     * @param conversionProxyCreationBlockNumber The block that created the conversion proxy contract
     * @param toAddress Address of the balance we want to check
     * @param eventName Indicate if it is an address for payment or refund
     * @param network The Ethereum network to use
     */
    constructor(requestCurrency: CurrencyDefinition, paymentReference: string, conversionProxyContractAddress: string, conversionProxyCreationBlockNumber: number, conversionProxyContractAbiFragment: JsonFragment[], toAddress: string, eventName: PaymentTypes.EVENTS_NAMES, network: string, acceptedTokens?: string[] | undefined, maxRateTimespan?: number);
    /**
     * Retrieves transfer events from the payment proxy and conversion proxy.
     * Logs from both proxies are matched by transaction hash, as both proxies should
     * be called in one transaction.
     *
     * The conversion proxy's logs are used to compute the amounts in request currency (typically fiat).
     * The payment proxy's logs are used the same way as for a pn-fee-proxy request.
     */
    getTransferEvents(): Promise<PaymentTypes.ConversionPaymentNetworkEvent[]>;
    protected abstract getFeeFilter(): ethers.providers.Filter;
}
//# sourceMappingURL=any-to-any-proxy.d.ts.map