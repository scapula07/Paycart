"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NearInfoRetriever = void 0;
const tslib_1 = require("tslib");
/**
 * Gets a list of transfer events for a set of Near payment details
 * TheGraph-based etriever for ERC20 Fee Proxy and Native token payments.
 */
class NearInfoRetriever {
    /**
     * @param paymentReference The reference to identify the payment
     * @param toAddress Address to check
     * @param eventName Indicate if it is an address for payment or refund
     *
     */
    constructor(client) {
        this.client = client;
    }
    getTransferEvents(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { paymentReference, toAddress, contractAddress, acceptedTokens } = params;
            if (acceptedTokens && acceptedTokens.length > 1)
                throw new Error(`NearInfoRetriever does not support multiple accepted tokens.`);
            const payments = (acceptedTokens === null || acceptedTokens === void 0 ? void 0 : acceptedTokens.length) === 1
                ? yield this.client.GetFungibleTokenPayments({
                    reference: paymentReference,
                    to: toAddress,
                    contractAddress,
                    tokenAddress: acceptedTokens[0],
                })
                : yield this.client.GetNearPayments({
                    reference: paymentReference,
                    to: toAddress,
                    contractAddress,
                });
            return {
                paymentEvents: payments.payments.map((p) => this.mapPaymentEvent(p, params)),
            };
        });
    }
    mapPaymentEvent(payment, params) {
        var _a;
        return {
            amount: payment.amount,
            name: params.eventName,
            timestamp: Number(payment.timestamp),
            parameters: {
                feeAmount: payment.feeAmount,
                receiptId: payment.receiptId,
                block: payment.block,
                to: params.toAddress,
                from: payment.from,
                feeAddress: (_a = payment.feeAddress) !== null && _a !== void 0 ? _a : undefined,
                tokenAddress: params.acceptedTokens ? params.acceptedTokens[0] : undefined,
            },
        };
    }
}
exports.NearInfoRetriever = NearInfoRetriever;
//# sourceMappingURL=near-info-retriever.js.map