"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.supportedIdentities = exports.normalizeIdentityValue = exports.identityHasError = exports.areEqualIdentities = void 0;
const types_1 = require("@requestnetwork/types");
const supportedIdentities = [
    types_1.IdentityTypes.TYPE.ETHEREUM_ADDRESS,
    types_1.IdentityTypes.TYPE.ETHEREUM_SMART_CONTRACT,
];
exports.supportedIdentities = supportedIdentities;
/**
 * Checks if two identities are equals
 *
 * @param IIdentity id1 first identity
 * @param IIdentity id2 second identity
 * @returns boolean
 */
function areEqualIdentities(id1, id2) {
    return (!!id1 &&
        !!id2 &&
        id1.type === id2.type &&
        normalizeIdentityValue(id1.value) === normalizeIdentityValue(id2.value));
}
exports.areEqualIdentities = areEqualIdentities;
/**
 * Normalizes identity values
 *
 * @param string value value to normalize
 * @returns string value normalized
 */
function normalizeIdentityValue(value) {
    return value.toLowerCase();
}
exports.normalizeIdentityValue = normalizeIdentityValue;
/**
 * Checks if the identity has an error
 *
 * @param id identity to check
 * @returns the error or null if valid
 */
function identityHasError(id) {
    if (!supportedIdentities.includes(id.type)) {
        return 'identity type not supported';
    }
    if (id.value.match(/^0x[a-fA-F0-9]{40}$/) === null) {
        return 'identity value must be an ethereum address';
    }
    return null;
}
exports.identityHasError = identityHasError;
//# sourceMappingURL=identity.js.map