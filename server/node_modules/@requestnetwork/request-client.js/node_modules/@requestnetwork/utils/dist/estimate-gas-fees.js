"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.estimateGasFees = void 0;
const tslib_1 = require("tslib");
const ethers_1 = require("ethers");
const fee_suggestions_1 = require("@rainbow-me/fee-suggestions");
const index_1 = require("./index");
/**
 * The function estimates gas fee with EIP-1559.
 * @param provider Generic provider.
 * @param gasPriceMin Minimum gas price to return.
 * @returns an object containing:
 * - maxFeePerGas: The maximum fee per unit of gas for this transaction.
 *   maxFeePerGas = baseFeePerGas + maxPriorityFeePerGas
 *   The baseFeePerGas depends on how full the previous blocks were.
 * - maxPriorityFeePerGas: The maximum priority fee per unit of gas for this transaction.
 * - gasPrice: Optional fallback: the gas price for this transaction.
 */
function estimateGasFees({ provider, gasPriceMin, }) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const suggestedFee = yield (0, fee_suggestions_1.suggestFees)(provider);
        const baseFee = (0, index_1.maxBigNumber)(suggestedFee.baseFeeSuggestion, gasPriceMin || ethers_1.constants.Zero);
        const maxPriorityFeePerGas = (0, index_1.maxBigNumber)(suggestedFee.maxPriorityFeeSuggestions.urgent, gasPriceMin || ethers_1.constants.Zero);
        const maxFeePerGas = baseFee.add(maxPriorityFeePerGas);
        if (maxPriorityFeePerGas.eq(0) || maxFeePerGas.eq(0)) {
            return {};
        }
        return {
            maxPriorityFeePerGas,
            maxFeePerGas,
        };
    });
}
exports.estimateGasFees = estimateGasFees;
//# sourceMappingURL=estimate-gas-fees.js.map