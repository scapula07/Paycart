"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupErc20ConversionProxy = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("../../src/lib");
const adminTasks_1 = require("./adminTasks");
const currency_1 = require("@requestnetwork/currency");
const ERC20ConversionVersion = '0.1.2';
/**
 * Updates the values of the chainlinkConversionPath and ERC20FeeProxy addresses if needed
 * @param contractAddress address of the ERC20Conversion Proxy
 * @param hre Hardhat runtime environment
 */
const setupErc20ConversionProxy = (contractAddress, hre) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    // Setup contract parameters
    const Erc20ConversionProxyContract = new hre.ethers.Contract(contractAddress, lib_1.erc20ConversionProxy.getContractAbi(ERC20ConversionVersion));
    yield Promise.all(hre.config.xdeploy.networks.map((network) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        try {
            currency_1.EvmChains.assertChainSupported(network);
            const { signer, txOverrides } = yield (0, adminTasks_1.getSignerAndGasFees)(network, hre);
            const Erc20ConversionProxyConnected = Erc20ConversionProxyContract.connect(signer);
            yield (0, adminTasks_1.updatePaymentFeeProxyAddress)(Erc20ConversionProxyConnected, network, txOverrides, 'erc20');
            yield (0, adminTasks_1.updateChainlinkConversionPath)(Erc20ConversionProxyConnected, network, txOverrides);
            console.log(`Setup of Erc20ConversionProxy successful on ${network}`);
        }
        catch (err) {
            console.warn(`An error occurred during the setup of Erc20ConversionProxy on ${network}`);
            console.warn(err);
        }
    })));
});
exports.setupErc20ConversionProxy = setupErc20ConversionProxy;
//# sourceMappingURL=setupErc20ConversionProxy.js.map