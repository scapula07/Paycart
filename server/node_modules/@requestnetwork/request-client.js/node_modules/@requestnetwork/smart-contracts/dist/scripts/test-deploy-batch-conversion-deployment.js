"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployBatchConversionPayment = exports.FAU_USD_RATE = void 0;
const tslib_1 = require("tslib");
require("@nomiclabs/hardhat-ethers");
const deploy_one_1 = require("./deploy-one");
const lib_1 = require("../src/lib");
const currency_1 = require("@requestnetwork/currency");
const utils_1 = require("./utils");
const ethers_1 = require("ethers");
const test_deploy_chainlink_contract_1 = require("./test-deploy_chainlink_contract");
exports.FAU_USD_RATE = ethers_1.BigNumber.from(201 * test_deploy_chainlink_contract_1.PRECISION_RATE).div(100);
// Deploys, set up the contracts
function deployBatchConversionPayment(args, hre) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            console.log('Deploy BatchConversionPayments');
            const chain = hre.network.name;
            currency_1.EvmChains.assertChainSupported(chain);
            const _ERC20FeeProxyAddress = lib_1.erc20FeeProxyArtifact.getAddress('private');
            const _EthereumFeeProxyAddress = lib_1.ethereumFeeProxyArtifact.getAddress('private');
            const _paymentErc20ConversionFeeProxy = lib_1.erc20ConversionProxy.getAddress('private');
            const _paymentNativeConversionFeeProxy = lib_1.ethConversionArtifact.getAddress('private');
            const _chainlinkConversionPath = lib_1.chainlinkConversionPath.getAddress('private');
            // Deploy BatchConversionPayments contract
            const { address: BatchConversionPaymentsAddress } = yield (0, deploy_one_1.deployOne)(args, hre, 'BatchConversionPayments', {
                constructorArguments: [
                    _ERC20FeeProxyAddress,
                    _EthereumFeeProxyAddress,
                    _paymentErc20ConversionFeeProxy,
                    _paymentNativeConversionFeeProxy,
                    _chainlinkConversionPath,
                    yield (yield hre.ethers.getSigners())[0].getAddress(),
                ],
            });
            // Add a second ERC20 token and aggregator - useful for batch test
            const [owner] = yield hre.ethers.getSigners();
            const erc20Factory = yield hre.ethers.getContractFactory('TestERC20');
            const testERC20FakeFAU = yield erc20Factory.deploy('1000000000000000000000000000000');
            const { address: AggFakeFAU_USD_address } = yield (0, deploy_one_1.deployOne)(args, hre, 'AggregatorMock', {
                constructorArguments: [exports.FAU_USD_RATE, 8, 60],
            });
            const conversionPathInstance = lib_1.chainlinkConversionPath.connect('private', owner);
            const currencyManager = currency_1.CurrencyManager.getDefault();
            const USD_hash = currencyManager.fromSymbol('USD').hash;
            yield conversionPathInstance.updateAggregatorsList([testERC20FakeFAU.address], [USD_hash], [AggFakeFAU_USD_address]);
            // Check the addresses of our contracts, to avoid misleading bugs in the tests
            // ref to secondLocalERC20AlphaArtifact.getAddress('private'), that cannot be used in deployment
            const fakeFAU_addressExpected = '0xe4e47451AAd6C89a6D9E4aD104A7b77FfE1D3b36';
            (0, utils_1.deployAddressChecking)('testERC20FakeFAU', testERC20FakeFAU.address, fakeFAU_addressExpected);
            (0, utils_1.deployAddressChecking)('batchConversionPayments', BatchConversionPaymentsAddress, lib_1.batchConversionPaymentsArtifact.getAddress('private'));
            // Initialize batch conversion fee, useful to others packages.
            const batchConversion = lib_1.batchConversionPaymentsArtifact.connect(chain, owner);
            yield batchConversion.connect(owner).setBatchFee(30);
            yield batchConversion
                .connect(owner)
                .setNativeAndUSDAddress(currencyManager.fromSymbol('ETH').hash, currencyManager.fromSymbol('USD').hash);
            yield batchConversion.connect(owner).setBatchFeeAmountUSDLimit(150 * 1e8); // 150$
            // ----------------------------------
            console.log('Contracts deployed');
            console.log(`
    testERC20FakeFAU.address:                 ${testERC20FakeFAU.address}
    BatchConversionPayments:            ${BatchConversionPaymentsAddress}
    `);
        }
        catch (e) {
            console.error(e);
        }
    });
}
exports.deployBatchConversionPayment = deployBatchConversionPayment;
//# sourceMappingURL=test-deploy-batch-conversion-deployment.js.map