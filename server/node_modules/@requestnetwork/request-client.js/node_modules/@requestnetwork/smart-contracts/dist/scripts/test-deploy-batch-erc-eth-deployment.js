"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployBatchPayment = void 0;
const tslib_1 = require("tslib");
require("@nomiclabs/hardhat-ethers");
const deploy_one_1 = require("../scripts/deploy-one");
const lib_1 = require("../src/lib");
const utils_1 = require("./utils");
const currency_1 = require("@requestnetwork/currency");
// Deploys, set up the contracts
function deployBatchPayment(args, hre) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            const chain = hre.network.name;
            currency_1.EvmChains.assertChainSupported(chain);
            const ERC20FeeProxyAddress = '0x75c35C980C0d37ef46DF04d31A140b65503c0eEd';
            const EthereumFeeProxyAddress = '0x3d49d1eF2adE060a33c6E6Aa213513A7EE9a6241';
            // Deploy BatchPayments contract
            const { address: BatchPaymentsAddress } = yield (0, deploy_one_1.deployOne)(args, hre, 'BatchPayments', {
                constructorArguments: [
                    ERC20FeeProxyAddress,
                    EthereumFeeProxyAddress,
                    yield (yield hre.ethers.getSigners())[0].getAddress(),
                ],
            });
            // Initialize batch fee, useful to others packages.
            const [owner] = yield hre.ethers.getSigners();
            const batch = lib_1.batchPaymentsArtifact.connect(chain, owner);
            yield batch.connect(owner).setBatchFee(10);
            // ----------------------------------
            console.log('Contracts deployed');
            console.log(`
      BatchPayments:            ${BatchPaymentsAddress}
    `);
            (0, utils_1.deployAddressChecking)('BatchPayments', BatchPaymentsAddress, lib_1.batchPaymentsArtifact.getAddress('private'));
        }
        catch (e) {
            console.error(e);
        }
    });
}
exports.deployBatchPayment = deployBatchPayment;
//# sourceMappingURL=test-deploy-batch-erc-eth-deployment.js.map