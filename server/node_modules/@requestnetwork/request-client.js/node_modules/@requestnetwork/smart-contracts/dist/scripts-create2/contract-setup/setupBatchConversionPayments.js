"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupBatchConversionPayments = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("../../src/lib");
const adminTasks_1 = require("./adminTasks");
const currency_1 = require("@requestnetwork/currency");
const types_1 = require("@requestnetwork/types");
/**
 * Updates the values of the batch fees of the BatchConversionPayments contract, if needed.
 * @param contractAddress address of the BatchConversionPayments proxy.
 * @param hre Hardhat runtime environment.
 */
const setupBatchConversionPayments = (contractAddress, hre) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    // Setup contract parameters
    const batchConversionPaymentContract = new hre.ethers.Contract(contractAddress, lib_1.batchConversionPaymentsArtifact.getContractAbi());
    // constants related to chainlink and conversion rate
    const currencyManager = currency_1.CurrencyManager.getDefault();
    const setUpActions = (network) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        console.log(`Setup BatchConversionPayments on ${network}`);
        const NativeAddress = currencyManager.getNativeCurrency(types_1.RequestLogicTypes.CURRENCY.ETH, network).hash;
        const USDAddress = currencyManager.fromSymbol('USD').hash;
        const { signer, txOverrides } = yield (0, adminTasks_1.getSignerAndGasFees)(network, hre);
        const batchConversionPaymentConnected = batchConversionPaymentContract.connect(signer);
        yield (0, adminTasks_1.updateBatchPaymentFees)(batchConversionPaymentConnected, txOverrides);
        yield (0, adminTasks_1.updateBatchPaymentFeeAmountUSDLimit)(batchConversionPaymentConnected, txOverrides);
        yield (0, adminTasks_1.updateBatchConversionProxy)(batchConversionPaymentConnected, network, txOverrides, 'erc20');
        yield (0, adminTasks_1.updateBatchConversionProxy)(batchConversionPaymentConnected, network, txOverrides, 'native');
        yield (0, adminTasks_1.updateBatchConversionProxy)(batchConversionPaymentConnected, network, txOverrides, 'erc20Conversion');
        yield (0, adminTasks_1.updateBatchConversionProxy)(batchConversionPaymentConnected, network, txOverrides, 'nativeConversion');
        yield (0, adminTasks_1.updateBatchConversionProxy)(batchConversionPaymentConnected, network, txOverrides, 'chainlinkConversionPath');
        yield (0, adminTasks_1.updateNativeAndUSDAddress)(batchConversionPaymentConnected, NativeAddress, USDAddress, txOverrides);
    });
    for (const network of hre.config.xdeploy.networks) {
        try {
            currency_1.EvmChains.assertChainSupported(network);
            yield Promise.resolve(setUpActions(network));
        }
        catch (err) {
            console.warn(`An error occurred during the setup of BatchConversion on ${network}`);
            console.warn(err);
        }
    }
    console.log('Setup for setupBatchConversionPayment successful');
});
exports.setupBatchConversionPayments = setupBatchConversionPayments;
//# sourceMappingURL=setupBatchConversionPayments.js.map