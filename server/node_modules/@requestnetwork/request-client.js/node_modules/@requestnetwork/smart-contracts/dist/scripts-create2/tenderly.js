"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tenderlyImportAll = void 0;
const tslib_1 = require("tslib");
const artifacts = require("../src/lib/artifacts");
const console = require("console");
const axios_1 = require("axios");
const currency_1 = require("@requestnetwork/currency");
const getTenderlyAxiosInstance = (hre) => {
    return axios_1.default.create({
        baseURL: 'https://api.tenderly.co',
        headers: {
            'X-Access-Key': hre.config.tenderly.accessKey,
        },
    });
};
const capitalizeFirstLetter = (string) => string.charAt(0).toUpperCase() + string.slice(1);
/**
 * Chains supported by Tenderly.
 * Supported testnet chains are commented out.
 */
const supportedTenderlyChains = [
    'arbitrum-one',
    'arbitrum-rinkeby',
    'avalanche',
    'bsc',
    'fantom',
    'goerli',
    'mainnet',
    'matic',
    'moonbeam',
    'mumbai',
    'optimism',
    'rinkeby',
    'xdai',
];
const getTenderlyContractId = (c) => `eth:${c.chainId}:${c.address.toLowerCase()}`;
const tenderlyImportAll = (hre) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    try {
        const { username, project } = hre.config.tenderly;
        const contracts = {};
        const mainnetContracts = new Set();
        const testnetContracts = new Set();
        const versions = {};
        for (const artifactName in artifacts) {
            const artifact = artifacts[artifactName];
            const deployments = artifact.getAllAddressesFromAllNetworks();
            for (const deployment of deployments) {
                const { networkName, address, version } = deployment;
                try {
                    currency_1.EvmChains.assertChainSupported(networkName);
                }
                catch (_c) {
                    continue;
                }
                if (!supportedTenderlyChains.includes(networkName))
                    continue;
                const chainId = currency_1.EvmChains.getChainId(networkName);
                const contract = {
                    address,
                    chainId,
                };
                const contractId = getTenderlyContractId(contract);
                contracts[contractId] = Object.assign({ name: capitalizeFirstLetter(artifactName.replace(/Artifact/i, '')) }, contract);
                (_a = versions[version]) !== null && _a !== void 0 ? _a : (versions[version] = new Set());
                versions[version].add(contractId);
                (currency_1.EvmChains.isTestnet(networkName) ? testnetContracts : mainnetContracts).add(contractId);
            }
        }
        console.log(`> Retrieved ${Object.keys(contracts).length} contracts from protocol artifacts`);
        console.log(`> Syncing contracts with Tenderly...`);
        const axiosInstance = getTenderlyAxiosInstance(hre);
        yield axiosInstance.post(`/api/v2/accounts/${username}/projects/${project}/contracts`, {
            contracts: Object.values(contracts).map((contract) => ({
                address: contract.address,
                display_name: contract.name,
                network_id: contract.chainId.toString(),
            })),
        });
        console.log('  ✔ done');
        console.log(`> Adding version tags to contracts...`);
        for (const version in versions) {
            yield axiosInstance.post(`/api/v1/account/${username}/project/${project}/tag`, {
                contract_ids: Array.from(versions[version]),
                tag: `v${version}`,
            });
        }
        console.log('  ✔ done');
        console.log(`> Adding mainnet/testnet tags to contracts...`);
        yield axiosInstance.post(`/api/v1/account/${username}/project/${project}/tag`, {
            contract_ids: Array.from(mainnetContracts),
            tag: 'mainnet',
        });
        yield axiosInstance.post(`/api/v1/account/${username}/project/${project}/tag`, {
            contract_ids: Array.from(testnetContracts),
            tag: 'testnet',
        });
        console.log('  ✔ done');
    }
    catch (err) {
        console.error('Error while adding contract(s) to Tenderly', ((_b = err.response) === null || _b === void 0 ? void 0 : _b.data) || err);
    }
});
exports.tenderlyImportAll = tenderlyImportAll;
//# sourceMappingURL=tenderly.js.map