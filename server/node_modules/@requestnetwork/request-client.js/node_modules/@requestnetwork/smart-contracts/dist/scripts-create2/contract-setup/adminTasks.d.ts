import { BigNumber, Overrides, Wallet } from 'ethers';
import { HardhatRuntimeEnvironmentExtended } from '../types';
import { CurrencyTypes } from '@requestnetwork/types';
export declare const REQUEST_SWAP_FEES = 5;
export declare const BATCH_FEE: BigNumber;
/**
 * Updates the chainlink address used by the contract.
 * @param contract A contract using chainlink:
 *                 Erc20ConversionProxy | EthConversionProxy | ERC20SwapToConversion.
 * @param network The network used.
 * @param txOverrides information related to gas fees. Increase their values if needed.
 * @param version The version of the chainlink proxy to use, the last one by default.
 */
export declare const updateChainlinkConversionPath: (contract: any, network: CurrencyTypes.EvmChainName, txOverrides: Overrides, version?: string) => Promise<void>;
export declare const updateSwapRouter: (contract: any, network: string, txOverrides: Overrides) => Promise<void>;
export declare const updateRequestSwapFees: (contract: any, txOverrides: Overrides) => Promise<void>;
/**
 * Updates the batchFee applied by the batch conversion proxy.
 * @param contract BatchConversionPayments contract.
 * @param txOverrides information related to gas fees. Increase their values if needed.
 */
export declare const updateBatchPaymentFees: (contract: any, txOverrides: Overrides) => Promise<void>;
/**
 * Updates the feeAMountUSDLimit of the batch conversion proxy.
 * @param contract BatchConversionPayments contract.
 * @param txOverrides information related to gas fees. Increase their values if needed.
 */
export declare const updateBatchPaymentFeeAmountUSDLimit: (contract: any, txOverrides: Overrides) => Promise<void>;
/**
 * Updates the address of a Native or ERC20 fee proxy stored within a Native or ERC20 fee conversion contract.
 * @param contract A contract using chainlink: EthConversionProxy | Erc20ConversionProxy.
 * @param network The network used.
 * @param txOverrides information related to gas fees. Increase their values if needed.
 * @param proxyType The type of the proxy fee.
 * @param version The version of the fee proxy to use, the last one by default.
 */
export declare const updatePaymentFeeProxyAddress: (contract: any, network: CurrencyTypes.EvmChainName, txOverrides: Overrides, proxyType: 'native' | 'erc20', version?: string) => Promise<void>;
/**
 * Update the address of a proxy used by batch conversion contract.
 * @param contract BatchConversionPayments contract.
 * @param network The network used.
 * @param txOverrides information related to gas fees. Increase their values if needed.
 * @param proxyName The name of the fee proxy to update.
 */
export declare const updateBatchConversionProxy: (contract: any, network: CurrencyTypes.EvmChainName, txOverrides: Overrides, proxyName: 'native' | 'nativeConversion' | 'erc20' | 'erc20Conversion' | 'chainlinkConversionPath') => Promise<void>;
/**
 * Update the native and the USD addresses used by batch conversion contract.
 * @param contract BatchConversionPayments contract.
 * @param NativeAddress The address of native token, eg: ETH.
 * @param USDAddress The address of USD token.
 * @param txOverrides information related to gas fees. Increase their values if needed.
 */
export declare const updateNativeAndUSDAddress: (contract: any, NativeAddress: string, USDAddress: string, txOverrides: Overrides) => Promise<void>;
/**
 * Update the native token hash used by a contract.
 * @param contract contract to be updated.
 * @param nativeTokenHash The address of native token, eg: ETH.
 * @param txOverrides information related to gas fees. Increase their values if needed.
 */
export declare const updateNativeTokenHash: (contractType: string, contract: any, nativeTokenHash: string, txOverrides: Overrides) => Promise<void>;
/**
 * Gets the signer and gas fees information.
 * @param network The network used.
 * @param hre Hardhat runtime environment.
 * @returns An object:
 * - The signer
 * - txOverrides, with gas fee information
 */
export declare const getSignerAndGasFees: (network: string, hre: HardhatRuntimeEnvironmentExtended) => Promise<{
    signer: Wallet;
    txOverrides: {
        maxFeePerGas?: BigNumber;
        maxPriorityFeePerGas?: BigNumber;
    };
}>;
//# sourceMappingURL=adminTasks.d.ts.map