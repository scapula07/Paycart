"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupERC20SwapToPay = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("../../src/lib");
const adminTasks_1 = require("./adminTasks");
/**
 * Once deployed, setup the values of the ERC20SwapToPay contract
 * @param contractAddress address of the ERC20SwapToPay Proxy
 * @param hre Hardhat runtime environment
 */
const setupERC20SwapToPay = (contractAddress, hre) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    // Setup contract parameters
    const ERC20SwapToPayContract = new hre.ethers.Contract(contractAddress, lib_1.erc20SwapToPayArtifact.getContractAbi());
    yield Promise.all(hre.config.xdeploy.networks.map((network) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        try {
            const { signer, txOverrides } = yield (0, adminTasks_1.getSignerAndGasFees)(network, hre);
            const ERC20SwapToPayConnected = yield ERC20SwapToPayContract.connect(signer);
            yield (0, adminTasks_1.updateSwapRouter)(ERC20SwapToPayConnected, network, txOverrides);
            yield (0, adminTasks_1.updateRequestSwapFees)(ERC20SwapToPayConnected, txOverrides);
            console.log(`Setup of ERC20SwapToPay successful on ${network}`);
        }
        catch (err) {
            console.warn(`An error occurred during the setup of ERC20SwapToPay on ${network}`);
            console.warn(err);
        }
    })));
});
exports.setupERC20SwapToPay = setupERC20SwapToPay;
//# sourceMappingURL=setupERC20SwapToPay.js.map