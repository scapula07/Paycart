"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const deploy_one_1 = require("./deploy-one");
function deploy(args, hre) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const contractName = 'EthConversionProxy';
        if (!args.chainlinkConversionPathAddress) {
            // FIXME: should try to retrieve information from artifacts instead
            console.error(`Missing ChainlinkConversionPath on ${hre.network.name}, cannot deploy ${contractName}.`);
            return;
        }
        if (!args.ethFeeProxyAddress) {
            // FIXME: should try to retrieve information from artifacts instead
            console.error(`Missing EthereumFeeProxy on ${hre.network.name}, cannot deploy ${contractName}.`);
            return;
        }
        if (!args.nativeTokenHash) {
            console.error(`Missing nativeTokenHash on ${hre.network.name}, cannot deploy ${contractName}.`);
            return;
        }
        return (0, deploy_one_1.deployOne)(args, hre, contractName, {
            constructorArguments: [
                args.ethFeeProxyAddress,
                args.chainlinkConversionPathAddress,
                args.nativeTokenHash,
            ],
        });
    });
}
exports.default = deploy;
//# sourceMappingURL=eth-conversion-proxy.js.map