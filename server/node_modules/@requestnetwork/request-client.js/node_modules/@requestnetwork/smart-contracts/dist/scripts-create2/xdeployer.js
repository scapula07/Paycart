"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xdeploy = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("../src/lib");
const utils_1 = require("@requestnetwork/utils");
const ZERO_ETH_INPUT = 0;
const xdeploy = (deploymentParams, hre) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { contract, constructorArgs } = deploymentParams;
    console.log(`Deployment of ${contract} through xdeployer starting now, with ${new hre.ethers.Wallet(hre.config.xdeploy.signer).address}`);
    yield hre.run('compile');
    if (!hre.config.xdeploy.networks) {
        throw new Error('Bad network configuration');
    }
    if (!hre.config.xdeploy.salt) {
        throw new Error('Missing salt');
    }
    if (!hre.config.xdeploy.deployerAddress) {
        throw new Error('Missing deployer address');
    }
    const result = [];
    let initcode;
    const Contract = yield hre.ethers.getContractFactory(contract);
    if (constructorArgs && contract) {
        initcode = yield Contract.getDeployTransaction(...constructorArgs);
    }
    else if (!constructorArgs && contract) {
        initcode = yield Contract.getDeployTransaction();
    }
    for (const network of hre.config.xdeploy.networks) {
        console.log(`... on ${network}`);
        let provider;
        if (network === 'celo') {
            provider = (0, utils_1.getCeloProvider)();
        }
        else {
            provider = (0, utils_1.getDefaultProvider)(network);
        }
        const wallet = new hre.ethers.Wallet(hre.config.xdeploy.signer, provider);
        const signer = wallet.connect(provider);
        let computedContractAddress;
        const create2Deployer = new hre.ethers.Contract(hre.config.xdeploy.deployerAddress, lib_1.requestDeployer.getContractAbi(), signer);
        try {
            computedContractAddress = yield create2Deployer.computeAddress(hre.ethers.utils.id(hre.config.xdeploy.salt), hre.ethers.utils.keccak256(initcode.data));
        }
        catch (err) {
            throw new Error('Contract address could not be computed, check your contract name and arguments');
        }
        let receipt = undefined;
        let deployed = false;
        let error = undefined;
        let txOverrides = {};
        if (yield (0, utils_1.isEip1559Supported)(provider, console)) {
            txOverrides = yield (0, utils_1.estimateGasFees)({ provider });
        }
        txOverrides.gasLimit = hre.config.xdeploy.gasLimit;
        try {
            const createReceipt = yield (yield create2Deployer.deploy(ZERO_ETH_INPUT, hre.ethers.utils.id(hre.config.xdeploy.salt), initcode.data, txOverrides)).wait();
            receipt = createReceipt;
            deployed = true;
        }
        catch (err) {
            error = err;
        }
        result.push({
            network,
            contract,
            address: computedContractAddress,
            receipt,
            deployed,
            error,
        });
    }
    return result;
});
exports.xdeploy = xdeploy;
//# sourceMappingURL=xdeployer.js.map