"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupETHConversionProxy = void 0;
const tslib_1 = require("tslib");
const currency_1 = require("@requestnetwork/currency");
const types_1 = require("@requestnetwork/types");
const lib_1 = require("../../src/lib");
const adminTasks_1 = require("./adminTasks");
/**
 * Updates the values of the chainlinkConversionPath and EthFeeProxy addresses if needed
 * @param contractAddress address of the ETHConversion Proxy
 * @param hre Hardhat runtime environment
 */
const setupETHConversionProxy = (contractAddress, hre) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    // Setup contract parameters
    const EthConversionProxyContract = new hre.ethers.Contract(contractAddress, lib_1.ethConversionArtifact.getContractAbi());
    yield Promise.all(hre.config.xdeploy.networks.map((network) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        try {
            currency_1.EvmChains.assertChainSupported(network);
            const { signer, txOverrides } = yield (0, adminTasks_1.getSignerAndGasFees)(network, hre);
            const nativeTokenHash = (_a = currency_1.CurrencyManager.getDefault().getNativeCurrency(types_1.RequestLogicTypes.CURRENCY.ETH, network)) === null || _a === void 0 ? void 0 : _a.hash;
            if (!nativeTokenHash) {
                throw new Error(`Could not guess native token hash for network ${network}`);
            }
            const EthConversionProxyConnected = EthConversionProxyContract.connect(signer);
            yield (0, adminTasks_1.updatePaymentFeeProxyAddress)(EthConversionProxyConnected, network, txOverrides, 'native');
            yield (0, adminTasks_1.updateChainlinkConversionPath)(EthConversionProxyConnected, network, txOverrides);
            yield (0, adminTasks_1.updateNativeTokenHash)('EthConversionProxy', EthConversionProxyConnected, nativeTokenHash, txOverrides);
            console.log(`Setup of EthConversionProxy successful on ${network}`);
        }
        catch (err) {
            console.warn(`An error occurred during the setup of EthConversionProxy on ${network}`);
            console.warn(err);
        }
    })));
});
exports.setupETHConversionProxy = setupETHConversionProxy;
//# sourceMappingURL=setupETHConversionProxy.js.map