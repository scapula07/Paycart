import { IdentityTypes, RequestLogicTypes } from '@requestnetwork/types';
/**
 * Module to manage a request
 */
declare const _default: {
    checkRequest: typeof checkRequest;
    getRoleInRequest: typeof getRoleInRequest;
    pushExtensionsData: typeof pushExtensionsData;
};
export default _default;
/**
 * Function to get the role of an identity in a request
 *
 * @param IIdentity identity the identity to check
 * @param IRequest request the request
 *
 * @returns Types.ROLE the role of the signer (payee, payer or third party)
 */
declare function getRoleInRequest(identity: IdentityTypes.IIdentity, request: RequestLogicTypes.IRequest): RequestLogicTypes.ROLE;
/**
 * Function to check if a request context is valid
 *
 * @param IRequest request the request to check
 *
 * @returns boolean true if the request is valid, throw otherwise
 */
declare function checkRequest(request: RequestLogicTypes.IRequest): boolean;
/**
 * Function to simply add the extensions data to the request
 *
 * @param Types.IRequest requestContext The current request context
 * @param Types.IRequest extensionsData The extensions data to add to the request
 *
 * @returns Types.IRequest The request context with the extensions data added
 */
declare function pushExtensionsData(requestContext: RequestLogicTypes.IRequest, extensionsData?: any[]): RequestLogicTypes.IRequest;
//# sourceMappingURL=request.d.ts.map