import { AdvancedLogicTypes, RequestLogicTypes } from '@requestnetwork/types';
/**
 * Implementation of Request Logic Core
 */
declare const _default: {
    applyActionToRequest: typeof applyActionToRequest;
    formatAccept: (acceptParameters: RequestLogicTypes.IAcceptParameters, signerIdentity: import("types/dist/identity-types").IIdentity, signatureProvider: import("types/dist/signature-provider-types").ISignatureProvider) => Promise<RequestLogicTypes.IAction>;
    formatAddExtensionsData: (addExtensionsDataParameters: RequestLogicTypes.IAddExtensionsDataParameters, signerIdentity: import("types/dist/identity-types").IIdentity, signatureProvider: import("types/dist/signature-provider-types").ISignatureProvider) => Promise<RequestLogicTypes.IAction>;
    formatCancel: (cancelParameters: RequestLogicTypes.ICancelParameters, signerIdentity: import("types/dist/identity-types").IIdentity, signatureProvider: import("types/dist/signature-provider-types").ISignatureProvider) => Promise<RequestLogicTypes.IAction>;
    formatCreate: (requestParameters: RequestLogicTypes.ICreateParameters, signerIdentity: import("types/dist/identity-types").IIdentity, signatureProvider: import("types/dist/signature-provider-types").ISignatureProvider) => Promise<RequestLogicTypes.IAction>;
    formatIncreaseExpectedAmount: (increaseAmountParameters: RequestLogicTypes.IIncreaseExpectedAmountParameters, signerIdentity: import("types/dist/identity-types").IIdentity, signatureProvider: import("types/dist/signature-provider-types").ISignatureProvider) => Promise<RequestLogicTypes.IAction>;
    formatReduceExpectedAmount: (reduceAmountParameters: RequestLogicTypes.IReduceExpectedAmountParameters, signerIdentity: import("types/dist/identity-types").IIdentity, signatureProvider: import("types/dist/signature-provider-types").ISignatureProvider) => Promise<RequestLogicTypes.IAction>;
    formatAddStakeholders: (addStakeholderParameters: RequestLogicTypes.IAddStakeholdersParameters, signerIdentity: import("types/dist/identity-types").IIdentity, signatureProvider: import("types/dist/signature-provider-types").ISignatureProvider) => Promise<RequestLogicTypes.IAction>;
    getRequestIdFromAction: typeof getRequestIdFromAction;
};
export default _default;
/**
 * Function Entry point to apply any action to a request
 * If advancedLogic given, the extensions will be handled
 *
 * @param Types.IRequest request The request before update, null for creation - will not be modified
 * @param Types.IAction action The action to apply
 * @param AdvancedLogicTypes.IAdvancedLogic advancedLogic module to handle exception
 *
 * @returns Types.IRequest  The request updated
 */
declare function applyActionToRequest(request: RequestLogicTypes.IRequest | null, action: RequestLogicTypes.IAction, timestamp: number, advancedLogic?: AdvancedLogicTypes.IAdvancedLogic): RequestLogicTypes.IRequest;
/**
 * Function to create a requestId from the creation action or get the requestId parameter otherwise
 *
 * @param IAction action action
 *
 * @returns RequestIdType the requestId
 */
declare function getRequestIdFromAction(action: RequestLogicTypes.IAction): RequestLogicTypes.RequestId;
//# sourceMappingURL=requestLogicCore.d.ts.map