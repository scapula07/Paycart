"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@requestnetwork/types");
const action_1 = require("./action");
const request_1 = require("./request");
const accept_1 = require("./actions/accept");
const addExtensionsData_1 = require("./actions/addExtensionsData");
const cancel_1 = require("./actions/cancel");
const create_1 = require("./actions/create");
const increaseExpectedAmount_1 = require("./actions/increaseExpectedAmount");
const reduceExpectedAmount_1 = require("./actions/reduceExpectedAmount");
const addStakeholders_1 = require("./actions/addStakeholders");
const utils_1 = require("@requestnetwork/utils");
/**
 * Implementation of Request Logic Core
 */
exports.default = {
    applyActionToRequest,
    formatAccept: accept_1.default.format,
    formatAddExtensionsData: addExtensionsData_1.default.format,
    formatCancel: cancel_1.default.format,
    formatCreate: create_1.default.format,
    formatIncreaseExpectedAmount: increaseExpectedAmount_1.default.format,
    formatReduceExpectedAmount: reduceExpectedAmount_1.default.format,
    formatAddStakeholders: addStakeholders_1.default.format,
    getRequestIdFromAction,
};
/**
 * Function Entry point to apply any action to a request
 * If advancedLogic given, the extensions will be handled
 *
 * @param Types.IRequest request The request before update, null for creation - will not be modified
 * @param Types.IAction action The action to apply
 * @param AdvancedLogicTypes.IAdvancedLogic advancedLogic module to handle exception
 *
 * @returns Types.IRequest  The request updated
 */
function applyActionToRequest(request, action, timestamp, advancedLogic) {
    if (!action_1.default.isActionVersionSupported(action)) {
        throw new Error('action version not supported');
    }
    // we don't want to modify the original request state
    const requestCopied = request ? (0, utils_1.deepCopy)(request) : null;
    let requestAfterApply = null;
    // Creation request
    if (action.data.name === types_1.RequestLogicTypes.ACTION_NAME.CREATE) {
        if (requestCopied) {
            throw new Error('no request is expected at the creation');
        }
        requestAfterApply = create_1.default.createRequest(action, timestamp);
    }
    else {
        // Update request
        if (!requestCopied) {
            throw new Error('request is expected');
        }
        // Will throw if the request is not valid
        request_1.default.checkRequest(requestCopied);
        if (action.data.name === types_1.RequestLogicTypes.ACTION_NAME.ACCEPT) {
            requestAfterApply = accept_1.default.applyActionToRequest(action, timestamp, requestCopied);
        }
        if (action.data.name === types_1.RequestLogicTypes.ACTION_NAME.CANCEL) {
            requestAfterApply = cancel_1.default.applyActionToRequest(action, timestamp, requestCopied);
        }
        if (action.data.name === types_1.RequestLogicTypes.ACTION_NAME.INCREASE_EXPECTED_AMOUNT) {
            requestAfterApply = increaseExpectedAmount_1.default.applyActionToRequest(action, timestamp, requestCopied);
        }
        if (action.data.name === types_1.RequestLogicTypes.ACTION_NAME.REDUCE_EXPECTED_AMOUNT) {
            requestAfterApply = reduceExpectedAmount_1.default.applyActionToRequest(action, timestamp, requestCopied);
        }
        if (action.data.name === types_1.RequestLogicTypes.ACTION_NAME.ADD_STAKEHOLDERS) {
            requestAfterApply = addStakeholders_1.default.applyActionToRequest(action, timestamp, requestCopied);
        }
        if (action.data.name === types_1.RequestLogicTypes.ACTION_NAME.ADD_EXTENSIONS_DATA) {
            requestAfterApply = addExtensionsData_1.default.applyActionToRequest(action, timestamp, requestCopied);
        }
    }
    if (!requestAfterApply) {
        throw new Error(`Unknown action ${action.data.name}`);
    }
    // skip extension application if no extension given or no advanced logic layer given
    if (action.data.parameters.extensionsData && advancedLogic) {
        // Apply the extension on the state
        requestAfterApply.extensions = action.data.parameters.extensionsData.reduce((extensionState, extensionAction) => {
            return advancedLogic.applyActionToExtensions(extensionState, extensionAction, requestAfterApply, action_1.default.getSignerIdentityFromAction(action), timestamp);
        }, requestAfterApply.extensions);
    }
    return requestAfterApply;
}
/**
 * Function to create a requestId from the creation action or get the requestId parameter otherwise
 *
 * @param IAction action action
 *
 * @returns RequestIdType the requestId
 */
function getRequestIdFromAction(action) {
    return action_1.default.getRequestId(action);
}
//# sourceMappingURL=requestLogicCore.js.map