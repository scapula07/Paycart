"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const multi_format_1 = require("@requestnetwork/multi-format");
const types_1 = require("@requestnetwork/types");
const Semver = require("semver");
const role_1 = require("./role");
const version_1 = require("./version");
const utils_1 = require("@requestnetwork/utils");
/**
 * Function to manage Request logic action (object that will be interpreted to create or modify a request)
 */
exports.default = {
    createAction,
    getRequestId,
    getRoleInAction,
    getRoleInUnsignedAction,
    getSignerIdentityFromAction,
    getVersionFromAction,
    isActionVersionSupported,
};
/**
 * Creates an action from an unsigned action data and a signature parameters object
 *
 * @notice it will sign the hash (keccak256) of the action data
 *
 * @param IUnsignedAction unsignedAction The unsigned action to sign
 * @param IIdentity signerIdentity Identity of the signer
 * @param ISignatureProvider signatureProvider Signature provider in charge of the signature
 *
 * @returns IAction the action with the signature
 */
function createAction(unsignedAction, signerIdentity, signatureProvider) {
    return signatureProvider.sign(unsignedAction, signerIdentity);
}
/**
 * Function to get the signer identity from a action
 *
 * @param ISignatureParameters action action to check
 *
 * @returns RequestEnum.ROLE the role of the signer (payee, payer or third party)
 */
function getSignerIdentityFromAction(action) {
    return (0, utils_1.recoverSigner)(action);
}
/**
 * Function to get the role of an identity in an action
 *
 * @param IIdentity identity the identity to check
 * @param IAction action the action
 *
 * @returns RequestEnum.ROLE the role of the signer
 */
function getRoleInAction(identity, action) {
    return getRoleInUnsignedAction(identity, action.data);
}
/**
 * Function to get the role of an identity in an unsigned action
 *
 * @param IIdentity identity the identity to check
 * @param IUnsignedAction unsignedAction the unsigned action
 *
 * @returns RequestEnum.ROLE the role of the signer
 */
function getRoleInUnsignedAction(identity, unsignedAction) {
    return role_1.default.getRole(identity, unsignedAction.parameters);
}
/**
 * Function to create a requestId from the creation action or get the requestId parameter otherwise
 *
 * @param IAction creation action of the request
 *
 * @returns RequestIdType the requestId
 */
function getRequestId(action) {
    // if a creation we need to compute the hash
    if (action.data.name === types_1.RequestLogicTypes.ACTION_NAME.CREATE) {
        return getActionHash(action);
    }
    return action.data.parameters.requestId;
}
/**
 * Function to check if an action is supported
 *
 * @param IAction action action to check
 *
 * @returns boolean true, if action is supported false otherwise
 */
function isActionVersionSupported(action) {
    return version_1.default.isSupported(action.data.version);
}
/**
 * Function to get the version of an action
 *
 * @param IAction action action to check
 *
 * @returns string version
 */
function getVersionFromAction(action) {
    return action.data.version;
}
/**
 * Function to get the hash of an action
 *
 * @param IAction action action to get the hash
 *
 * @returns string the hash formatted
 */
function getActionHash(action) {
    // Before the version 2.0.0, the hash was computed without the signature
    if (Semver.lte(action.data.version, '2.0.0')) {
        return multi_format_1.default.serialize((0, utils_1.normalizeKeccak256Hash)(action.data));
    }
    return multi_format_1.default.serialize((0, utils_1.normalizeKeccak256Hash)(action));
}
//# sourceMappingURL=action.js.map