import { AdvancedLogicTypes, EncryptionTypes, IdentityTypes, RequestLogicTypes, SignatureProviderTypes, TransactionTypes } from '@requestnetwork/types';
/**
 * Implementation of Request Logic
 */
export default class RequestLogic implements RequestLogicTypes.IRequestLogic {
    private advancedLogic;
    private transactionManager;
    private signatureProvider;
    constructor(transactionManager: TransactionTypes.ITransactionManager, signatureProvider?: SignatureProviderTypes.ISignatureProvider, advancedLogic?: AdvancedLogicTypes.IAdvancedLogic);
    /**
     * Creates a request and persists it on the transaction manager layer
     *
     * @param ICreateParameters parameters to create a request
     * @param signerIdentity Identity of the signer
     * @param topics list of string to topic the request
     *
     * @returns the request id and the meta data
     */
    createRequest(requestParameters: RequestLogicTypes.ICreateParameters, signerIdentity: IdentityTypes.IIdentity, topics?: any[]): Promise<RequestLogicTypes.IReturnCreateRequest>;
    /**
     * Creates an encrypted request and persists it on the transaction manager layer
     *
     * @param requestParameters parameters to create a request
     * @param signerIdentity Identity of the signer
     * @param encryptionParams list of encryption parameters to encrypt the channel key with
     * @param topics list of string to topic the request
     *
     * @returns the request id and the meta data
     */
    createEncryptedRequest(requestParameters: RequestLogicTypes.ICreateParameters, signerIdentity: IdentityTypes.IIdentity, encryptionParams: EncryptionTypes.IEncryptionParameters[], topics?: any[]): Promise<RequestLogicTypes.IReturnCreateRequest>;
    /**
     * Function to compute the id of a request without creating it
     *
     * @param requestParameters ICreateParameters parameters to create a request
     * @param IIdentity signerIdentity Identity of the signer
     *
     * @returns Promise<RequestLogicTypes.RequestId> the request id
     */
    computeRequestId(requestParameters: RequestLogicTypes.ICreateParameters, signerIdentity: IdentityTypes.IIdentity): Promise<RequestLogicTypes.RequestId>;
    /**
     * Function to accept a request   it on through the transaction manager layer
     *
     * @param IAcceptParameters acceptParameters parameters to accept a request
     * @param IIdentity signerIdentity Identity of the signer
     * @param boolean validate specifies if a validation should be done before persisting the transaction. Requires a full load of the Request.
     *
     * @returns Promise<IRequestLogicReturn> the meta data
     */
    acceptRequest(requestParameters: RequestLogicTypes.IAcceptParameters, signerIdentity: IdentityTypes.IIdentity, validate?: boolean): Promise<RequestLogicTypes.IRequestLogicReturnWithConfirmation>;
    /**
     * Function to cancel a request and persist it on through the transaction manager layer
     *
     * @param ICancelParameters cancelParameters parameters to cancel a request
     * @param IIdentity signerIdentity Identity of the signer
     * @param boolean validate specifies if a validation should be done before persisting the transaction. Requires a full load of the Request.
     *
     * @returns Promise<IRequestLogicReturn> the meta data
     */
    cancelRequest(requestParameters: RequestLogicTypes.ICancelParameters, signerIdentity: IdentityTypes.IIdentity, validate?: boolean): Promise<RequestLogicTypes.IRequestLogicReturnWithConfirmation>;
    /**
     * Function to increase expected amount of a request and persist it on through the transaction manager layer
     *
     * @param IIncreaseExpectedAmountParameters increaseAmountParameters parameters to increase expected amount of a request
     * @param IIdentity signerIdentity Identity of the signer
     * @param boolean validate specifies if a validation should be done before persisting the transaction. Requires a full load of the Request.
     *
     * @returns Promise<IRequestLogicReturn> the meta data
     */
    increaseExpectedAmountRequest(requestParameters: RequestLogicTypes.IIncreaseExpectedAmountParameters, signerIdentity: IdentityTypes.IIdentity, validate?: boolean): Promise<RequestLogicTypes.IRequestLogicReturnWithConfirmation>;
    /**
     * Function to reduce expected amount of a request and persist it on through the transaction manager layer
     *
     * @param IReduceExpectedAmountParameters reduceAmountParameters parameters to reduce expected amount of a request
     * @param IIdentity signerIdentity Identity of the signer
     * @param boolean validate specifies if a validation should be done before persisting the transaction. Requires a full load of the Request.
     *
     * @returns Promise<IRequestLogicReturn> the meta data
     */
    reduceExpectedAmountRequest(requestParameters: RequestLogicTypes.IReduceExpectedAmountParameters, signerIdentity: IdentityTypes.IIdentity, validate?: boolean): Promise<RequestLogicTypes.IRequestLogicReturnWithConfirmation>;
    /**
     * Function to add stakeholders to a request and persist it on through the transaction manager layer
     *
     * @param IAddStakeholdersParameters requestParameters parameters to add stakeholders to a request
     * @param IIdentity signerIdentity Identity of the signer
     * @param IEncryptionParameters encryptionParams list of addtional encryption parameters to encrypt the channel key with
     * @param boolean validate specifies if a validation should be done before persisting the transaction. Requires a full load of the Request.
     *
     * @returns Promise<IRequestLogicReturn> the meta data
     */
    addStakeholders(requestParameters: RequestLogicTypes.IAddStakeholdersParameters, signerIdentity: IdentityTypes.IIdentity, encryptionParams: EncryptionTypes.IEncryptionParameters[], validate?: boolean): Promise<RequestLogicTypes.IRequestLogicReturnWithConfirmation>;
    /**
     * Function to add extensions data to a request and persist it through the transaction manager layer
     *
     * @param IAddExtensionsDataParameters requestParameters parameters to add extensions Data to a request
     * @param IIdentity signerIdentity Identity of the signer
     * @param boolean validate specifies if a validation should be done before persisting the transaction. Requires a full load of the Request.
     *
     * @returns Promise<IRequestLogicReturn> the meta data
     */
    addExtensionsDataRequest(requestParameters: RequestLogicTypes.IAddExtensionsDataParameters, signerIdentity: IdentityTypes.IIdentity, validate?: boolean): Promise<RequestLogicTypes.IRequestLogicReturnWithConfirmation>;
    /**
     * Function to get a request from the request id from the actions in the data-access layer
     *
     * @param requestId the requestId of the request to retrieve
     *
     * @returns the request constructed from the actions
     */
    getRequestFromId(requestId: string): Promise<RequestLogicTypes.IReturnGetRequestFromId>;
    /**
     * Gets the requests indexed by a topic from the transactions of transaction-manager layer
     *
     * @returns all the requests indexed by topic
     */
    getRequestsByTopic(topic: string, updatedBetween?: RequestLogicTypes.ITimestampBoundaries): Promise<RequestLogicTypes.IReturnGetRequestsByTopic>;
    /**
     * Gets the requests indexed by multiple topics from the transactions of transaction-manager layer
     *
     * @returns all the requests indexed by topics
     */
    getRequestsByMultipleTopics(topics: string[], updatedBetween?: RequestLogicTypes.ITimestampBoundaries): Promise<RequestLogicTypes.IReturnGetRequestsByTopic>;
    /**
     * Creates the creation action and the requestId of a request
     *
     * @param requestParameters parameters to create a request
     * @param signerIdentity Identity of the signer
     *
     * @returns the request id, the action and the hashed topics
     */
    private createCreationActionRequestIdAndTopics;
    /**
     * Interprets a request from requestId
     *
     * @param requestId the requestId of the request to compute
     * @returns the request, the pending state of the request and the ignored transactions
     */
    private computeRequestFromRequestId;
    /**
     * Interprets a request from transactions
     *
     * @param transactions transactions to compute the request from
     * @returns the request and the ignoredTransactions
     */
    private computeRequestFromTransactions;
    /**
     * Interprets multiple requests from channels
     *
     * @param channelsRawData returned value by getChannels function
     * @returns the requests and meta data
     */
    private computeMultipleRequestFromChannels;
    /**
     * Validates an action, throws if the action is invalid
     *
     * @param requestId the requestId of the request to retrieve
     * @param action the action to validate
     *
     * @returns void, throws if the action is invalid
     */
    private validateAction;
    /**
     * Computes the diff between the confirmed and pending request
     *
     * @param confirmedRequestState the confirmed request state
     * @param pendingRequestState the pending request state
     * @returns an object with the pending state attributes that are different from the confirmed one
     */
    private computeDiffBetweenPendingAndConfirmedRequestState;
    /**
     * Sorts out the transactions pending older than confirmed ones
     *
     * @param actions list of the actions
     * @returns an object with the ignoredTransactions and the kept actions
     */
    private removeOldPendingTransactions;
}
//# sourceMappingURL=request-logic.d.ts.map