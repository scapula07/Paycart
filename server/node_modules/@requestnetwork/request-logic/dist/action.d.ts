import { IdentityTypes, RequestLogicTypes, SignatureProviderTypes } from '@requestnetwork/types';
/**
 * Function to manage Request logic action (object that will be interpreted to create or modify a request)
 */
declare const _default: {
    createAction: typeof createAction;
    getRequestId: typeof getRequestId;
    getRoleInAction: typeof getRoleInAction;
    getRoleInUnsignedAction: typeof getRoleInUnsignedAction;
    getSignerIdentityFromAction: typeof getSignerIdentityFromAction;
    getVersionFromAction: typeof getVersionFromAction;
    isActionVersionSupported: typeof isActionVersionSupported;
};
export default _default;
/**
 * Creates an action from an unsigned action data and a signature parameters object
 *
 * @notice it will sign the hash (keccak256) of the action data
 *
 * @param IUnsignedAction unsignedAction The unsigned action to sign
 * @param IIdentity signerIdentity Identity of the signer
 * @param ISignatureProvider signatureProvider Signature provider in charge of the signature
 *
 * @returns IAction the action with the signature
 */
declare function createAction(unsignedAction: RequestLogicTypes.IUnsignedAction, signerIdentity: IdentityTypes.IIdentity, signatureProvider: SignatureProviderTypes.ISignatureProvider): Promise<RequestLogicTypes.IAction>;
/**
 * Function to get the signer identity from a action
 *
 * @param ISignatureParameters action action to check
 *
 * @returns RequestEnum.ROLE the role of the signer (payee, payer or third party)
 */
declare function getSignerIdentityFromAction(action: RequestLogicTypes.IAction): IdentityTypes.IIdentity;
/**
 * Function to get the role of an identity in an action
 *
 * @param IIdentity identity the identity to check
 * @param IAction action the action
 *
 * @returns RequestEnum.ROLE the role of the signer
 */
declare function getRoleInAction(identity: IdentityTypes.IIdentity, action: RequestLogicTypes.IAction): RequestLogicTypes.ROLE;
/**
 * Function to get the role of an identity in an unsigned action
 *
 * @param IIdentity identity the identity to check
 * @param IUnsignedAction unsignedAction the unsigned action
 *
 * @returns RequestEnum.ROLE the role of the signer
 */
declare function getRoleInUnsignedAction(identity: IdentityTypes.IIdentity, unsignedAction: RequestLogicTypes.IUnsignedAction): RequestLogicTypes.ROLE;
/**
 * Function to create a requestId from the creation action or get the requestId parameter otherwise
 *
 * @param IAction creation action of the request
 *
 * @returns RequestIdType the requestId
 */
declare function getRequestId(action: RequestLogicTypes.IAction): RequestLogicTypes.RequestId;
/**
 * Function to check if an action is supported
 *
 * @param IAction action action to check
 *
 * @returns boolean true, if action is supported false otherwise
 */
declare function isActionVersionSupported(action: RequestLogicTypes.IAction): boolean;
/**
 * Function to get the version of an action
 *
 * @param IAction action action to check
 *
 * @returns string version
 */
declare function getVersionFromAction(action: RequestLogicTypes.IAction): string;
//# sourceMappingURL=action.d.ts.map