import { IdentityTypes, RequestLogicTypes, SignatureProviderTypes } from '@requestnetwork/types';
/**
 * Implementation of the request logic specification
 */
declare const _default: {
    createRequest: typeof createRequest;
    format: typeof format;
};
export default _default;
/**
 * Function to format  action to create a Request
 *
 * If requestParameters.timestamp not given, "Date.now() / 1000" will be used as default
 *
 * @param requestParameters ICreateParameters parameters to create a request
 * @param IIdentity signerIdentity Identity of the signer
 * @param ISignatureProvider signatureProvider Signature provider in charge of the signature
 *
 * @returns IAction  the action with the signature
 */
declare function format(requestParameters: RequestLogicTypes.ICreateParameters, signerIdentity: IdentityTypes.IIdentity, signatureProvider: SignatureProviderTypes.ISignatureProvider): Promise<RequestLogicTypes.IAction>;
/**
 * Function to create a request (create a request)
 *
 * @param Types.IAction action the action to evaluate
 *
 * @returns Types.IRequest the new request
 */
declare function createRequest(action: RequestLogicTypes.IAction, timestamp: number): RequestLogicTypes.IRequest;
//# sourceMappingURL=create.d.ts.map