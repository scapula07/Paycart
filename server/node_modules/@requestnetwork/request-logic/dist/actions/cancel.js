"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@requestnetwork/types");
const action_1 = require("../action");
const request_1 = require("../request");
const version_1 = require("../version");
const utils_1 = require("@requestnetwork/utils");
/**
 * Implementation of the action cancel from request logic specification
 */
exports.default = {
    applyActionToRequest,
    format,
};
/**
 * Function to format an action to cancel a Request
 *
 * @param ICancelParameters cancelParameters parameters to cancel a request
 * @param IIdentity signerIdentity Identity of the signer
 * @param ISignatureProvider signatureProvider Signature provider in charge of the signature
 *
 * @returns IAction  the action with the signature
 */
function format(cancelParameters, signerIdentity, signatureProvider) {
    const unsignedAction = {
        name: types_1.RequestLogicTypes.ACTION_NAME.CANCEL,
        parameters: cancelParameters,
        version: version_1.default.currentVersion,
    };
    return action_1.default.createAction(unsignedAction, signerIdentity, signatureProvider);
}
/**
 * Function to apply an Cancel action an a request
 *
 * @param Types.IAction action the action to apply
 *
 * @returns Types.IRequest the new request
 */
function applyActionToRequest(action, timestamp, request) {
    if (!action.data.parameters.requestId) {
        throw new Error('requestId must be given');
    }
    const signer = action_1.default.getSignerIdentityFromAction(action);
    const signerRole = request_1.default.getRoleInRequest(signer, request);
    // avoid to mutate the request
    let requestCopied = (0, utils_1.deepCopy)(request);
    requestCopied = request_1.default.pushExtensionsData(requestCopied, action.data.parameters.extensionsData);
    requestCopied.events.push(generateEvent(action, timestamp, signer));
    if (signerRole === types_1.RequestLogicTypes.ROLE.PAYER) {
        if (request.state !== types_1.RequestLogicTypes.STATE.CREATED) {
            throw new Error('A payer cancel need to be done on a request with the state created');
        }
        requestCopied.state = types_1.RequestLogicTypes.STATE.CANCELED;
        return requestCopied;
    }
    if (signerRole === types_1.RequestLogicTypes.ROLE.PAYEE) {
        if (request.state === types_1.RequestLogicTypes.STATE.CANCELED) {
            throw new Error('Cannot cancel an already canceled request');
        }
        requestCopied.state = types_1.RequestLogicTypes.STATE.CANCELED;
        return requestCopied;
    }
    throw new Error('Signer must be the payer or the payee');
}
/**
 * Private function to generate the event 'Cancel' from an action
 *
 * @param Types.IAction action the action that create the event
 * @param IdentityTypes.IIdentity actionSigner the signer of the action
 *
 * @returns Types.IEvent the event generated
 */
function generateEvent(action, timestamp, actionSigner) {
    const params = action.data.parameters;
    const event = {
        actionSigner,
        name: types_1.RequestLogicTypes.ACTION_NAME.CANCEL,
        parameters: {
            extensionsDataLength: params.extensionsData ? params.extensionsData.length : 0,
        },
        timestamp,
    };
    return event;
}
//# sourceMappingURL=cancel.js.map