"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@requestnetwork/types");
const action_1 = require("../action");
const request_1 = require("../request");
const version_1 = require("../version");
const utils_1 = require("@requestnetwork/utils");
/**
 * Implementation of the action reduceExpectedAmount from request logic specification
 */
exports.default = {
    applyActionToRequest,
    format,
};
/**
 * Function to format an action to reduce expected amount of a Request
 *
 * @param IReduceExpectedAmountParameters reduceAmountParameters parameters to reduce expected amount of a request
 * @param IIdentity signerIdentity Identity of the signer
 * @param ISignatureProvider signatureProvider Signature provider in charge of the signature
 *
 * @returns IAction  the action with the signature
 */
function format(reduceAmountParameters, signerIdentity, signatureProvider) {
    if (!(0, utils_1.isValidAmount)(reduceAmountParameters.deltaAmount)) {
        throw new Error('deltaAmount must be a string representing a positive integer');
    }
    const unsignedAction = {
        name: types_1.RequestLogicTypes.ACTION_NAME.REDUCE_EXPECTED_AMOUNT,
        parameters: reduceAmountParameters,
        version: version_1.default.currentVersion,
    };
    return action_1.default.createAction(unsignedAction, signerIdentity, signatureProvider);
}
/**
 * Function to apply an reduceExpectedAmount action on a request
 *
 * @param Types.IAction action the action to apply
 *
 * @returns Types.IRequest the new request
 */
function applyActionToRequest(action, timestamp, request) {
    if (!action.data.parameters.requestId) {
        throw new Error('requestId must be given');
    }
    if (!request.payee) {
        throw new Error('the request must have a payee');
    }
    if (!action.data.parameters.deltaAmount) {
        throw new Error('deltaAmount must be given');
    }
    if (!(0, utils_1.isValidAmount)(action.data.parameters.deltaAmount)) {
        throw new Error('deltaAmount must be a string representing a positive integer');
    }
    const signer = action_1.default.getSignerIdentityFromAction(action);
    const signerRole = request_1.default.getRoleInRequest(signer, request);
    // avoid to mutate the request
    let requestCopied = (0, utils_1.deepCopy)(request);
    requestCopied = request_1.default.pushExtensionsData(requestCopied, action.data.parameters.extensionsData);
    requestCopied.events.push(generateEvent(action, timestamp, signer));
    if (signerRole === types_1.RequestLogicTypes.ROLE.PAYEE) {
        if (request.state === types_1.RequestLogicTypes.STATE.CANCELED) {
            throw new Error('the request must not be canceled');
        }
        // reduce the expected amount and store it as string or throw if the result is not valid
        requestCopied.expectedAmount = (0, utils_1.reduceAmount)(request.expectedAmount, action.data.parameters.deltaAmount);
        return requestCopied;
    }
    throw new Error('signer must be the payee');
}
/**
 * Private function to generate the event 'ReduceExpectedAmount' from an action
 *
 * @param Types.IAction action the action data that create the event
 * @param IdentityTypes.IIdentity actionSigner the signer of the action
 *
 * @returns Types.IEvent the event generated
 */
function generateEvent(action, timestamp, actionSigner) {
    const params = action.data.parameters;
    const event = {
        actionSigner,
        name: types_1.RequestLogicTypes.ACTION_NAME.REDUCE_EXPECTED_AMOUNT,
        parameters: {
            deltaAmount: action.data.parameters.deltaAmount,
            extensionsDataLength: params.extensionsData ? params.extensionsData.length : 0,
        },
        timestamp,
    };
    return event;
}
//# sourceMappingURL=reduceExpectedAmount.js.map