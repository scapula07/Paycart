/**
 * Function to manage Elliptic-curve cryptography
 */
export { ecDecrypt, ecEncrypt, getAddressFromPrivateKey, getAddressFromPublicKey, ecRecover, ecSign, };
/**
 * Function to derive the address from an EC private key
 *
 * @param privateKey the private key to derive
 *
 * @returns the address
 */
declare function getAddressFromPrivateKey(privateKey: string): string;
/**
 * Function to derive the address from an EC public key
 *
 * @param publicKey the public key to derive
 *
 * @returns the address
 */
declare function getAddressFromPublicKey(publicKey: string): string;
/**
 * Function ecSigndata with ECDSA
 *
 * @param data the data to sign
 *
 * @returns the signature
 */
declare function ecSign(privateKey: string, data: string): string;
/**
 * Function to recover address from a signature
 *
 * @param signature the signature
 * @param data the data signed
 *
 * @returns the address
 */
declare function ecRecover(signature: string, data: string): string;
/**
 * Function to encrypt data with a public key
 *
 * @param publicKey the public key to encrypt with
 * @param data the data to encrypt
 *
 * @returns the encrypted data
 */
declare function ecEncrypt(publicKey: string, data: string): Promise<string>;
/**
 * Function to decrypt data with a public key
 *
 * @param privateKey the private key to decrypt with
 * @param data the data to decrypt
 *
 * @returns the decrypted data
 */
declare function ecDecrypt(privateKey: string, data: string): Promise<string>;
//# sourceMappingURL=ec-utils.d.ts.map