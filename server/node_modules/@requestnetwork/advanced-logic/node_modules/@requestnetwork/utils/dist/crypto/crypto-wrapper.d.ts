/// <reference types="node" />
/**
 * Functions to manage native crypto functions of nodeJs
 */
export { decryptWithAes256cbc, decryptWithAes256gcm, encryptWithAes256cbc, encryptWithAes256gcm, random32Bytes, };
/**
 * Generates 32 cryptographically strong pseudo-random bytes
 *
 * @returns Promise resolving the 32 bytes generated
 */
declare function random32Bytes(): Promise<Buffer>;
/**
 * Encrypts a buffer using AES-256-cbc plus a random Initialization Vector (IV)
 *
 * @param data the data to encrypt
 * @param key the key that will be used for the encryption
 *
 * @returns Promise resolving a buffer containing the IV and the encrypted data
 */
declare function encryptWithAes256cbc(data: Buffer, key: Buffer): Promise<Buffer>;
/**
 * Encrypts a buffer using AES-256-gcm plus a random Initialization Vector (IV)
 *
 * @param data the data to encrypt
 * @param key the key that will be used for the encryption
 *
 * @returns Promise resolving a buffer containing the IV and the encrypted data
 */
declare function encryptWithAes256gcm(data: Buffer, key: Buffer): Promise<Buffer>;
/**
 * Decrypts an encrypted buffer using AES-256-cbc plus a random Initialization Vector (IV)
 *
 * @param encrypted the data to decrypt
 * @param key key of the encryption
 *
 * @returns Promise resolving a buffer containing the data decrypted
 */
declare function decryptWithAes256cbc(encryptedAndIv: Buffer, key: Buffer): Promise<Buffer>;
/**
 * Decrypts an encrypted buffer using AES-256-gcm plus a random Initialization Vector (IV)
 *
 * @param encrypted the data to decrypt
 * @param key key of the encryption
 *
 * @returns Promise resolving a buffer containing the data decrypted
 */
declare function decryptWithAes256gcm(encryptedAndIv: Buffer, key: Buffer): Promise<Buffer>;
//# sourceMappingURL=crypto-wrapper.d.ts.map