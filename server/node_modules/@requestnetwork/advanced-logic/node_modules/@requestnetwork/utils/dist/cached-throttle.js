"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cachedThrottle = void 0;
/**
 * A method that calls the target function at most once every `minimumDelay` milliseconds and
 * returns the cached return value in the meantime.
 *
 * @param target The target function
 * @param minimumDelay The minimum delay between calls to the target function in milliseconds
 */
const cachedThrottle = (target, minimumDelay) => {
    if (!(target instanceof Function)) {
        throw new Error('Target can only be a function');
    }
    // The last cached response
    let cachedResponse = null;
    // the last time the function was called
    let lastCall = Number.NEGATIVE_INFINITY;
    return (...args) => {
        if (!cachedResponse || Date.now() >= lastCall + minimumDelay) {
            lastCall = Date.now();
            cachedResponse = target(...args);
        }
        return cachedResponse;
    };
};
exports.cachedThrottle = cachedThrottle;
//# sourceMappingURL=cached-throttle.js.map