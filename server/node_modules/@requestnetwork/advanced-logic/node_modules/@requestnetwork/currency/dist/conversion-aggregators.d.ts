import { CurrencyDefinition } from './types';
import { CurrencyTypes } from '@requestnetwork/types';
/**
 * currencyFrom => currencyTo => cost
 */
export type CurrencyPairs = Record<string, Record<string, number>>;
/**
 * Aggregators maps define pairs of currencies for which an onchain oracle exists, by network.
 *
 * Network => currencyFrom => currencyTo => cost
 */
export type AggregatorsMap<T extends CurrencyTypes.ChainName = CurrencyTypes.ChainName> = Partial<Record<T, CurrencyPairs>>;
/**
 * Conversion paths per network used by default if no other path given to the Currency Manager.
 * Must be updated every time an aggregator is added to one network.
 */
export declare const defaultConversionPairs: AggregatorsMap;
export declare const conversionSupportedNetworks: CurrencyTypes.ChainName[];
/**
 * Gets the on-chain conversion path between two currencies.
 * The path is used to value currencyFrom against currencyTo.
 *
 * @param currencyFrom currency from
 * @param currencyTo currency to
 * @param network ethereum network (default: 'mainnet')
 *
 * @returns conversion path
 */
export declare function getPath(currencyFrom: Pick<CurrencyDefinition, 'hash'>, currencyTo: Pick<CurrencyDefinition, 'hash'>, network?: CurrencyTypes.ChainName, pairs?: Partial<Record<CurrencyTypes.ChainName, CurrencyPairs>>): string[] | null;
//# sourceMappingURL=conversion-aggregators.d.ts.map