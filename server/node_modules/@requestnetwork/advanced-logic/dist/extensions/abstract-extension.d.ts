import { ExtensionTypes, IdentityTypes, RequestLogicTypes } from '@requestnetwork/types';
/**
 * Abstract class to create extension
 */
export declare abstract class AbstractExtension<TCreationParameters> implements ExtensionTypes.IExtension {
    readonly extensionType: ExtensionTypes.TYPE;
    readonly extensionId: ExtensionTypes.ID;
    readonly currentVersion: string;
    protected actions: ExtensionTypes.SupportedActions;
    protected constructor(extensionType: ExtensionTypes.TYPE, extensionId: ExtensionTypes.ID, currentVersion: string);
    /**
     * Creates the extensionsData to create the extension
     *
     * @param creationParameters extensions parameters to create
     *
     * @returns IExtensionCreationAction the extensionsData to be stored in the request
     */
    createCreationAction(creationParameters: TCreationParameters): ExtensionTypes.IAction<TCreationParameters>;
    /**
     * Applies the extension action to the request
     * Is called to interpret the extensions data when applying the transaction
     *
     * @param extensionsState previous state of the extensions
     * @param extensionAction action to apply
     * @param requestState request state read-only
     * @param actionSigner identity of the signer
     *
     * @returns state of the request updated
     */
    applyActionToExtension(extensionsState: RequestLogicTypes.IExtensionStates, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): RequestLogicTypes.IExtensionStates;
    /**
     * Applies an extension creation action
     *
     * @param extensionAction action to apply
     * @param _timestamp action timestamp
     *
     * @returns state of the extension created
     */
    protected applyCreation(extensionAction: ExtensionTypes.IAction, _timestamp: number): ExtensionTypes.IState;
    /**
     * Validate the extension action regarding the request
     * It is called at the beginning of every applyActionToExtension()
     * It must throw in case of error
     *
     * @param extensionAction action to apply
     */
    protected validate(_request: RequestLogicTypes.IRequest, _extensionAction: ExtensionTypes.IAction): void;
}
//# sourceMappingURL=abstract-extension.d.ts.map