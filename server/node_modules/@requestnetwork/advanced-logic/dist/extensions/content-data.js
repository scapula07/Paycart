"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@requestnetwork/types");
const abstract_extension_1 = require("./abstract-extension");
const CURRENT_VERSION = '0.1.0';
/**
 * Implementation of the content data extension
 */
class ContentDataExtension extends abstract_extension_1.AbstractExtension {
    constructor() {
        super(types_1.ExtensionTypes.TYPE.CONTENT_DATA, types_1.ExtensionTypes.ID.CONTENT_DATA, CURRENT_VERSION);
    }
    /**
     * Creates the extensionsData to create the extension content-data
     * Should be called to create the extensionsData of a request
     *
     * @param extensions IAdvancedLogicExtensionsCreationParameters extensions parameters to create
     *
     * @returns IExtensionCreationAction the extensionsData to be store in the request
     */
    createCreationAction(creationParameters) {
        if (!creationParameters.content) {
            throw Error('No content has been given for the extension content-data');
        }
        return super.createCreationAction(creationParameters);
    }
    /**
     * Applies a creation
     *
     * @param extensionAction action to apply
     *
     * @returns state of the extension created
     */
    applyCreation(extensionAction, timestamp) {
        if (!extensionAction.parameters.content) {
            throw Error('No content has been given for the extension content-data');
        }
        const genericCreationAction = super.applyCreation(extensionAction, timestamp);
        return Object.assign(Object.assign({}, genericCreationAction), { events: [], id: this.extensionId, type: this.extensionType, values: Object.assign(Object.assign({}, genericCreationAction.values), { content: extensionAction.parameters.content }) });
    }
}
exports.default = ContentDataExtension;
//# sourceMappingURL=content-data.js.map