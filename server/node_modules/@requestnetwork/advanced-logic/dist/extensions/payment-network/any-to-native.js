"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidMaxRateTimespanError = void 0;
const fee_reference_based_1 = require("./fee-reference-based");
const types_1 = require("@requestnetwork/types");
const address_based_1 = require("./address-based");
class AnyToNativeTokenPaymentNetwork extends fee_reference_based_1.FeeReferenceBasedPaymentNetwork {
    constructor(extensionId, currentVersion, supportedNetworks) {
        super(extensionId, currentVersion, types_1.RequestLogicTypes.CURRENCY.ETH);
        this.supportedNetworks = supportedNetworks;
    }
    createCreationAction(creationParameters) {
        const network = creationParameters.network;
        this.throwIfInvalidNetwork(network);
        if (creationParameters.paymentAddress &&
            !this.isValidAddress(creationParameters.paymentAddress)) {
            throw new address_based_1.InvalidPaymentAddressError(creationParameters.paymentAddress);
        }
        if (creationParameters.refundAddress &&
            !this.isValidAddress(creationParameters.refundAddress)) {
            throw new address_based_1.InvalidPaymentAddressError(creationParameters.refundAddress, 'refundAddress');
        }
        if (creationParameters.feeAddress && !this.isValidAddress(creationParameters.feeAddress)) {
            throw new address_based_1.InvalidPaymentAddressError(creationParameters.feeAddress, 'feeAddress');
        }
        if (creationParameters.maxRateTimespan && creationParameters.maxRateTimespan < 0) {
            throw new InvalidMaxRateTimespanError(creationParameters.maxRateTimespan);
        }
        return super.createCreationAction(creationParameters);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isValidAddress(_address) {
        throw new Error(`Default implementation of isValidAddress() does not support native tokens. Please override this method.`);
    }
    throwIfInvalidNetwork(network) {
        super.throwIfInvalidNetwork(network);
        if (this.supportedNetworks && !this.supportedNetworks.includes(network)) {
            throw new address_based_1.UnsupportedNetworkError(network, this.supportedNetworks);
        }
    }
}
exports.default = AnyToNativeTokenPaymentNetwork;
class InvalidMaxRateTimespanError extends Error {
    constructor(maxRateTimespan) {
        super(`${maxRateTimespan} is not a valid maxRateTimespan`);
    }
}
exports.InvalidMaxRateTimespanError = InvalidMaxRateTimespanError;
//# sourceMappingURL=any-to-native.js.map