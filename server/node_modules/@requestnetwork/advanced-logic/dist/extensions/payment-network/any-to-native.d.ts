import { FeeReferenceBasedPaymentNetwork } from './fee-reference-based';
import { CurrencyTypes, ExtensionTypes } from '@requestnetwork/types';
export default abstract class AnyToNativeTokenPaymentNetwork extends FeeReferenceBasedPaymentNetwork {
    readonly supportedNetworks: CurrencyTypes.ChainName[];
    protected constructor(extensionId: ExtensionTypes.PAYMENT_NETWORK_ID, currentVersion: string, supportedNetworks: CurrencyTypes.ChainName[]);
    createCreationAction(creationParameters: ExtensionTypes.PnAnyToAnyConversion.ICreationParameters): ExtensionTypes.IAction<ExtensionTypes.PnAnyToAnyConversion.ICreationParameters>;
    protected isValidAddress(_address: string): boolean;
    protected throwIfInvalidNetwork(network?: CurrencyTypes.ChainName): asserts network is CurrencyTypes.ChainName;
}
export declare class InvalidMaxRateTimespanError extends Error {
    constructor(maxRateTimespan: number);
}
//# sourceMappingURL=any-to-native.d.ts.map