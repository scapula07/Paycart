"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@requestnetwork/types");
const address_based_1 = require("./address-based");
const reference_based_1 = require("./reference-based");
/**
 * Implementation of the payment network to pay in ETH based on input data.
 */
class NativeTokenPaymentNetwork extends reference_based_1.default {
    constructor(extensionId, currentVersion, supportedNetworks) {
        super(extensionId, currentVersion, types_1.RequestLogicTypes.CURRENCY.ETH);
        this.supportedNetworks = supportedNetworks;
    }
    createCreationAction(creationParameters) {
        const networkName = creationParameters.paymentNetworkName;
        if (creationParameters.paymentAddress || creationParameters.refundAddress) {
            if (networkName) {
                this.throwIfInvalidNetwork(networkName);
            }
            else {
                throw new Error(`The network name is mandatory for the creation of the extension ${this.extensionId}.`);
            }
        }
        if (creationParameters.paymentAddress &&
            !this.isValidAddress(creationParameters.paymentAddress)) {
            throw new address_based_1.InvalidPaymentAddressError(creationParameters.paymentAddress);
        }
        if (creationParameters.refundAddress &&
            !this.isValidAddress(creationParameters.refundAddress)) {
            throw new address_based_1.InvalidPaymentAddressError(creationParameters.refundAddress, 'refundAddress');
        }
        return super.createCreationAction(creationParameters);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isValidAddress(_address) {
        throw new Error(`Default implementation of isValidAddress() does not support native tokens. Please override this method.`);
    }
    throwIfInvalidNetwork(network) {
        super.throwIfInvalidNetwork(network);
        if (this.supportedNetworks && !this.supportedNetworks.includes(network)) {
            throw new address_based_1.UnsupportedNetworkError(network, this.supportedNetworks);
        }
    }
}
exports.default = NativeTokenPaymentNetwork;
//# sourceMappingURL=native-token.js.map