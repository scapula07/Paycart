import { ExtensionTypes, IdentityTypes, RequestLogicTypes } from '@requestnetwork/types';
import ReferenceBasedPaymentNetwork from './reference-based';
/**
 * Core of the reference based with fee payment networks
 * This module is called by the fee reference based (ethereum & erc20) payment networks to avoid code redundancy
 */
export declare abstract class FeeReferenceBasedPaymentNetwork<TCreationParameters extends ExtensionTypes.PnFeeReferenceBased.ICreationParameters = ExtensionTypes.PnFeeReferenceBased.ICreationParameters> extends ReferenceBasedPaymentNetwork<TCreationParameters> {
    protected constructor(extensionId: ExtensionTypes.PAYMENT_NETWORK_ID, currentVersion: string, supportedCurrencyType: RequestLogicTypes.CURRENCY);
    /**
     * Creates the extensionsData to create the payment detection extension
     *
     * @param creationParameters extensions parameters to create
     *
     * @returns IExtensionCreationAction the extensionsData to be stored in the request
     */
    createCreationAction(creationParameters: TCreationParameters): ExtensionTypes.IAction<TCreationParameters>;
    /**
     * Creates the extensionsData to add a fee address
     *
     * @param addFeeParameters extensions parameters to create
     *
     * @returns IAction the extensionsData to be stored in the request
     */
    createAddFeeAction(addFeeParameters: ExtensionTypes.PnFeeReferenceBased.IAddFeeParameters): ExtensionTypes.IAction;
    /**
     * Applies a creation extension action
     *
     * @param extensionAction action to apply
     * @param timestamp action timestamp
     *
     * @returns state of the extension created
     */
    protected applyCreation(extensionAction: ExtensionTypes.IAction, timestamp: number): ExtensionTypes.IState;
    /**
     * Applies an add fee address and amount extension action
     *
     * @param extensionState previous state of the extension
     * @param extensionAction action to apply
     * @param requestState request state read-only
     * @param actionSigner identity of the signer
     * @param timestamp action timestamp
     *
     * @returns state of the extension updated
     */
    protected applyAddFee(extensionState: ExtensionTypes.IState, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): ExtensionTypes.IState;
}
//# sourceMappingURL=fee-reference-based.d.ts.map