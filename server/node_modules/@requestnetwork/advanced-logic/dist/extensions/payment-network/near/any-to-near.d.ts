import { ICurrencyManager } from '@requestnetwork/currency';
import { CurrencyTypes, ExtensionTypes, IdentityTypes, RequestLogicTypes } from '@requestnetwork/types';
import AnyToNativeTokenPaymentNetwork from '../any-to-native';
export default class AnyToNearPaymentNetwork extends AnyToNativeTokenPaymentNetwork {
    private currencyManager;
    constructor(currencyManager: ICurrencyManager, supportedNetworks?: CurrencyTypes.NearChainName[], currentVersion?: string);
    /**
     * Check if a near address is valid
     *
     * @param {string} address address to check
     * @returns {boolean} true if address is valid
     */
    protected isValidAddress(address: string): boolean;
    /**
     * Applies a creation extension action
     *
     * @param extensionAction action to apply
     * @param timestamp action timestamp
     *
     * @returns state of the extension created
     */
    protected applyCreation(extensionAction: ExtensionTypes.IAction, timestamp: number): ExtensionTypes.IState;
    /**
     * Applies add payment address
     *
     * @param extensionState previous state of the extension
     * @param extensionAction action to apply
     * @param requestState request state read-only
     * @param actionSigner identity of the signer
     *
     *  @returns state of the extension updated
     */
    protected applyAddPaymentAddress(extensionState: ExtensionTypes.IState, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): ExtensionTypes.IState;
    protected applyAddFee(extensionState: ExtensionTypes.IState, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): ExtensionTypes.IState;
    /**
     * Validate that the network and currency coming from the extension and/or action are valid and supported.
     * It must throw in case of error.
     */
    protected validate(request: RequestLogicTypes.IRequest, extensionAction: ExtensionTypes.IAction): void;
}
//# sourceMappingURL=any-to-near.d.ts.map