"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@requestnetwork/types");
const currency_1 = require("@requestnetwork/currency");
const address_based_1 = require("../address-based");
const fee_reference_based_1 = require("../fee-reference-based");
const EVM_CURRENT_VERSION = '0.2.0';
const NEAR_CURRENT_VERSION = 'NEAR-0.1.0';
/**
 * Implementation of the payment network to pay in ERC20, including third-party fees payment, based on a reference provided to a proxy contract.
 */
class Erc20FeeProxyPaymentNetwork extends fee_reference_based_1.FeeReferenceBasedPaymentNetwork {
    /**
     * @param network is only relevant for non-EVM chains (Near and Near testnet)
     */
    constructor(extensionId = types_1.ExtensionTypes.PAYMENT_NETWORK_ID
        .ERC20_FEE_PROXY_CONTRACT, currentVersion, network) {
        super(extensionId, currentVersion !== null && currentVersion !== void 0 ? currentVersion : Erc20FeeProxyPaymentNetwork.getDefaultCurrencyVersion(network), types_1.RequestLogicTypes.CURRENCY.ERC20);
        this.network = network;
    }
    static getDefaultCurrencyVersion(network) {
        return currency_1.NearChains.isChainSupported(network) ? NEAR_CURRENT_VERSION : EVM_CURRENT_VERSION;
    }
    // Override `validate` to account for network-specific instanciation (non-EVM only)
    validate(request, extensionAction) {
        if (this.network &&
            request.currency.network &&
            !(0, currency_1.isSameChain)(this.network, request.currency.network)) {
            throw new address_based_1.UnsupportedNetworkError(request.currency.network, [this.network]);
        }
        super.validate(request, extensionAction);
    }
    // Override `isValidAddress` to account for network-specific instanciation (non-EVM only)
    isValidAddress(address) {
        if (currency_1.NearChains.isChainSupported(this.network)) {
            if (currency_1.NearChains.isTestnet(this.network)) {
                return this.isValidAddressForSymbolAndNetwork(address, 'NEAR-testnet', 'near-testnet');
            }
            else {
                return this.isValidAddressForSymbolAndNetwork(address, 'NEAR', 'near');
            }
        }
        else {
            return super.isValidAddress(address);
        }
    }
}
exports.default = Erc20FeeProxyPaymentNetwork;
//# sourceMappingURL=fee-proxy-contract.js.map