import { ExtensionTypes, IdentityTypes, RequestLogicTypes } from '@requestnetwork/types';
import { AbstractExtension } from '../abstract-extension';
/**
 * Core of the declarative payment network
 */
export default class DeclarativePaymentNetwork<TCreationParameters extends ExtensionTypes.PnAnyDeclarative.ICreationParameters = ExtensionTypes.PnAnyDeclarative.ICreationParameters> extends AbstractExtension<TCreationParameters> {
    readonly extensionId: ExtensionTypes.PAYMENT_NETWORK_ID;
    readonly currentVersion: string;
    constructor(extensionId?: ExtensionTypes.PAYMENT_NETWORK_ID, currentVersion?: string);
    /**
     * Creates the extensionsData to add a sent payment declaration
     *
     * @param parameters parameters to create sent payment declaration
     *
     * @returns IAction the extensionsData to be stored in the request
     */
    createDeclareSentPaymentAction(parameters: ExtensionTypes.PnAnyDeclarative.ISentParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensionsData to add a sent refund declaration
     *
     * @param parameters parameters to create sent refund declaration
     *
     * @returns IAction the extensionsData to be stored in the request
     */
    createDeclareSentRefundAction(parameters: ExtensionTypes.PnAnyDeclarative.ISentParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensionsData to add a received payment declaration
     *
     * @param parameters parameters to create received payment declaration
     *
     * @returns IAction the extensionsData to be stored in the request
     */
    createDeclareReceivedPaymentAction(parameters: ExtensionTypes.PnAnyDeclarative.IReceivedParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensionsData to add a received refund declaration
     *
     * @param parameters parameters to create received refund declaration
     *
     * @returns IAction the extensionsData to be stored in the request
     */
    createDeclareReceivedRefundAction(parameters: ExtensionTypes.PnAnyDeclarative.IReceivedParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensionsData to add payment instruction
     *
     * @param extensions extensions parameters to add payment instruction
     *
     * @returns IAction the extensionsData to be stored in the request
     */
    createAddPaymentInstructionAction(parameters: ExtensionTypes.PnAnyDeclarative.IAddPaymentInstructionParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensionsData to add refund instruction
     *
     * @param extensions extensions parameters to add refund instruction
     *
     * @returns IAction the extensionsData to be stored in the request
     */
    createAddRefundInstructionAction(parameters: ExtensionTypes.PnAnyDeclarative.IAddRefundInstructionParameters): ExtensionTypes.IAction;
    /**
     * Creates the extensionsData to add delegate
     *
     * @param extensions extensions parameters to add delegate
     *
     * @returns IAction the extensionsData to be stored in the request
     */
    createAddDelegateAction(parameters: ExtensionTypes.PnAnyDeclarative.IAddDelegateParameters): ExtensionTypes.IAction;
    /** Applies a creation
     *
     * @param extensionAction action to apply
     * @param timestamp timestamp of the action
     *
     * @returns state of the extension created
     */
    protected applyCreation(extensionAction: ExtensionTypes.IAction<TCreationParameters>, timestamp: number): ExtensionTypes.IState;
    /** Applies a declare sent payment
     *
     * @param extensionsState previous state of the extensions
     * @param extensionAction action to apply
     * @param requestState request state read-only
     * @param actionSigner identity of the signer
     * @param timestamp timestamp of the action
     *
     * @returns state of the extension created
     */
    protected applyDeclareSentPayment(extensionState: ExtensionTypes.IState, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): ExtensionTypes.IState;
    /** Applies a declare sent refund
     *
     * @param extensionsState previous state of the extensions
     * @param extensionAction action to apply
     * @param requestState request state read-only
     * @param actionSigner identity of the signer
     * @param timestamp timestamp of the action
     *
     * @returns state of the extension created
     */
    protected applyDeclareSentRefund(extensionState: ExtensionTypes.IState, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): ExtensionTypes.IState;
    /** Applies a declare received payment
     *
     * @param extensionsState previous state of the extensions
     * @param extensionAction action to apply
     * @param requestState request state read-only
     * @param actionSigner identity of the signer
     * @param timestamp timestamp of the action
     *
     * @returns state of the extension created
     */
    protected applyDeclareReceivedPayment(extensionState: ExtensionTypes.IState, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): ExtensionTypes.IState;
    /** Applies a declare received refund
     *
     * @param extensionsState previous state of the extensions
     * @param extensionAction action to apply
     * @param requestState request state read-only
     * @param actionSigner identity of the signer
     * @param timestamp timestamp of the action
     *
     * @returns state of the extension created
     */
    protected applyDeclareReceivedRefund(extensionState: ExtensionTypes.IState, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): ExtensionTypes.IState;
    /** Applies an add of payment instruction
     *
     * @param extensionsState previous state of the extensions
     * @param extensionAction action to apply
     * @param requestState request state read-only
     * @param actionSigner identity of the signer
     * @param timestamp timestamp of the action
     *
     * @returns state of the extension created
     */
    protected applyAddPaymentInstruction(extensionState: ExtensionTypes.IState, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): ExtensionTypes.IState;
    /** Applies an add of a delegate
     *
     * @param extensionsState previous state of the extensions
     * @param extensionAction action to apply
     * @param requestState request state read-only
     * @param actionSigner identity of the signer
     * @param timestamp timestamp of the action
     *
     * @returns state of the extension created
     */
    protected applyAddDelegate(extensionState: ExtensionTypes.IState, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): ExtensionTypes.IState;
    /** Applies an add of refund instruction
     *
     * @param extensionsState previous state of the extensions
     * @param extensionAction action to apply
     * @param requestState request state read-only
     * @param actionSigner identity of the signer
     * @param timestamp timestamp of the action
     *
     * @returns state of the extension created
     */
    protected applyAddRefundInstruction(extensionState: ExtensionTypes.IState, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): ExtensionTypes.IState;
    /** Checks if signer is the right identity from the request and the role expected
     *
     * @param extensionsState previous state of the extensions
     * @param requestState request state read-only
     * @param actionSigner identity of the signer
     * @param role The role to check (Payee or Payer)
     *
     * @returns throws in case of error
     */
    protected checkIdentities(extensionState: ExtensionTypes.IState, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, role: RequestLogicTypes.ROLE): void;
}
//# sourceMappingURL=declarative.d.ts.map