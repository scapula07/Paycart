"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const address_based_1 = require("./address-based");
// Regex for "at least 16 hexadecimal numbers". Used to validate the salt
const eightHexRegex = /[0-9a-f]{16,}/;
/**
 * Core of the reference based payment networks
 * This module is called by the reference based payment networks to avoid code redundancy
 */
class ReferenceBasedPaymentNetwork extends address_based_1.default {
    /**
     * Creates the extensionsData to create the payment detection extension
     *
     * @param creationParameters extensions parameters to create
     *
     * @returns IExtensionCreationAction the extensionsData to be stored in the request
     */
    createCreationAction(creationParameters) {
        if (!creationParameters.salt) {
            throw Error('salt should not be empty');
        }
        if (!eightHexRegex.test(creationParameters.salt)) {
            throw Error(`The salt must be a string of minimum 16 hexadecimal characters. Example: 'ea3bc7caf64110ca'`);
        }
        return super.createCreationAction(creationParameters);
    }
    /**
     * Applies a creation extension action
     *
     * @param extensionAction action to apply
     * @param timestamp ?
     *
     * @returns state of the extension created
     */
    applyCreation(extensionAction, timestamp) {
        if (!extensionAction.parameters.salt) {
            throw Error('salt should not be empty');
        }
        if (!eightHexRegex.test(extensionAction.parameters.salt)) {
            throw Error(`The salt must be a string of minimum 16 hexadecimal characters. Example: 'ea3bc7caf64110ca'`);
        }
        const basicCreationAction = super.applyCreation(extensionAction, timestamp);
        return Object.assign(Object.assign({}, basicCreationAction), { events: [
                {
                    name: 'create',
                    parameters: {
                        paymentAddress: extensionAction.parameters.paymentAddress,
                        refundAddress: extensionAction.parameters.refundAddress,
                        salt: extensionAction.parameters.salt,
                    },
                    timestamp,
                },
            ], values: Object.assign(Object.assign({}, basicCreationAction.values), { salt: extensionAction.parameters.salt }) });
    }
}
exports.default = ReferenceBasedPaymentNetwork;
//# sourceMappingURL=reference-based.js.map