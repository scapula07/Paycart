import { AdvancedLogicTypes, CurrencyTypes, ExtensionTypes, IdentityTypes, RequestLogicTypes } from '@requestnetwork/types';
import { ICurrencyManager } from '@requestnetwork/currency';
import ContentData from './extensions/content-data';
import AddressBasedBtc from './extensions/payment-network/bitcoin/mainnet-address-based';
import AddressBasedTestnetBtc from './extensions/payment-network/bitcoin/testnet-address-based';
import Declarative from './extensions/payment-network/declarative';
import AddressBasedErc20 from './extensions/payment-network/erc20/address-based';
import FeeProxyContractErc20 from './extensions/payment-network/erc20/fee-proxy-contract';
import ProxyContractErc20 from './extensions/payment-network/erc20/proxy-contract';
import Erc777Stream from './extensions/payment-network/erc777/stream';
import FeeProxyContractEth from './extensions/payment-network/ethereum/fee-proxy-contract';
import EthereumInputData from './extensions/payment-network/ethereum/input-data';
import AnyToErc20Proxy from './extensions/payment-network/any-to-erc20-proxy';
import AnyToEthProxy from './extensions/payment-network/any-to-eth-proxy';
import NativeToken from './extensions/payment-network/native-token';
import AnyToNative from './extensions/payment-network/any-to-native';
import Erc20TransferableReceivablePaymentNetwork from './extensions/payment-network/erc20/transferable-receivable';
/**
 * Module to manage Advanced logic extensions
 * Package to route the format and parsing of extensions following their id
 */
export default class AdvancedLogic implements AdvancedLogicTypes.IAdvancedLogic {
    /** Give access to the functions specific of the extensions supported */
    extensions: {
        addressBasedBtc: AddressBasedBtc;
        addressBasedErc20: AddressBasedErc20;
        addressBasedTestnetBtc: AddressBasedTestnetBtc;
        contentData: ContentData;
        anyToErc20Proxy: AnyToErc20Proxy;
        declarative: Declarative;
        ethereumInputData: EthereumInputData;
        nativeToken: NativeToken[];
        feeProxyContractErc20: FeeProxyContractErc20;
        proxyContractErc20: ProxyContractErc20;
        erc777Stream: Erc777Stream;
        feeProxyContractEth: FeeProxyContractEth;
        anyToEthProxy: AnyToEthProxy;
        anyToNativeToken: AnyToNative[];
        erc20TransferableReceivable: Erc20TransferableReceivablePaymentNetwork;
    };
    constructor(currencyManager?: ICurrencyManager);
    /**
     * Applies the extension action to the request extensions state
     *
     * @param extensionsState IExtensionStates previous state of the extensions
     * @param extensionAction IAction action to apply
     * @param requestState IRequest request state read-only
     * @param actionSigner IIdentity identity of the signer
     * @param timestamp timestamp of the action
     *
     * @returns state of the extension
     */
    applyActionToExtensions(extensionsState: RequestLogicTypes.IExtensionStates, extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest, actionSigner: IdentityTypes.IIdentity, timestamp: number): RequestLogicTypes.IExtensionStates;
    protected getExtensionForActionAndState(extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest): ExtensionTypes.IExtension;
    getNativeTokenExtensionForNetwork(network?: CurrencyTypes.ChainName): ExtensionTypes.IExtension<ExtensionTypes.PnReferenceBased.ICreationParameters> | undefined;
    getAnyToNativeTokenExtensionForNetwork(network?: CurrencyTypes.ChainName): AnyToNative | undefined;
    getFeeProxyContractErc20ForNetwork(network?: string): FeeProxyContractErc20;
    protected getNetwork(extensionAction: ExtensionTypes.IAction, requestState: RequestLogicTypes.IRequest): CurrencyTypes.ChainName | undefined;
}
//# sourceMappingURL=advanced-logic.d.ts.map