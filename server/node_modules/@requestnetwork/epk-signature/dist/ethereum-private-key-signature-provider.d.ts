import { IdentityTypes, SignatureProviderTypes, SignatureTypes } from '@requestnetwork/types';
/**
 * Implementation of the signature provider from private key
 * Allows to sign() with "Ethereum_address" identities thanks to their private key given in constructor() or addSignatureParameters()
 */
export default class EthereumPrivateKeySignatureProvider implements SignatureProviderTypes.ISignatureProvider {
    /** list of supported signing method */
    supportedMethods: SignatureTypes.METHOD[];
    /** list of supported identity types */
    supportedIdentityTypes: IdentityTypes.TYPE[];
    /** Dictionary containing all the private key indexed by address */
    private signatureParametersDictionary;
    constructor(signatureParameter?: SignatureTypes.ISignatureParameters);
    /**
     * Signs data
     *
     * @param string data the data to sign
     * @returns IIdentity the identity to sign with if not given, the default signer will be used
     *
     * @returns string the signature
     */
    sign(data: any, signer: IdentityTypes.IIdentity): Promise<SignatureTypes.ISignedData>;
    /**
     * Function to add a new private key in the provider
     *
     * @param ISignatureParameters signatureParams signature parameters to add
     *
     * @returns IIdentity identity from the signature parameter added
     */
    addSignatureParameters(signatureParams: SignatureTypes.ISignatureParameters): IdentityTypes.IIdentity;
    /**
     * Function to remove a private key from the provider
     *
     * @param IIdentity identity identity to remove the private key
     *
     * @returns void
     */
    removeRegisteredIdentity(identity: IdentityTypes.IIdentity): void;
    /**
     * Function to remove a private key from the provider
     *
     * @param IIdentity identity identity to remove the private key
     *
     * @returns void
     */
    clearAllRegisteredIdentities(): void;
    /**
     * Function to get all the identities available to sign with
     *
     * @returns IIdentity all the identities registered
     */
    getAllRegisteredIdentities(): IdentityTypes.IIdentity[];
}
//# sourceMappingURL=ethereum-private-key-signature-provider.d.ts.map